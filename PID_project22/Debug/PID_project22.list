
PID_project22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005068  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005200  08005200  00015200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005218  08005218  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005220  08005220  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005220  08005220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000080  080052a8  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080052a8  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea8f  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7d  00000000  00000000  0002eb3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  000307c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  000314b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017aee  00000000  00000000  00032108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb11  00000000  00000000  00049bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a69a  00000000  00000000  00058707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2da1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003968  00000000  00000000  000f2df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080051e8 	.word	0x080051e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	080051e8 	.word	0x080051e8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	C = ComputeLowpassConstant(1000, 5000);
 8000e58:	f241 3188 	movw	r1, #5000	; 0x1388
 8000e5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e60:	f001 f9d6 	bl	8002210 <ComputeLowpassConstant>
 8000e64:	eef0 7a40 	vmov.f32	s15, s0
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <main+0xc0>)
 8000e6a:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6e:	f001 fa19 	bl	80022a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e72:	f000 f863 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e76:	f000 fadb 	bl	8001430 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e7a:	f000 faaf 	bl	80013dc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e7e:	f000 fa0b 	bl	8001298 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000e82:	f000 f915 	bl	80010b0 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000e86:	f000 fa5b 	bl	8001340 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000e8a:	f000 f8bf 	bl	800100c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000e8e:	f000 f9af 	bl	80011f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim1);
 8000e92:	4821      	ldr	r0, [pc, #132]	; (8000f18 <main+0xc4>)
 8000e94:	f002 fc82 	bl	800379c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	481f      	ldr	r0, [pc, #124]	; (8000f18 <main+0xc4>)
 8000e9c:	f002 fd94 	bl	80039c8 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	481e      	ldr	r0, [pc, #120]	; (8000f1c <main+0xc8>)
 8000ea4:	f002 fee6 	bl	8003c74 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start_IT(&htim5);
 8000ea8:	481d      	ldr	r0, [pc, #116]	; (8000f20 <main+0xcc>)
 8000eaa:	f002 fcd1 	bl	8003850 <HAL_TIM_Base_Start_IT>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		static uint64_t timestamp = 0;
		time  = micros();
 8000eae:	f000 ff91 	bl	8001dd4 <micros>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	491b      	ldr	r1, [pc, #108]	; (8000f24 <main+0xd0>)
 8000eb8:	e9c1 2300 	strd	r2, r3, [r1]
		if (time > timestamp) {
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <main+0xd0>)
 8000ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec2:	4919      	ldr	r1, [pc, #100]	; (8000f28 <main+0xd4>)
 8000ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ec8:	4290      	cmp	r0, r2
 8000eca:	eb71 0303 	sbcs.w	r3, r1, r3
 8000ece:	d2ee      	bcs.n	8000eae <main+0x5a>
			timestamp += 100;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <main+0xd4>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f112 0464 	adds.w	r4, r2, #100	; 0x64
 8000eda:	f143 0500 	adc.w	r5, r3, #0
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <main+0xd4>)
 8000ee0:	e9c3 4500 	strd	r4, r5, [r3]
			dt = 0.0001;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <main+0xd8>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <main+0xdc>)
 8000ee8:	601a      	str	r2, [r3, #0]
			Distance();
 8000eea:	f000 fb9b 	bl	8001624 <Distance>
			Trajectory();
 8000eee:	f000 fbf3 	bl	80016d8 <Trajectory>
//			velocity_check = (QEIReadRaw_now - QEIReadRaw_past)/dt;
//		  PositionControlPID();
			QEIReadRaw_now = __HAL_TIM_GET_COUNTER(&htim2);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <main+0xc8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <main+0xe0>)
 8000efc:	601a      	str	r2, [r3, #0]
//			PositionControlPID();
			VelocityControlPID();
 8000efe:	f000 fb15 	bl	800152c <VelocityControlPID>
//			velocity_check = (QEIReadRaw_now - QEIReadRaw_past)/dt;
//			velocity_check_filter = (C * velocity_check) + ((1-C)*velocity_check_filter);
			motor(voltage);
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <main+0xe4>)
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0c:	f000 fee2 	bl	8001cd4 <motor>
	while (1) {
 8000f10:	e7cd      	b.n	8000eae <main+0x5a>
 8000f12:	bf00      	nop
 8000f14:	200002d0 	.word	0x200002d0
 8000f18:	200000e4 	.word	0x200000e4
 8000f1c:	2000012c 	.word	0x2000012c
 8000f20:	200001bc 	.word	0x200001bc
 8000f24:	20000258 	.word	0x20000258
 8000f28:	200002e0 	.word	0x200002e0
 8000f2c:	20000248 	.word	0x20000248
 8000f30:	38d1b717 	.word	0x38d1b717
 8000f34:	200002d4 	.word	0x200002d4
 8000f38:	200002d8 	.word	0x200002d8

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	; 0x50
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0320 	add.w	r3, r7, #32
 8000f46:	2230      	movs	r2, #48	; 0x30
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f004 f866 	bl	800501c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <SystemClock_Config+0xc8>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	4a26      	ldr	r2, [pc, #152]	; (8001004 <SystemClock_Config+0xc8>)
 8000f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f70:	4b24      	ldr	r3, [pc, #144]	; (8001004 <SystemClock_Config+0xc8>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <SystemClock_Config+0xcc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a20      	ldr	r2, [pc, #128]	; (8001008 <SystemClock_Config+0xcc>)
 8000f86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <SystemClock_Config+0xcc>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fac:	2308      	movs	r3, #8
 8000fae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000fb0:	2364      	movs	r3, #100	; 0x64
 8000fb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbc:	f107 0320 	add.w	r3, r7, #32
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 ff03 	bl	8002dcc <HAL_RCC_OscConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fcc:	f000 ff1c 	bl	8001e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2103      	movs	r1, #3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 f965 	bl	80032bc <HAL_RCC_ClockConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ff8:	f000 ff06 	bl	8001e08 <Error_Handler>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3750      	adds	r7, #80	; 0x50
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800
 8001008:	40007000 	.word	0x40007000

0800100c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <MX_ADC1_Init+0x9c>)
 8001022:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001026:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800102a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_ADC1_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_ADC1_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_ADC1_Init+0x98>)
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <MX_ADC1_Init+0xa0>)
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_ADC1_Init+0x98>)
 800105a:	2201      	movs	r2, #1
 800105c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001068:	2201      	movs	r2, #1
 800106a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_ADC1_Init+0x98>)
 800106e:	f001 f98b 	bl	8002388 <HAL_ADC_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001078:	f000 fec6 	bl	8001e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800107c:	230a      	movs	r3, #10
 800107e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_ADC1_Init+0x98>)
 800108e:	f001 f9bf 	bl	8002410 <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001098:	f000 feb6 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000009c 	.word	0x2000009c
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b096      	sub	sp, #88	; 0x58
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	615a      	str	r2, [r3, #20]
 80010e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2220      	movs	r2, #32
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 ff97 	bl	800501c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <MX_TIM1_Init+0x138>)
 80010f0:	4a3e      	ldr	r2, [pc, #248]	; (80011ec <MX_TIM1_Init+0x13c>)
 80010f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 80010f4:	4b3c      	ldr	r3, [pc, #240]	; (80011e8 <MX_TIM1_Init+0x138>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <MX_TIM1_Init+0x138>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24999;
 8001100:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001102:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001106:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <MX_TIM1_Init+0x138>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800110e:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800111a:	4833      	ldr	r0, [pc, #204]	; (80011e8 <MX_TIM1_Init+0x138>)
 800111c:	f002 faee 	bl	80036fc <HAL_TIM_Base_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001126:	f000 fe6f 	bl	8001e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001130:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001134:	4619      	mov	r1, r3
 8001136:	482c      	ldr	r0, [pc, #176]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001138:	f002 fff4 	bl	8004124 <HAL_TIM_ConfigClockSource>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001142:	f000 fe61 	bl	8001e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001146:	4828      	ldr	r0, [pc, #160]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001148:	f002 fbe4 	bl	8003914 <HAL_TIM_PWM_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001152:	f000 fe59 	bl	8001e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800115e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001162:	4619      	mov	r1, r3
 8001164:	4820      	ldr	r0, [pc, #128]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001166:	f003 fb99 	bl	800489c <HAL_TIMEx_MasterConfigSynchronization>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001170:	f000 fe4a 	bl	8001e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001174:	2360      	movs	r3, #96	; 0x60
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001180:	2300      	movs	r3, #0
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001194:	2200      	movs	r2, #0
 8001196:	4619      	mov	r1, r3
 8001198:	4813      	ldr	r0, [pc, #76]	; (80011e8 <MX_TIM1_Init+0x138>)
 800119a:	f002 ff01 	bl	8003fa0 <HAL_TIM_PWM_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80011a4:	f000 fe30 	bl	8001e08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_TIM1_Init+0x138>)
 80011cc:	f003 fbd4 	bl	8004978 <HAL_TIMEx_ConfigBreakDeadTime>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80011d6:	f000 fe17 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <MX_TIM1_Init+0x138>)
 80011dc:	f000 ff46 	bl	800206c <HAL_TIM_MspPostInit>

}
 80011e0:	bf00      	nop
 80011e2:	3758      	adds	r7, #88	; 0x58
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200000e4 	.word	0x200000e4
 80011ec:	40010000 	.word	0x40010000

080011f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	2224      	movs	r2, #36	; 0x24
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 ff0c 	bl	800501c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800120c:	4b21      	ldr	r3, [pc, #132]	; (8001294 <MX_TIM2_Init+0xa4>)
 800120e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001212:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MX_TIM2_Init+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <MX_TIM2_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_TIM2_Init+0xa4>)
 8001222:	f04f 32ff 	mov.w	r2, #4294967295
 8001226:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_TIM2_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_TIM2_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001234:	2303      	movs	r3, #3
 8001236:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800124c:	2301      	movs	r3, #1
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	4619      	mov	r1, r3
 800125e:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_TIM2_Init+0xa4>)
 8001260:	f002 fc62 	bl	8003b28 <HAL_TIM_Encoder_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800126a:	f000 fdcd 	bl	8001e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	4619      	mov	r1, r3
 800127a:	4806      	ldr	r0, [pc, #24]	; (8001294 <MX_TIM2_Init+0xa4>)
 800127c:	f003 fb0e 	bl	800489c <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001286:	f000 fdbf 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000012c 	.word	0x2000012c

08001298 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	2224      	movs	r2, #36	; 0x24
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 feb8 	bl	800501c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012b4:	4b20      	ldr	r3, [pc, #128]	; (8001338 <MX_TIM3_Init+0xa0>)
 80012b6:	4a21      	ldr	r2, [pc, #132]	; (800133c <MX_TIM3_Init+0xa4>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <MX_TIM3_Init+0xa0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_TIM3_Init+0xa0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <MX_TIM3_Init+0xa0>)
 80012c8:	f640 32ff 	movw	r2, #3071	; 0xbff
 80012cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MX_TIM3_Init+0xa0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <MX_TIM3_Init+0xa0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012da:	2303      	movs	r3, #3
 80012dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012e2:	2301      	movs	r3, #1
 80012e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012f2:	2301      	movs	r3, #1
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4619      	mov	r1, r3
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <MX_TIM3_Init+0xa0>)
 8001306:	f002 fc0f 	bl	8003b28 <HAL_TIM_Encoder_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001310:	f000 fd7a 	bl	8001e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_TIM3_Init+0xa0>)
 8001322:	f003 fabb 	bl	800489c <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800132c:	f000 fd6c 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	3730      	adds	r7, #48	; 0x30
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000174 	.word	0x20000174
 800133c:	40000400 	.word	0x40000400

08001340 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_TIM5_Init+0x94>)
 800135e:	4a1e      	ldr	r2, [pc, #120]	; (80013d8 <MX_TIM5_Init+0x98>)
 8001360:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_TIM5_Init+0x94>)
 8001364:	2253      	movs	r2, #83	; 0x53
 8001366:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_TIM5_Init+0x94>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_TIM5_Init+0x94>)
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_TIM5_Init+0x94>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_TIM5_Init+0x94>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001382:	4814      	ldr	r0, [pc, #80]	; (80013d4 <MX_TIM5_Init+0x94>)
 8001384:	f002 f9ba 	bl	80036fc <HAL_TIM_Base_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800138e:	f000 fd3b 	bl	8001e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001396:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4619      	mov	r1, r3
 800139e:	480d      	ldr	r0, [pc, #52]	; (80013d4 <MX_TIM5_Init+0x94>)
 80013a0:	f002 fec0 	bl	8004124 <HAL_TIM_ConfigClockSource>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80013aa:	f000 fd2d 	bl	8001e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013b6:	463b      	mov	r3, r7
 80013b8:	4619      	mov	r1, r3
 80013ba:	4806      	ldr	r0, [pc, #24]	; (80013d4 <MX_TIM5_Init+0x94>)
 80013bc:	f003 fa6e 	bl	800489c <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80013c6:	f000 fd1f 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001bc 	.word	0x200001bc
 80013d8:	40000c00 	.word	0x40000c00

080013dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <MX_USART2_UART_Init+0x50>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_USART2_UART_Init+0x4c>)
 8001414:	f003 fb16 	bl	8004a44 <HAL_UART_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800141e:	f000 fcf3 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000204 	.word	0x20000204
 800142c:	40004400 	.word	0x40004400

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b35      	ldr	r3, [pc, #212]	; (8001520 <MX_GPIO_Init+0xf0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a34      	ldr	r2, [pc, #208]	; (8001520 <MX_GPIO_Init+0xf0>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b32      	ldr	r3, [pc, #200]	; (8001520 <MX_GPIO_Init+0xf0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <MX_GPIO_Init+0xf0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a2d      	ldr	r2, [pc, #180]	; (8001520 <MX_GPIO_Init+0xf0>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <MX_GPIO_Init+0xf0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b27      	ldr	r3, [pc, #156]	; (8001520 <MX_GPIO_Init+0xf0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a26      	ldr	r2, [pc, #152]	; (8001520 <MX_GPIO_Init+0xf0>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <MX_GPIO_Init+0xf0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <MX_GPIO_Init+0xf0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <MX_GPIO_Init+0xf0>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_GPIO_Init+0xf0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80014bc:	4819      	ldr	r0, [pc, #100]	; (8001524 <MX_GPIO_Init+0xf4>)
 80014be:	f001 fc6b 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4813      	ldr	r0, [pc, #76]	; (8001528 <MX_GPIO_Init+0xf8>)
 80014da:	f001 fad9 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014de:	230c      	movs	r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <MX_GPIO_Init+0xf8>)
 80014f4:	f001 facc 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11;
 80014f8:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <MX_GPIO_Init+0xf4>)
 8001512:	f001 fabd 	bl	8002a90 <HAL_GPIO_Init>

}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	; 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020800 	.word	0x40020800

0800152c <VelocityControlPID>:
//}


	//PID windup
void VelocityControlPID()
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
	Velocity.error[0] = velocity_setpoint - QEIReadRaw_now;
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <VelocityControlPID+0xd0>)
 8001532:	ed93 7a00 	vldr	s14, [r3]
 8001536:	4b32      	ldr	r3, [pc, #200]	; (8001600 <VelocityControlPID+0xd4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001546:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <VelocityControlPID+0xd8>)
 8001548:	edc3 7a00 	vstr	s15, [r3]

	// last term of volt

	// first error
	first_error_velocity = (Kp_velocity + Ki_velocity + Kd_velocity) * Velocity.error[0];
 800154c:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <VelocityControlPID+0xdc>)
 800154e:	ed93 7a00 	vldr	s14, [r3]
 8001552:	4b2e      	ldr	r3, [pc, #184]	; (800160c <VelocityControlPID+0xe0>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800155c:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <VelocityControlPID+0xe4>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001566:	4b27      	ldr	r3, [pc, #156]	; (8001604 <VelocityControlPID+0xd8>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001570:	4b28      	ldr	r3, [pc, #160]	; (8001614 <VelocityControlPID+0xe8>)
 8001572:	edc3 7a00 	vstr	s15, [r3]

	// second error
	second_error_velocity = (Kp_velocity + (2 * Kd_velocity)) * Velocity.error[1];
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <VelocityControlPID+0xe4>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <VelocityControlPID+0xdc>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <VelocityControlPID+0xd8>)
 800158c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001594:	4b20      	ldr	r3, [pc, #128]	; (8001618 <VelocityControlPID+0xec>)
 8001596:	edc3 7a00 	vstr	s15, [r3]

	// third error
	third_error_velocity = (Kd_velocity) * Velocity.error[2];
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <VelocityControlPID+0xd8>)
 800159c:	ed93 7a02 	vldr	s14, [r3, #8]
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <VelocityControlPID+0xe4>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <VelocityControlPID+0xf0>)
 80015ac:	edc3 7a00 	vstr	s15, [r3]

	// voltage
	Velocity.voltage[0] += first_error_velocity - second_error_velocity + third_error_velocity;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <VelocityControlPID+0xd8>)
 80015b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <VelocityControlPID+0xe8>)
 80015b8:	edd3 6a00 	vldr	s13, [r3]
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <VelocityControlPID+0xec>)
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <VelocityControlPID+0xf0>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <VelocityControlPID+0xd8>)
 80015d6:	edc3 7a03 	vstr	s15, [r3, #12]
	voltage = Velocity.voltage[0];
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <VelocityControlPID+0xd8>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <VelocityControlPID+0xf4>)
 80015e0:	6013      	str	r3, [r2, #0]

	// set present to past
	Velocity.error[2] = Velocity.error[1];
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <VelocityControlPID+0xd8>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a07      	ldr	r2, [pc, #28]	; (8001604 <VelocityControlPID+0xd8>)
 80015e8:	6093      	str	r3, [r2, #8]
	Velocity.error[1] = Velocity.error[0];
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <VelocityControlPID+0xd8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <VelocityControlPID+0xd8>)
 80015f0:	6053      	str	r3, [r2, #4]

}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	20000288 	.word	0x20000288
 8001600:	200002d4 	.word	0x200002d4
 8001604:	20000274 	.word	0x20000274
 8001608:	20000000 	.word	0x20000000
 800160c:	20000004 	.word	0x20000004
 8001610:	20000270 	.word	0x20000270
 8001614:	20000264 	.word	0x20000264
 8001618:	20000268 	.word	0x20000268
 800161c:	2000026c 	.word	0x2000026c
 8001620:	200002d8 	.word	0x200002d8

08001624 <Distance>:

}


void Distance()
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	if (setpoint_past != setpoint_now)
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <Distance+0x98>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <Distance+0x9c>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	eeb4 7a67 	vcmp.f32	s14, s15
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	d034      	beq.n	80016a8 <Distance+0x84>
	{
		distance = setpoint_now - initial_position;
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <Distance+0x9c>)
 8001640:	ed93 7a00 	vldr	s14, [r3]
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <Distance+0xa0>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164e:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <Distance+0xa4>)
 8001650:	edc3 7a00 	vstr	s15, [r3]
		//initial_position = last_initial_position;
		setpoint_past = setpoint_now;
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <Distance+0x9c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a18      	ldr	r2, [pc, #96]	; (80016bc <Distance+0x98>)
 800165a:	6013      	str	r3, [r2, #0]
		if (distance >= 0)
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <Distance+0xa4>)
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166a:	db07      	blt.n	800167c <Distance+0x58>
		{
			sign = 1;
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <Distance+0xa8>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]
			abs_distance = distance;
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <Distance+0xa4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <Distance+0xac>)
 8001678:	6013      	str	r3, [r2, #0]
	}
	else
	{
		setpoint_past = setpoint_now;
	}
}
 800167a:	e019      	b.n	80016b0 <Distance+0x8c>
		else if (distance < 0)
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <Distance+0xa4>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168a:	d400      	bmi.n	800168e <Distance+0x6a>
}
 800168c:	e010      	b.n	80016b0 <Distance+0x8c>
			sign = -1;
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <Distance+0xa8>)
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	601a      	str	r2, [r3, #0]
			abs_distance = distance * (-1);
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <Distance+0xa4>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	eef1 7a67 	vneg.f32	s15, s15
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <Distance+0xac>)
 80016a2:	edc3 7a00 	vstr	s15, [r3]
}
 80016a6:	e003      	b.n	80016b0 <Distance+0x8c>
		setpoint_past = setpoint_now;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <Distance+0x9c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <Distance+0x98>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200002c8 	.word	0x200002c8
 80016c0:	200002cc 	.word	0x200002cc
 80016c4:	2000029c 	.word	0x2000029c
 80016c8:	20000294 	.word	0x20000294
 80016cc:	200002c0 	.word	0x200002c0
 80016d0:	20000298 	.word	0x20000298
 80016d4:	00000000 	.word	0x00000000

080016d8 <Trajectory>:


void Trajectory()
{
 80016d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016dc:	af00      	add	r7, sp, #0
	// Define pattern of trapezoidal_trajectory
	if (abs_distance > ((velocity_max * velocity_max)/acceleration_max))
 80016de:	4bae      	ldr	r3, [pc, #696]	; (8001998 <Trajectory+0x2c0>)
 80016e0:	ed93 7a00 	vldr	s14, [r3]
 80016e4:	4bac      	ldr	r3, [pc, #688]	; (8001998 <Trajectory+0x2c0>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	ee67 6a27 	vmul.f32	s13, s14, s15
 80016ee:	4bab      	ldr	r3, [pc, #684]	; (800199c <Trajectory+0x2c4>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016f8:	4ba9      	ldr	r3, [pc, #676]	; (80019a0 <Trajectory+0x2c8>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	d56f      	bpl.n	80017e8 <Trajectory+0x110>
	{
	    time_acc = ((velocity_max - 0)/acceleration_max);
 8001708:	4ba3      	ldr	r3, [pc, #652]	; (8001998 <Trajectory+0x2c0>)
 800170a:	edd3 6a00 	vldr	s13, [r3]
 800170e:	4ba3      	ldr	r3, [pc, #652]	; (800199c <Trajectory+0x2c4>)
 8001710:	ed93 7a00 	vldr	s14, [r3]
 8001714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001718:	4ba2      	ldr	r3, [pc, #648]	; (80019a4 <Trajectory+0x2cc>)
 800171a:	edc3 7a00 	vstr	s15, [r3]
	    time_const = ((1.0 / velocity_max)* ((abs_distance)- ((velocity_max * velocity_max) / acceleration_max)));
 800171e:	4b9e      	ldr	r3, [pc, #632]	; (8001998 <Trajectory+0x2c0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe febc 	bl	80004a0 <__aeabi_f2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	f04f 0000 	mov.w	r0, #0
 8001730:	499d      	ldr	r1, [pc, #628]	; (80019a8 <Trajectory+0x2d0>)
 8001732:	f7ff f837 	bl	80007a4 <__aeabi_ddiv>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4614      	mov	r4, r2
 800173c:	461d      	mov	r5, r3
 800173e:	4b98      	ldr	r3, [pc, #608]	; (80019a0 <Trajectory+0x2c8>)
 8001740:	ed93 7a00 	vldr	s14, [r3]
 8001744:	4b94      	ldr	r3, [pc, #592]	; (8001998 <Trajectory+0x2c0>)
 8001746:	edd3 6a00 	vldr	s13, [r3]
 800174a:	4b93      	ldr	r3, [pc, #588]	; (8001998 <Trajectory+0x2c0>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001754:	4b91      	ldr	r3, [pc, #580]	; (800199c <Trajectory+0x2c4>)
 8001756:	edd3 6a00 	vldr	s13, [r3]
 800175a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800175e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001762:	ee17 0a90 	vmov	r0, s15
 8001766:	f7fe fe9b 	bl	80004a0 <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4620      	mov	r0, r4
 8001770:	4629      	mov	r1, r5
 8001772:	f7fe feed 	bl	8000550 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff f997 	bl	8000ab0 <__aeabi_d2f>
 8001782:	4603      	mov	r3, r0
 8001784:	4a89      	ldr	r2, [pc, #548]	; (80019ac <Trajectory+0x2d4>)
 8001786:	6013      	str	r3, [r2, #0]
		time_total = (2 * time_acc) + (abs_distance -(velocity_max * velocity_max)/acceleration_max) / velocity_max;
 8001788:	4b86      	ldr	r3, [pc, #536]	; (80019a4 <Trajectory+0x2cc>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001792:	4b83      	ldr	r3, [pc, #524]	; (80019a0 <Trajectory+0x2c8>)
 8001794:	edd3 6a00 	vldr	s13, [r3]
 8001798:	4b7f      	ldr	r3, [pc, #508]	; (8001998 <Trajectory+0x2c0>)
 800179a:	ed93 6a00 	vldr	s12, [r3]
 800179e:	4b7e      	ldr	r3, [pc, #504]	; (8001998 <Trajectory+0x2c0>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ee66 5a27 	vmul.f32	s11, s12, s15
 80017a8:	4b7c      	ldr	r3, [pc, #496]	; (800199c <Trajectory+0x2c4>)
 80017aa:	ed93 6a00 	vldr	s12, [r3]
 80017ae:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80017b2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80017b6:	4b78      	ldr	r3, [pc, #480]	; (8001998 <Trajectory+0x2c0>)
 80017b8:	edd3 6a00 	vldr	s13, [r3]
 80017bc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	4b7a      	ldr	r3, [pc, #488]	; (80019b0 <Trajectory+0x2d8>)
 80017c6:	edc3 7a00 	vstr	s15, [r3]
		max_velocity = velocity_max * sign;
 80017ca:	4b7a      	ldr	r3, [pc, #488]	; (80019b4 <Trajectory+0x2dc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d6:	4b70      	ldr	r3, [pc, #448]	; (8001998 <Trajectory+0x2c0>)
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e0:	4b75      	ldr	r3, [pc, #468]	; (80019b8 <Trajectory+0x2e0>)
 80017e2:	edc3 7a00 	vstr	s15, [r3]
 80017e6:	e03d      	b.n	8001864 <Trajectory+0x18c>
	}

	else
	{
		time_acc = sqrt(abs_distance/acceleration_max);
 80017e8:	4b6d      	ldr	r3, [pc, #436]	; (80019a0 <Trajectory+0x2c8>)
 80017ea:	ed93 7a00 	vldr	s14, [r3]
 80017ee:	4b6b      	ldr	r3, [pc, #428]	; (800199c <Trajectory+0x2c4>)
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017f8:	ee16 0a90 	vmov	r0, s13
 80017fc:	f7fe fe50 	bl	80004a0 <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	ec43 2b10 	vmov	d0, r2, r3
 8001808:	f003 fc10 	bl	800502c <sqrt>
 800180c:	ec53 2b10 	vmov	r2, r3, d0
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f94c 	bl	8000ab0 <__aeabi_d2f>
 8001818:	4603      	mov	r3, r0
 800181a:	4a62      	ldr	r2, [pc, #392]	; (80019a4 <Trajectory+0x2cc>)
 800181c:	6013      	str	r3, [r2, #0]
		time_total = time_acc * 2;
 800181e:	4b61      	ldr	r3, [pc, #388]	; (80019a4 <Trajectory+0x2cc>)
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001828:	4b61      	ldr	r3, [pc, #388]	; (80019b0 <Trajectory+0x2d8>)
 800182a:	edc3 7a00 	vstr	s15, [r3]
		time_const = 0;
 800182e:	4b5f      	ldr	r3, [pc, #380]	; (80019ac <Trajectory+0x2d4>)
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
		position_const = 0;
 8001836:	4b61      	ldr	r3, [pc, #388]	; (80019bc <Trajectory+0x2e4>)
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
		max_velocity = acceleration_max * time_acc *sign;
 800183e:	4b57      	ldr	r3, [pc, #348]	; (800199c <Trajectory+0x2c4>)
 8001840:	ed93 7a00 	vldr	s14, [r3]
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <Trajectory+0x2cc>)
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800184e:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <Trajectory+0x2dc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	ee07 3a90 	vmov	s15, r3
 8001856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185e:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <Trajectory+0x2e0>)
 8001860:	edc3 7a00 	vstr	s15, [r3]
	}

	//acceleration segment
	if ((0 <= time_trajectory) && (time_trajectory < time_acc))
 8001864:	4b56      	ldr	r3, [pc, #344]	; (80019c0 <Trajectory+0x2e8>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001872:	f2c0 80b3 	blt.w	80019dc <Trajectory+0x304>
 8001876:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <Trajectory+0x2e8>)
 8001878:	ed93 7a00 	vldr	s14, [r3]
 800187c:	4b49      	ldr	r3, [pc, #292]	; (80019a4 <Trajectory+0x2cc>)
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188a:	f140 80a7 	bpl.w	80019dc <Trajectory+0x304>
	{
		time_trajectory += 0.0001;
 800188e:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <Trajectory+0x2e8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe04 	bl	80004a0 <__aeabi_f2d>
 8001898:	a33d      	add	r3, pc, #244	; (adr r3, 8001990 <Trajectory+0x2b8>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe fca1 	bl	80001e4 <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f901 	bl	8000ab0 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a43      	ldr	r2, [pc, #268]	; (80019c0 <Trajectory+0x2e8>)
 80018b2:	6013      	str	r3, [r2, #0]
	    position = initial_position + (0.5 * acceleration_max * (time_trajectory * time_trajectory)*sign);
 80018b4:	4b43      	ldr	r3, [pc, #268]	; (80019c4 <Trajectory+0x2ec>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fdf1 	bl	80004a0 <__aeabi_f2d>
 80018be:	4604      	mov	r4, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	4b36      	ldr	r3, [pc, #216]	; (800199c <Trajectory+0x2c4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fdea 	bl	80004a0 <__aeabi_f2d>
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <Trajectory+0x2f0>)
 80018d2:	f7fe fe3d 	bl	8000550 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4690      	mov	r8, r2
 80018dc:	4699      	mov	r9, r3
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <Trajectory+0x2e8>)
 80018e0:	ed93 7a00 	vldr	s14, [r3]
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <Trajectory+0x2e8>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ee:	ee17 0a90 	vmov	r0, s15
 80018f2:	f7fe fdd5 	bl	80004a0 <__aeabi_f2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4640      	mov	r0, r8
 80018fc:	4649      	mov	r1, r9
 80018fe:	f7fe fe27 	bl	8000550 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4690      	mov	r8, r2
 8001908:	4699      	mov	r9, r3
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <Trajectory+0x2dc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fdb4 	bl	800047c <__aeabi_i2d>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4640      	mov	r0, r8
 800191a:	4649      	mov	r1, r9
 800191c:	f7fe fe18 	bl	8000550 <__aeabi_dmul>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4620      	mov	r0, r4
 8001926:	4629      	mov	r1, r5
 8001928:	f7fe fc5c 	bl	80001e4 <__adddf3>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f8bc 	bl	8000ab0 <__aeabi_d2f>
 8001938:	4603      	mov	r3, r0
 800193a:	4a24      	ldr	r2, [pc, #144]	; (80019cc <Trajectory+0x2f4>)
 800193c:	6013      	str	r3, [r2, #0]
	    velocity = (acceleration_max * time_trajectory *sign);
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <Trajectory+0x2c4>)
 8001940:	ed93 7a00 	vldr	s14, [r3]
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <Trajectory+0x2e8>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <Trajectory+0x2dc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <Trajectory+0x2f8>)
 8001960:	edc3 7a00 	vstr	s15, [r3]
	    position_acc = position;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <Trajectory+0x2f4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <Trajectory+0x2fc>)
 800196a:	6013      	str	r3, [r2, #0]
	    acceleration = acceleration_max * sign;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <Trajectory+0x2dc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <Trajectory+0x2c4>)
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <Trajectory+0x300>)
 8001984:	edc3 7a00 	vstr	s15, [r3]
 8001988:	e138      	b.n	8001bfc <Trajectory+0x524>
 800198a:	bf00      	nop
 800198c:	f3af 8000 	nop.w
 8001990:	eb1c432d 	.word	0xeb1c432d
 8001994:	3f1a36e2 	.word	0x3f1a36e2
 8001998:	20000008 	.word	0x20000008
 800199c:	2000000c 	.word	0x2000000c
 80019a0:	20000298 	.word	0x20000298
 80019a4:	200002b0 	.word	0x200002b0
 80019a8:	3ff00000 	.word	0x3ff00000
 80019ac:	200002b4 	.word	0x200002b4
 80019b0:	200002b8 	.word	0x200002b8
 80019b4:	200002c0 	.word	0x200002c0
 80019b8:	200002a4 	.word	0x200002a4
 80019bc:	20000290 	.word	0x20000290
 80019c0:	200002bc 	.word	0x200002bc
 80019c4:	2000029c 	.word	0x2000029c
 80019c8:	3fe00000 	.word	0x3fe00000
 80019cc:	200002a0 	.word	0x200002a0
 80019d0:	200002a8 	.word	0x200002a8
 80019d4:	2000028c 	.word	0x2000028c
 80019d8:	200002ac 	.word	0x200002ac
	}

	//constant segment
	else if ((time_trajectory) < (time_total - time_acc))
 80019dc:	4bac      	ldr	r3, [pc, #688]	; (8001c90 <Trajectory+0x5b8>)
 80019de:	ed93 7a00 	vldr	s14, [r3]
 80019e2:	4bac      	ldr	r3, [pc, #688]	; (8001c94 <Trajectory+0x5bc>)
 80019e4:	edd3 7a00 	vldr	s15, [r3]
 80019e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019ec:	4baa      	ldr	r3, [pc, #680]	; (8001c98 <Trajectory+0x5c0>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fa:	dd3b      	ble.n	8001a74 <Trajectory+0x39c>
	{
		time_trajectory += 0.0001;
 80019fc:	4ba6      	ldr	r3, [pc, #664]	; (8001c98 <Trajectory+0x5c0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd4d 	bl	80004a0 <__aeabi_f2d>
 8001a06:	a39e      	add	r3, pc, #632	; (adr r3, 8001c80 <Trajectory+0x5a8>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	f7fe fbea 	bl	80001e4 <__adddf3>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f84a 	bl	8000ab0 <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a9e      	ldr	r2, [pc, #632]	; (8001c98 <Trajectory+0x5c0>)
 8001a20:	6013      	str	r3, [r2, #0]
		position = position_acc + (max_velocity * (time_trajectory - time_acc));
 8001a22:	4b9d      	ldr	r3, [pc, #628]	; (8001c98 <Trajectory+0x5c0>)
 8001a24:	ed93 7a00 	vldr	s14, [r3]
 8001a28:	4b9a      	ldr	r3, [pc, #616]	; (8001c94 <Trajectory+0x5bc>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a32:	4b9a      	ldr	r3, [pc, #616]	; (8001c9c <Trajectory+0x5c4>)
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3c:	4b98      	ldr	r3, [pc, #608]	; (8001ca0 <Trajectory+0x5c8>)
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a46:	4b97      	ldr	r3, [pc, #604]	; (8001ca4 <Trajectory+0x5cc>)
 8001a48:	edc3 7a00 	vstr	s15, [r3]
	    position_const = position - position_acc;
 8001a4c:	4b95      	ldr	r3, [pc, #596]	; (8001ca4 <Trajectory+0x5cc>)
 8001a4e:	ed93 7a00 	vldr	s14, [r3]
 8001a52:	4b93      	ldr	r3, [pc, #588]	; (8001ca0 <Trajectory+0x5c8>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5c:	4b92      	ldr	r3, [pc, #584]	; (8001ca8 <Trajectory+0x5d0>)
 8001a5e:	edc3 7a00 	vstr	s15, [r3]
		velocity = (max_velocity);
 8001a62:	4b8e      	ldr	r3, [pc, #568]	; (8001c9c <Trajectory+0x5c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a91      	ldr	r2, [pc, #580]	; (8001cac <Trajectory+0x5d4>)
 8001a68:	6013      	str	r3, [r2, #0]
	    acceleration = 0;
 8001a6a:	4b91      	ldr	r3, [pc, #580]	; (8001cb0 <Trajectory+0x5d8>)
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e0c3      	b.n	8001bfc <Trajectory+0x524>
	}

	//deceleration segment
	else if (((time_total - time_acc) <= time_trajectory) && (time_trajectory < time_total))
 8001a74:	4b86      	ldr	r3, [pc, #536]	; (8001c90 <Trajectory+0x5b8>)
 8001a76:	ed93 7a00 	vldr	s14, [r3]
 8001a7a:	4b86      	ldr	r3, [pc, #536]	; (8001c94 <Trajectory+0x5bc>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a84:	4b84      	ldr	r3, [pc, #528]	; (8001c98 <Trajectory+0x5c0>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	f200 80b3 	bhi.w	8001bfc <Trajectory+0x524>
 8001a96:	4b80      	ldr	r3, [pc, #512]	; (8001c98 <Trajectory+0x5c0>)
 8001a98:	ed93 7a00 	vldr	s14, [r3]
 8001a9c:	4b7c      	ldr	r3, [pc, #496]	; (8001c90 <Trajectory+0x5b8>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	f140 80a7 	bpl.w	8001bfc <Trajectory+0x524>
	{
		time_trajectory += 0.0001;
 8001aae:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <Trajectory+0x5c0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fcf4 	bl	80004a0 <__aeabi_f2d>
 8001ab8:	a371      	add	r3, pc, #452	; (adr r3, 8001c80 <Trajectory+0x5a8>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	f7fe fb91 	bl	80001e4 <__adddf3>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7fe fff1 	bl	8000ab0 <__aeabi_d2f>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4a71      	ldr	r2, [pc, #452]	; (8001c98 <Trajectory+0x5c0>)
 8001ad2:	6013      	str	r3, [r2, #0]
		time_err = (time_trajectory - (time_acc + time_const));
 8001ad4:	4b70      	ldr	r3, [pc, #448]	; (8001c98 <Trajectory+0x5c0>)
 8001ad6:	ed93 7a00 	vldr	s14, [r3]
 8001ada:	4b6e      	ldr	r3, [pc, #440]	; (8001c94 <Trajectory+0x5bc>)
 8001adc:	edd3 6a00 	vldr	s13, [r3]
 8001ae0:	4b74      	ldr	r3, [pc, #464]	; (8001cb4 <Trajectory+0x5dc>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aee:	4b72      	ldr	r3, [pc, #456]	; (8001cb8 <Trajectory+0x5e0>)
 8001af0:	edc3 7a00 	vstr	s15, [r3]
		position = position_acc + position_const + (max_velocity * time_err) + (0.5 *(-1)* acceleration_max * (time_err * time_err) * sign);
 8001af4:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <Trajectory+0x5c8>)
 8001af6:	ed93 7a00 	vldr	s14, [r3]
 8001afa:	4b6b      	ldr	r3, [pc, #428]	; (8001ca8 <Trajectory+0x5d0>)
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b04:	4b65      	ldr	r3, [pc, #404]	; (8001c9c <Trajectory+0x5c4>)
 8001b06:	edd3 6a00 	vldr	s13, [r3]
 8001b0a:	4b6b      	ldr	r3, [pc, #428]	; (8001cb8 <Trajectory+0x5e0>)
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b18:	ee17 0a90 	vmov	r0, s15
 8001b1c:	f7fe fcc0 	bl	80004a0 <__aeabi_f2d>
 8001b20:	4604      	mov	r4, r0
 8001b22:	460d      	mov	r5, r1
 8001b24:	4b65      	ldr	r3, [pc, #404]	; (8001cbc <Trajectory+0x5e4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fcb9 	bl	80004a0 <__aeabi_f2d>
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <Trajectory+0x5e8>)
 8001b34:	f7fe fd0c 	bl	8000550 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4690      	mov	r8, r2
 8001b3e:	4699      	mov	r9, r3
 8001b40:	4b5d      	ldr	r3, [pc, #372]	; (8001cb8 <Trajectory+0x5e0>)
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	4b5c      	ldr	r3, [pc, #368]	; (8001cb8 <Trajectory+0x5e0>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b50:	ee17 0a90 	vmov	r0, s15
 8001b54:	f7fe fca4 	bl	80004a0 <__aeabi_f2d>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	4649      	mov	r1, r9
 8001b60:	f7fe fcf6 	bl	8000550 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4690      	mov	r8, r2
 8001b6a:	4699      	mov	r9, r3
 8001b6c:	4b55      	ldr	r3, [pc, #340]	; (8001cc4 <Trajectory+0x5ec>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fc83 	bl	800047c <__aeabi_i2d>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	f7fe fce7 	bl	8000550 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4620      	mov	r0, r4
 8001b88:	4629      	mov	r1, r5
 8001b8a:	f7fe fb2b 	bl	80001e4 <__adddf3>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7fe ff8b 	bl	8000ab0 <__aeabi_d2f>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a41      	ldr	r2, [pc, #260]	; (8001ca4 <Trajectory+0x5cc>)
 8001b9e:	6013      	str	r3, [r2, #0]
	    velocity = (- acceleration_max * sign * time_err) + (max_velocity) ; ;
 8001ba0:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <Trajectory+0x5e4>)
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	eeb1 7a67 	vneg.f32	s14, s15
 8001baa:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <Trajectory+0x5ec>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	ee07 3a90 	vmov	s15, r3
 8001bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bba:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <Trajectory+0x5e0>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc4:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <Trajectory+0x5c4>)
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <Trajectory+0x5d4>)
 8001bd0:	edc3 7a00 	vstr	s15, [r3]
	    acceleration = - acceleration_max * sign;
 8001bd4:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <Trajectory+0x5e4>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	eeb1 7a67 	vneg.f32	s14, s15
 8001bde:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <Trajectory+0x5ec>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	ee07 3a90 	vmov	s15, r3
 8001be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bee:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <Trajectory+0x5d8>)
 8001bf0:	edc3 7a00 	vstr	s15, [r3]
	    initial_position = position;
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <Trajectory+0x5cc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a33      	ldr	r2, [pc, #204]	; (8001cc8 <Trajectory+0x5f0>)
 8001bfa:	6013      	str	r3, [r2, #0]
	}

	if ((setpoint_now - 0.09 < position) && (position < setpoint_now + 0.09))
 8001bfc:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <Trajectory+0x5f4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc4d 	bl	80004a0 <__aeabi_f2d>
 8001c06:	a320      	add	r3, pc, #128	; (adr r3, 8001c88 <Trajectory+0x5b0>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fae8 	bl	80001e0 <__aeabi_dsub>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <Trajectory+0x5cc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fc3f 	bl	80004a0 <__aeabi_f2d>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4620      	mov	r0, r4
 8001c28:	4629      	mov	r1, r5
 8001c2a:	f7fe ff03 	bl	8000a34 <__aeabi_dcmplt>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01d      	beq.n	8001c70 <Trajectory+0x598>
 8001c34:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <Trajectory+0x5cc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc31 	bl	80004a0 <__aeabi_f2d>
 8001c3e:	4604      	mov	r4, r0
 8001c40:	460d      	mov	r5, r1
 8001c42:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <Trajectory+0x5f4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc2a 	bl	80004a0 <__aeabi_f2d>
 8001c4c:	a30e      	add	r3, pc, #56	; (adr r3, 8001c88 <Trajectory+0x5b0>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fac7 	bl	80001e4 <__adddf3>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	f7fe fee9 	bl	8000a34 <__aeabi_dcmplt>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <Trajectory+0x598>
	{
		time_trajectory = 0;
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <Trajectory+0x5c0>)
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
	}

	velocity_setpoint = position;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <Trajectory+0x5cc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a16      	ldr	r2, [pc, #88]	; (8001cd0 <Trajectory+0x5f8>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c7e:	bf00      	nop
 8001c80:	eb1c432d 	.word	0xeb1c432d
 8001c84:	3f1a36e2 	.word	0x3f1a36e2
 8001c88:	70a3d70a 	.word	0x70a3d70a
 8001c8c:	3fb70a3d 	.word	0x3fb70a3d
 8001c90:	200002b8 	.word	0x200002b8
 8001c94:	200002b0 	.word	0x200002b0
 8001c98:	200002bc 	.word	0x200002bc
 8001c9c:	200002a4 	.word	0x200002a4
 8001ca0:	2000028c 	.word	0x2000028c
 8001ca4:	200002a0 	.word	0x200002a0
 8001ca8:	20000290 	.word	0x20000290
 8001cac:	200002a8 	.word	0x200002a8
 8001cb0:	200002ac 	.word	0x200002ac
 8001cb4:	200002b4 	.word	0x200002b4
 8001cb8:	200002c4 	.word	0x200002c4
 8001cbc:	2000000c 	.word	0x2000000c
 8001cc0:	bfe00000 	.word	0xbfe00000
 8001cc4:	200002c0 	.word	0x200002c0
 8001cc8:	2000029c 	.word	0x2000029c
 8001ccc:	200002cc 	.word	0x200002cc
 8001cd0:	20000288 	.word	0x20000288

08001cd4 <motor>:



void motor(float voltage) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage > 0) {
 8001cde:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ce2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	dd11      	ble.n	8001d10 <motor+0x3c>
		// forward
		if (voltage > 25000) {
 8001cec:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001d7c <motor+0xa8>
 8001cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfc:	dd01      	ble.n	8001d02 <motor+0x2e>
			voltage = 25000;
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <motor+0xac>)
 8001d00:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d08:	481e      	ldr	r0, [pc, #120]	; (8001d84 <motor+0xb0>)
 8001d0a:	f001 f845 	bl	8002d98 <HAL_GPIO_WritePin>
 8001d0e:	e027      	b.n	8001d60 <motor+0x8c>
	} else if (voltage < 0) {
 8001d10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	d520      	bpl.n	8001d60 <motor+0x8c>
		// backward
		voltage *= -1.0;
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe fbbe 	bl	80004a0 <__aeabi_f2d>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe fec0 	bl	8000ab0 <__aeabi_d2f>
 8001d30:	4603      	mov	r3, r0
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eef1 7a67 	vneg.f32	s15, s15
 8001d3a:	edc7 7a01 	vstr	s15, [r7, #4]
		if (voltage > 25000) {
 8001d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d42:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001d7c <motor+0xa8>
 8001d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	dd01      	ble.n	8001d54 <motor+0x80>
			voltage = 25000;
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <motor+0xac>)
 8001d52:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 8001d54:	2201      	movs	r2, #1
 8001d56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d5a:	480a      	ldr	r0, [pc, #40]	; (8001d84 <motor+0xb0>)
 8001d5c:	f001 f81c 	bl	8002d98 <HAL_GPIO_WritePin>
//	else {
//		// stop
//		voltage = 0;
//	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, voltage);
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <motor+0xb4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d6c:	ee17 2a90 	vmov	r2, s15
 8001d70:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	46c35000 	.word	0x46c35000
 8001d80:	46c35000 	.word	0x46c35000
 8001d84:	40020000 	.word	0x40020000
 8001d88:	200000e4 	.word	0x200000e4

08001d8c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d8c:	b4b0      	push	{r4, r5, r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d10f      	bne.n	8001dbc <HAL_TIM_PeriodElapsedCallback+0x30>
		if (time_flag) _micros += UINT32_MAX;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x2a>
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001daa:	1e54      	subs	r4, r2, #1
 8001dac:	f143 0500 	adc.w	r5, r3, #0
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001db2:	e9c3 4500 	strd	r4, r5, [r3]
		time_flag = 1;
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
	}
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bcb0      	pop	{r4, r5, r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	200001bc 	.word	0x200001bc
 8001dcc:	20000260 	.word	0x20000260
 8001dd0:	20000250 	.word	0x20000250

08001dd4 <micros>:

uint64_t micros() {
 8001dd4:	b4b0      	push	{r4, r5, r7}
 8001dd6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <micros+0x2c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	2200      	movs	r2, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	4611      	mov	r1, r2
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <micros+0x30>)
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	1884      	adds	r4, r0, r2
 8001dec:	eb41 0503 	adc.w	r5, r1, r3
 8001df0:	4622      	mov	r2, r4
 8001df2:	462b      	mov	r3, r5
}
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bcb0      	pop	{r4, r5, r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	200001bc 	.word	0x200001bc
 8001e04:	20000250 	.word	0x20000250

08001e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e0c:	b672      	cpsid	i
}
 8001e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e10:	e7fe      	b.n	8001e10 <Error_Handler+0x8>
	...

08001e14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e52:	2007      	movs	r0, #7
 8001e54:	f000 fdda 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800

08001e64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_ADC_MspInit+0x7c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d127      	bne.n	8001ed6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_ADC_MspInit+0x80>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <HAL_ADC_MspInit+0x80>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_ADC_MspInit+0x80>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <HAL_ADC_MspInit+0x80>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <HAL_ADC_MspInit+0x80>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_ADC_MspInit+0x80>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_ADC_MspInit+0x84>)
 8001ed2:	f000 fddd 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40012000 	.word	0x40012000
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020800 	.word	0x40020800

08001eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <HAL_TIM_Base_MspInit+0x70>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d10e      	bne.n	8001f1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_TIM_Base_MspInit+0x74>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a16      	ldr	r2, [pc, #88]	; (8001f60 <HAL_TIM_Base_MspInit+0x74>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_TIM_Base_MspInit+0x74>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f1a:	e01a      	b.n	8001f52 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <HAL_TIM_Base_MspInit+0x78>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d115      	bne.n	8001f52 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_TIM_Base_MspInit+0x74>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <HAL_TIM_Base_MspInit+0x74>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_TIM_Base_MspInit+0x74>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	2032      	movs	r0, #50	; 0x32
 8001f48:	f000 fd6b 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f4c:	2032      	movs	r0, #50	; 0x32
 8001f4e:	f000 fd84 	bl	8002a5a <HAL_NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40010000 	.word	0x40010000
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40000c00 	.word	0x40000c00

08001f68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08c      	sub	sp, #48	; 0x30
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f88:	d134      	bne.n	8001ff4 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a33      	ldr	r2, [pc, #204]	; (8002060 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b31      	ldr	r3, [pc, #196]	; (8002060 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a2c      	ldr	r2, [pc, #176]	; (8002060 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4821      	ldr	r0, [pc, #132]	; (8002064 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001fde:	f000 fd57 	bl	8002a90 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	201c      	movs	r0, #28
 8001fe8:	f000 fd1b 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fec:	201c      	movs	r0, #28
 8001fee:	f000 fd34 	bl	8002a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ff2:	e030      	b.n	8002056 <HAL_TIM_Encoder_MspInit+0xee>
  else if(htim_encoder->Instance==TIM3)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <HAL_TIM_Encoder_MspInit+0x100>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d12b      	bne.n	8002056 <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a16      	ldr	r2, [pc, #88]	; (8002060 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_TIM_Encoder_MspInit+0xf8>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002036:	23c0      	movs	r3, #192	; 0xc0
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002046:	2302      	movs	r3, #2
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 031c 	add.w	r3, r7, #28
 800204e:	4619      	mov	r1, r3
 8002050:	4804      	ldr	r0, [pc, #16]	; (8002064 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002052:	f000 fd1d 	bl	8002a90 <HAL_GPIO_Init>
}
 8002056:	bf00      	nop
 8002058:	3730      	adds	r7, #48	; 0x30
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40020000 	.word	0x40020000
 8002068:	40000400 	.word	0x40000400

0800206c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <HAL_TIM_MspPostInit+0x68>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d11e      	bne.n	80020cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_TIM_MspPostInit+0x6c>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_TIM_MspPostInit+0x6c>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_TIM_MspPostInit+0x6c>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020bc:	2301      	movs	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	4619      	mov	r1, r3
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <HAL_TIM_MspPostInit+0x70>)
 80020c8:	f000 fce2 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020cc:	bf00      	nop
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020000 	.word	0x40020000

080020e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a19      	ldr	r2, [pc, #100]	; (8002164 <HAL_UART_MspInit+0x84>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d12b      	bne.n	800215a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_UART_MspInit+0x88>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a17      	ldr	r2, [pc, #92]	; (8002168 <HAL_UART_MspInit+0x88>)
 800210c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_UART_MspInit+0x88>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_UART_MspInit+0x88>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a10      	ldr	r2, [pc, #64]	; (8002168 <HAL_UART_MspInit+0x88>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_UART_MspInit+0x88>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800213a:	230c      	movs	r3, #12
 800213c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800214a:	2307      	movs	r3, #7
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4619      	mov	r1, r3
 8002154:	4805      	ldr	r0, [pc, #20]	; (800216c <HAL_UART_MspInit+0x8c>)
 8002156:	f000 fc9b 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800215a:	bf00      	nop
 800215c:	3728      	adds	r7, #40	; 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40004400 	.word	0x40004400
 8002168:	40023800 	.word	0x40023800
 800216c:	40020000 	.word	0x40020000

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <NMI_Handler+0x4>

08002176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler+0x4>

08002182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <UsageFault_Handler+0x4>

0800218e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021bc:	f000 f8c4 	bl	8002348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <TIM2_IRQHandler+0x10>)
 80021ca:	f001 fde1 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000012c 	.word	0x2000012c

080021d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <TIM5_IRQHandler+0x10>)
 80021de:	f001 fdd7 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200001bc 	.word	0x200001bc

080021ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <SystemInit+0x20>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	4a05      	ldr	r2, [pc, #20]	; (800220c <SystemInit+0x20>)
 80021f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <ComputeLowpassConstant>:
		HAL_GPIO_TogglePin(GPIOx, GPIO_PIN_x);
		BlinkTime += Rate;
	}
}

float ComputeLowpassConstant(uint16_t CutoffFreq, uint16_t SamplingFreq) {
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	460a      	mov	r2, r1
 800221a:	80fb      	strh	r3, [r7, #6]
 800221c:	4613      	mov	r3, r2
 800221e:	80bb      	strh	r3, [r7, #4]
	return CutoffFreq / ((float) (CutoffFreq + SamplingFreq));
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800222a:	88fa      	ldrh	r2, [r7, #6]
 800222c:	88bb      	ldrh	r3, [r7, #4]
 800222e:	4413      	add	r3, r2
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002238:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800223c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002240:	eeb0 0a67 	vmov.f32	s0, s15
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002288 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002254:	480d      	ldr	r0, [pc, #52]	; (800228c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002256:	490e      	ldr	r1, [pc, #56]	; (8002290 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002258:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800225a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800225c:	e002      	b.n	8002264 <LoopCopyDataInit>

0800225e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002262:	3304      	adds	r3, #4

08002264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002268:	d3f9      	bcc.n	800225e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800226c:	4c0b      	ldr	r4, [pc, #44]	; (800229c <LoopFillZerobss+0x26>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002270:	e001      	b.n	8002276 <LoopFillZerobss>

08002272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002274:	3204      	adds	r2, #4

08002276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002278:	d3fb      	bcc.n	8002272 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800227a:	f7ff ffb7 	bl	80021ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227e:	f002 fea9 	bl	8004fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002282:	f7fe fde7 	bl	8000e54 <main>
  bx  lr    
 8002286:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002288:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800228c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002290:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002294:	08005228 	.word	0x08005228
  ldr r2, =_sbss
 8002298:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800229c:	200002ec 	.word	0x200002ec

080022a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a0:	e7fe      	b.n	80022a0 <ADC_IRQHandler>
	...

080022a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_Init+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <HAL_Init+0x40>)
 80022ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_Init+0x40>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <HAL_Init+0x40>)
 80022ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <HAL_Init+0x40>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022cc:	2003      	movs	r0, #3
 80022ce:	f000 fb9d 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f000 f808 	bl	80022e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d8:	f7ff fd9c 	bl	8001e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023c00 	.word	0x40023c00

080022e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_InitTick+0x54>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_InitTick+0x58>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4619      	mov	r1, r3
 80022fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002302:	fbb2 f3f3 	udiv	r3, r2, r3
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fbb5 	bl	8002a76 <HAL_SYSTICK_Config>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e00e      	b.n	8002334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b0f      	cmp	r3, #15
 800231a:	d80a      	bhi.n	8002332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800231c:	2200      	movs	r2, #0
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	f000 fb7d 	bl	8002a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002328:	4a06      	ldr	r2, [pc, #24]	; (8002344 <HAL_InitTick+0x5c>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	e000      	b.n	8002334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000010 	.word	0x20000010
 8002340:	20000018 	.word	0x20000018
 8002344:	20000014 	.word	0x20000014

08002348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x20>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_IncTick+0x24>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4413      	add	r3, r2
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_IncTick+0x24>)
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000018 	.word	0x20000018
 800236c:	200002e8 	.word	0x200002e8

08002370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return uwTick;
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_GetTick+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	200002e8 	.word	0x200002e8

08002388 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e033      	b.n	8002406 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff fd5c 	bl	8001e64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d118      	bne.n	80023f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023ce:	f023 0302 	bic.w	r3, r3, #2
 80023d2:	f043 0202 	orr.w	r2, r3, #2
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f94a 	bl	8002674 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
 80023f6:	e001      	b.n	80023fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002404:	7bfb      	ldrb	r3, [r7, #15]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1c>
 8002428:	2302      	movs	r3, #2
 800242a:	e113      	b.n	8002654 <HAL_ADC_ConfigChannel+0x244>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b09      	cmp	r3, #9
 800243a:	d925      	bls.n	8002488 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68d9      	ldr	r1, [r3, #12]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	3b1e      	subs	r3, #30
 8002452:	2207      	movs	r2, #7
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43da      	mvns	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	400a      	ands	r2, r1
 8002460:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68d9      	ldr	r1, [r3, #12]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	4618      	mov	r0, r3
 8002474:	4603      	mov	r3, r0
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4403      	add	r3, r0
 800247a:	3b1e      	subs	r3, #30
 800247c:	409a      	lsls	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	e022      	b.n	80024ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6919      	ldr	r1, [r3, #16]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	2207      	movs	r2, #7
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	400a      	ands	r2, r1
 80024aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6919      	ldr	r1, [r3, #16]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4618      	mov	r0, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4403      	add	r3, r0
 80024c4:	409a      	lsls	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d824      	bhi.n	8002520 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3b05      	subs	r3, #5
 80024e8:	221f      	movs	r2, #31
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	400a      	ands	r2, r1
 80024f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	3b05      	subs	r3, #5
 8002512:	fa00 f203 	lsl.w	r2, r0, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	635a      	str	r2, [r3, #52]	; 0x34
 800251e:	e04c      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b0c      	cmp	r3, #12
 8002526:	d824      	bhi.n	8002572 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b23      	subs	r3, #35	; 0x23
 800253a:	221f      	movs	r2, #31
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43da      	mvns	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	400a      	ands	r2, r1
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	4618      	mov	r0, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	3b23      	subs	r3, #35	; 0x23
 8002564:	fa00 f203 	lsl.w	r2, r0, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
 8002570:	e023      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	3b41      	subs	r3, #65	; 0x41
 8002584:	221f      	movs	r2, #31
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	400a      	ands	r2, r1
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	3b41      	subs	r3, #65	; 0x41
 80025ae:	fa00 f203 	lsl.w	r2, r0, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_ADC_ConfigChannel+0x250>)
 80025bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a28      	ldr	r2, [pc, #160]	; (8002664 <HAL_ADC_ConfigChannel+0x254>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d10f      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x1d8>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b12      	cmp	r3, #18
 80025ce:	d10b      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <HAL_ADC_ConfigChannel+0x254>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d12b      	bne.n	800264a <HAL_ADC_ConfigChannel+0x23a>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_ADC_ConfigChannel+0x258>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <HAL_ADC_ConfigChannel+0x1f4>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b11      	cmp	r3, #17
 8002602:	d122      	bne.n	800264a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a11      	ldr	r2, [pc, #68]	; (8002668 <HAL_ADC_ConfigChannel+0x258>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d111      	bne.n	800264a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_ADC_ConfigChannel+0x25c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a11      	ldr	r2, [pc, #68]	; (8002670 <HAL_ADC_ConfigChannel+0x260>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	0c9a      	lsrs	r2, r3, #18
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800263c:	e002      	b.n	8002644 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	3b01      	subs	r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f9      	bne.n	800263e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40012300 	.word	0x40012300
 8002664:	40012000 	.word	0x40012000
 8002668:	10000012 	.word	0x10000012
 800266c:	20000010 	.word	0x20000010
 8002670:	431bde83 	.word	0x431bde83

08002674 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267c:	4b79      	ldr	r3, [pc, #484]	; (8002864 <ADC_Init+0x1f0>)
 800267e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	431a      	orrs	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	021a      	lsls	r2, r3, #8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6899      	ldr	r1, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	4a58      	ldr	r2, [pc, #352]	; (8002868 <ADC_Init+0x1f4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d022      	beq.n	8002752 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800271a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6899      	ldr	r1, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800273c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6899      	ldr	r1, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	e00f      	b.n	8002772 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002760:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002770:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0202 	bic.w	r2, r2, #2
 8002780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7e1b      	ldrb	r3, [r3, #24]
 800278c:	005a      	lsls	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01b      	beq.n	80027d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6859      	ldr	r1, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	3b01      	subs	r3, #1
 80027cc:	035a      	lsls	r2, r3, #13
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	e007      	b.n	80027e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	3b01      	subs	r3, #1
 8002804:	051a      	lsls	r2, r3, #20
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800281c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6899      	ldr	r1, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800282a:	025a      	lsls	r2, r3, #9
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002842:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6899      	ldr	r1, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	029a      	lsls	r2, r3, #10
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	609a      	str	r2, [r3, #8]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	40012300 	.word	0x40012300
 8002868:	0f000001 	.word	0x0f000001

0800286c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002888:	4013      	ands	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289e:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	60d3      	str	r3, [r2, #12]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <__NVIC_GetPriorityGrouping+0x18>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	f003 0307 	and.w	r3, r3, #7
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db0b      	blt.n	80028fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4907      	ldr	r1, [pc, #28]	; (8002908 <__NVIC_EnableIRQ+0x38>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2001      	movs	r0, #1
 80028f2:	fa00 f202 	lsl.w	r2, r0, r2
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d8:	d301      	bcc.n	80029de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029da:	2301      	movs	r3, #1
 80029dc:	e00f      	b.n	80029fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <SysTick_Config+0x40>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e6:	210f      	movs	r1, #15
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f7ff ff8e 	bl	800290c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <SysTick_Config+0x40>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f6:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <SysTick_Config+0x40>)
 80029f8:	2207      	movs	r2, #7
 80029fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	e000e010 	.word	0xe000e010

08002a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ff29 	bl	800286c <__NVIC_SetPriorityGrouping>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a34:	f7ff ff3e 	bl	80028b4 <__NVIC_GetPriorityGrouping>
 8002a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	f7ff ff8e 	bl	8002960 <NVIC_EncodePriority>
 8002a44:	4602      	mov	r2, r0
 8002a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff5d 	bl	800290c <__NVIC_SetPriority>
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff31 	bl	80028d0 <__NVIC_EnableIRQ>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ffa2 	bl	80029c8 <SysTick_Config>
 8002a84:	4603      	mov	r3, r0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	e159      	b.n	8002d60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aac:	2201      	movs	r2, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	f040 8148 	bne.w	8002d5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d005      	beq.n	8002ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d130      	bne.n	8002b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	2203      	movs	r2, #3
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 0201 	and.w	r2, r3, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d017      	beq.n	8002b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d123      	bne.n	8002bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	08da      	lsrs	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3208      	adds	r2, #8
 8002b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0203 	and.w	r2, r3, #3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a2 	beq.w	8002d5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b57      	ldr	r3, [pc, #348]	; (8002d78 <HAL_GPIO_Init+0x2e8>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4a56      	ldr	r2, [pc, #344]	; (8002d78 <HAL_GPIO_Init+0x2e8>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c24:	6453      	str	r3, [r2, #68]	; 0x44
 8002c26:	4b54      	ldr	r3, [pc, #336]	; (8002d78 <HAL_GPIO_Init+0x2e8>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c32:	4a52      	ldr	r2, [pc, #328]	; (8002d7c <HAL_GPIO_Init+0x2ec>)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3302      	adds	r3, #2
 8002c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a49      	ldr	r2, [pc, #292]	; (8002d80 <HAL_GPIO_Init+0x2f0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d019      	beq.n	8002c92 <HAL_GPIO_Init+0x202>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a48      	ldr	r2, [pc, #288]	; (8002d84 <HAL_GPIO_Init+0x2f4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x1fe>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a47      	ldr	r2, [pc, #284]	; (8002d88 <HAL_GPIO_Init+0x2f8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00d      	beq.n	8002c8a <HAL_GPIO_Init+0x1fa>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a46      	ldr	r2, [pc, #280]	; (8002d8c <HAL_GPIO_Init+0x2fc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x1f6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a45      	ldr	r2, [pc, #276]	; (8002d90 <HAL_GPIO_Init+0x300>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_Init+0x1f2>
 8002c7e:	2304      	movs	r3, #4
 8002c80:	e008      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c82:	2307      	movs	r3, #7
 8002c84:	e006      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c86:	2303      	movs	r3, #3
 8002c88:	e004      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e002      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c92:	2300      	movs	r3, #0
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f002 0203 	and.w	r2, r2, #3
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	4093      	lsls	r3, r2
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca4:	4935      	ldr	r1, [pc, #212]	; (8002d7c <HAL_GPIO_Init+0x2ec>)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	3302      	adds	r3, #2
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb2:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cd6:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cdc:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d00:	4a24      	ldr	r2, [pc, #144]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d06:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d2a:	4a1a      	ldr	r2, [pc, #104]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d54:	4a0f      	ldr	r2, [pc, #60]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	f67f aea2 	bls.w	8002aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	40020000 	.word	0x40020000
 8002d84:	40020400 	.word	0x40020400
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020c00 	.word	0x40020c00
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40013c00 	.word	0x40013c00

08002d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	807b      	strh	r3, [r7, #2]
 8002da4:	4613      	mov	r3, r2
 8002da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da8:	787b      	ldrb	r3, [r7, #1]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002db4:	e003      	b.n	8002dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002db6:	887b      	ldrh	r3, [r7, #2]
 8002db8:	041a      	lsls	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	619a      	str	r2, [r3, #24]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e267      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d075      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dea:	4b88      	ldr	r3, [pc, #544]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d00c      	beq.n	8002e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df6:	4b85      	ldr	r3, [pc, #532]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d112      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e02:	4b82      	ldr	r3, [pc, #520]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e0e:	d10b      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	4b7e      	ldr	r3, [pc, #504]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d05b      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x108>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d157      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e242      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d106      	bne.n	8002e40 <HAL_RCC_OscConfig+0x74>
 8002e32:	4b76      	ldr	r3, [pc, #472]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a75      	ldr	r2, [pc, #468]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e01d      	b.n	8002e7c <HAL_RCC_OscConfig+0xb0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x98>
 8002e4a:	4b70      	ldr	r3, [pc, #448]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a6f      	ldr	r2, [pc, #444]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4b6d      	ldr	r3, [pc, #436]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6c      	ldr	r2, [pc, #432]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0xb0>
 8002e64:	4b69      	ldr	r3, [pc, #420]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a68      	ldr	r2, [pc, #416]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b66      	ldr	r3, [pc, #408]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a65      	ldr	r2, [pc, #404]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7ff fa74 	bl	8002370 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7ff fa70 	bl	8002370 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	; 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e207      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	4b5b      	ldr	r3, [pc, #364]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0xc0>
 8002eaa:	e014      	b.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7ff fa60 	bl	8002370 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7ff fa5c 	bl	8002370 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e1f3      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	4b51      	ldr	r3, [pc, #324]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xe8>
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d063      	beq.n	8002faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ee2:	4b4a      	ldr	r3, [pc, #296]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eee:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d11c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efa:	4b44      	ldr	r3, [pc, #272]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d116      	bne.n	8002f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_RCC_OscConfig+0x152>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e1c7      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	4b3b      	ldr	r3, [pc, #236]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4937      	ldr	r1, [pc, #220]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	e03a      	b.n	8002faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3c:	4b34      	ldr	r3, [pc, #208]	; (8003010 <HAL_RCC_OscConfig+0x244>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7ff fa15 	bl	8002370 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f4a:	f7ff fa11 	bl	8002370 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e1a8      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5c:	4b2b      	ldr	r3, [pc, #172]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f68:	4b28      	ldr	r3, [pc, #160]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4925      	ldr	r1, [pc, #148]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]
 8002f7c:	e015      	b.n	8002faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7e:	4b24      	ldr	r3, [pc, #144]	; (8003010 <HAL_RCC_OscConfig+0x244>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7ff f9f4 	bl	8002370 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f8c:	f7ff f9f0 	bl	8002370 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e187      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d036      	beq.n	8003024 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d016      	beq.n	8002fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_RCC_OscConfig+0x248>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7ff f9d4 	bl	8002370 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fcc:	f7ff f9d0 	bl	8002370 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e167      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_OscConfig+0x240>)
 8002fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x200>
 8002fea:	e01b      	b.n	8003024 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <HAL_RCC_OscConfig+0x248>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7ff f9bd 	bl	8002370 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff8:	e00e      	b.n	8003018 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ffa:	f7ff f9b9 	bl	8002370 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d907      	bls.n	8003018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e150      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
 800300c:	40023800 	.word	0x40023800
 8003010:	42470000 	.word	0x42470000
 8003014:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003018:	4b88      	ldr	r3, [pc, #544]	; (800323c <HAL_RCC_OscConfig+0x470>)
 800301a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1ea      	bne.n	8002ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8097 	beq.w	8003160 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003036:	4b81      	ldr	r3, [pc, #516]	; (800323c <HAL_RCC_OscConfig+0x470>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10f      	bne.n	8003062 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	4b7d      	ldr	r3, [pc, #500]	; (800323c <HAL_RCC_OscConfig+0x470>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	4a7c      	ldr	r2, [pc, #496]	; (800323c <HAL_RCC_OscConfig+0x470>)
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003050:	6413      	str	r3, [r2, #64]	; 0x40
 8003052:	4b7a      	ldr	r3, [pc, #488]	; (800323c <HAL_RCC_OscConfig+0x470>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305e:	2301      	movs	r3, #1
 8003060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003062:	4b77      	ldr	r3, [pc, #476]	; (8003240 <HAL_RCC_OscConfig+0x474>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d118      	bne.n	80030a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306e:	4b74      	ldr	r3, [pc, #464]	; (8003240 <HAL_RCC_OscConfig+0x474>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a73      	ldr	r2, [pc, #460]	; (8003240 <HAL_RCC_OscConfig+0x474>)
 8003074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307a:	f7ff f979 	bl	8002370 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003082:	f7ff f975 	bl	8002370 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e10c      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	4b6a      	ldr	r3, [pc, #424]	; (8003240 <HAL_RCC_OscConfig+0x474>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x2ea>
 80030a8:	4b64      	ldr	r3, [pc, #400]	; (800323c <HAL_RCC_OscConfig+0x470>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	4a63      	ldr	r2, [pc, #396]	; (800323c <HAL_RCC_OscConfig+0x470>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	6713      	str	r3, [r2, #112]	; 0x70
 80030b4:	e01c      	b.n	80030f0 <HAL_RCC_OscConfig+0x324>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b05      	cmp	r3, #5
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x30c>
 80030be:	4b5f      	ldr	r3, [pc, #380]	; (800323c <HAL_RCC_OscConfig+0x470>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c2:	4a5e      	ldr	r2, [pc, #376]	; (800323c <HAL_RCC_OscConfig+0x470>)
 80030c4:	f043 0304 	orr.w	r3, r3, #4
 80030c8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ca:	4b5c      	ldr	r3, [pc, #368]	; (800323c <HAL_RCC_OscConfig+0x470>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ce:	4a5b      	ldr	r2, [pc, #364]	; (800323c <HAL_RCC_OscConfig+0x470>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6713      	str	r3, [r2, #112]	; 0x70
 80030d6:	e00b      	b.n	80030f0 <HAL_RCC_OscConfig+0x324>
 80030d8:	4b58      	ldr	r3, [pc, #352]	; (800323c <HAL_RCC_OscConfig+0x470>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	4a57      	ldr	r2, [pc, #348]	; (800323c <HAL_RCC_OscConfig+0x470>)
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	6713      	str	r3, [r2, #112]	; 0x70
 80030e4:	4b55      	ldr	r3, [pc, #340]	; (800323c <HAL_RCC_OscConfig+0x470>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e8:	4a54      	ldr	r2, [pc, #336]	; (800323c <HAL_RCC_OscConfig+0x470>)
 80030ea:	f023 0304 	bic.w	r3, r3, #4
 80030ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d015      	beq.n	8003124 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f8:	f7ff f93a 	bl	8002370 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003100:	f7ff f936 	bl	8002370 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e0cb      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003116:	4b49      	ldr	r3, [pc, #292]	; (800323c <HAL_RCC_OscConfig+0x470>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0ee      	beq.n	8003100 <HAL_RCC_OscConfig+0x334>
 8003122:	e014      	b.n	800314e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003124:	f7ff f924 	bl	8002370 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312a:	e00a      	b.n	8003142 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800312c:	f7ff f920 	bl	8002370 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0b5      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003142:	4b3e      	ldr	r3, [pc, #248]	; (800323c <HAL_RCC_OscConfig+0x470>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1ee      	bne.n	800312c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d105      	bne.n	8003160 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003154:	4b39      	ldr	r3, [pc, #228]	; (800323c <HAL_RCC_OscConfig+0x470>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	4a38      	ldr	r2, [pc, #224]	; (800323c <HAL_RCC_OscConfig+0x470>)
 800315a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80a1 	beq.w	80032ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800316a:	4b34      	ldr	r3, [pc, #208]	; (800323c <HAL_RCC_OscConfig+0x470>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b08      	cmp	r3, #8
 8003174:	d05c      	beq.n	8003230 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d141      	bne.n	8003202 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <HAL_RCC_OscConfig+0x478>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7ff f8f4 	bl	8002370 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318c:	f7ff f8f0 	bl	8002370 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e087      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	4b27      	ldr	r3, [pc, #156]	; (800323c <HAL_RCC_OscConfig+0x470>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69da      	ldr	r2, [r3, #28]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	019b      	lsls	r3, r3, #6
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	3b01      	subs	r3, #1
 80031c4:	041b      	lsls	r3, r3, #16
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	061b      	lsls	r3, r3, #24
 80031ce:	491b      	ldr	r1, [pc, #108]	; (800323c <HAL_RCC_OscConfig+0x470>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <HAL_RCC_OscConfig+0x478>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7ff f8c9 	bl	8002370 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e2:	f7ff f8c5 	bl	8002370 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e05c      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <HAL_RCC_OscConfig+0x470>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0f0      	beq.n	80031e2 <HAL_RCC_OscConfig+0x416>
 8003200:	e054      	b.n	80032ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_RCC_OscConfig+0x478>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7ff f8b2 	bl	8002370 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003210:	f7ff f8ae 	bl	8002370 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e045      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_RCC_OscConfig+0x470>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x444>
 800322e:	e03d      	b.n	80032ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d107      	bne.n	8003248 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e038      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
 800323c:	40023800 	.word	0x40023800
 8003240:	40007000 	.word	0x40007000
 8003244:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003248:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_RCC_OscConfig+0x4ec>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d028      	beq.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d121      	bne.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326e:	429a      	cmp	r2, r3
 8003270:	d11a      	bne.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003278:	4013      	ands	r3, r2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800327e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003280:	4293      	cmp	r3, r2
 8003282:	d111      	bne.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	3b01      	subs	r3, #1
 8003292:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d107      	bne.n	80032a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800

080032bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0cc      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032d0:	4b68      	ldr	r3, [pc, #416]	; (8003474 <HAL_RCC_ClockConfig+0x1b8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d90c      	bls.n	80032f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b65      	ldr	r3, [pc, #404]	; (8003474 <HAL_RCC_ClockConfig+0x1b8>)
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b63      	ldr	r3, [pc, #396]	; (8003474 <HAL_RCC_ClockConfig+0x1b8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0b8      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d020      	beq.n	8003346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003310:	4b59      	ldr	r3, [pc, #356]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4a58      	ldr	r2, [pc, #352]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800331a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003328:	4b53      	ldr	r3, [pc, #332]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	4a52      	ldr	r2, [pc, #328]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003334:	4b50      	ldr	r3, [pc, #320]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	494d      	ldr	r1, [pc, #308]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d044      	beq.n	80033dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	4b47      	ldr	r3, [pc, #284]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d119      	bne.n	800339a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e07f      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d003      	beq.n	800337a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003376:	2b03      	cmp	r3, #3
 8003378:	d107      	bne.n	800338a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337a:	4b3f      	ldr	r3, [pc, #252]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e06f      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338a:	4b3b      	ldr	r3, [pc, #236]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e067      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800339a:	4b37      	ldr	r3, [pc, #220]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f023 0203 	bic.w	r2, r3, #3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4934      	ldr	r1, [pc, #208]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ac:	f7fe ffe0 	bl	8002370 <HAL_GetTick>
 80033b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b2:	e00a      	b.n	80033ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b4:	f7fe ffdc 	bl	8002370 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e04f      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ca:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 020c 	and.w	r2, r3, #12
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	429a      	cmp	r2, r3
 80033da:	d1eb      	bne.n	80033b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033dc:	4b25      	ldr	r3, [pc, #148]	; (8003474 <HAL_RCC_ClockConfig+0x1b8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d20c      	bcs.n	8003404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ea:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f2:	4b20      	ldr	r3, [pc, #128]	; (8003474 <HAL_RCC_ClockConfig+0x1b8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e032      	b.n	800346a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003410:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4916      	ldr	r1, [pc, #88]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	490e      	ldr	r1, [pc, #56]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	4313      	orrs	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003442:	f000 f821 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 8003446:	4602      	mov	r2, r0
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	490a      	ldr	r1, [pc, #40]	; (800347c <HAL_RCC_ClockConfig+0x1c0>)
 8003454:	5ccb      	ldrb	r3, [r1, r3]
 8003456:	fa22 f303 	lsr.w	r3, r2, r3
 800345a:	4a09      	ldr	r2, [pc, #36]	; (8003480 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_RCC_ClockConfig+0x1c8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe ff40 	bl	80022e8 <HAL_InitTick>

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023c00 	.word	0x40023c00
 8003478:	40023800 	.word	0x40023800
 800347c:	08005200 	.word	0x08005200
 8003480:	20000010 	.word	0x20000010
 8003484:	20000014 	.word	0x20000014

08003488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800348c:	b094      	sub	sp, #80	; 0x50
 800348e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	647b      	str	r3, [r7, #68]	; 0x44
 8003494:	2300      	movs	r3, #0
 8003496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003498:	2300      	movs	r3, #0
 800349a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034a0:	4b79      	ldr	r3, [pc, #484]	; (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d00d      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x40>
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	f200 80e1 	bhi.w	8003674 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x34>
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d003      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ba:	e0db      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b73      	ldr	r3, [pc, #460]	; (800368c <HAL_RCC_GetSysClockFreq+0x204>)
 80034be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034c0:	e0db      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034c2:	4b73      	ldr	r3, [pc, #460]	; (8003690 <HAL_RCC_GetSysClockFreq+0x208>)
 80034c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034c6:	e0d8      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c8:	4b6f      	ldr	r3, [pc, #444]	; (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034d2:	4b6d      	ldr	r3, [pc, #436]	; (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d063      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034de:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	099b      	lsrs	r3, r3, #6
 80034e4:	2200      	movs	r2, #0
 80034e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f0:	633b      	str	r3, [r7, #48]	; 0x30
 80034f2:	2300      	movs	r3, #0
 80034f4:	637b      	str	r3, [r7, #52]	; 0x34
 80034f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034fa:	4622      	mov	r2, r4
 80034fc:	462b      	mov	r3, r5
 80034fe:	f04f 0000 	mov.w	r0, #0
 8003502:	f04f 0100 	mov.w	r1, #0
 8003506:	0159      	lsls	r1, r3, #5
 8003508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350c:	0150      	lsls	r0, r2, #5
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4621      	mov	r1, r4
 8003514:	1a51      	subs	r1, r2, r1
 8003516:	6139      	str	r1, [r7, #16]
 8003518:	4629      	mov	r1, r5
 800351a:	eb63 0301 	sbc.w	r3, r3, r1
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800352c:	4659      	mov	r1, fp
 800352e:	018b      	lsls	r3, r1, #6
 8003530:	4651      	mov	r1, sl
 8003532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003536:	4651      	mov	r1, sl
 8003538:	018a      	lsls	r2, r1, #6
 800353a:	4651      	mov	r1, sl
 800353c:	ebb2 0801 	subs.w	r8, r2, r1
 8003540:	4659      	mov	r1, fp
 8003542:	eb63 0901 	sbc.w	r9, r3, r1
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800355a:	4690      	mov	r8, r2
 800355c:	4699      	mov	r9, r3
 800355e:	4623      	mov	r3, r4
 8003560:	eb18 0303 	adds.w	r3, r8, r3
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	462b      	mov	r3, r5
 8003568:	eb49 0303 	adc.w	r3, r9, r3
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800357a:	4629      	mov	r1, r5
 800357c:	024b      	lsls	r3, r1, #9
 800357e:	4621      	mov	r1, r4
 8003580:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003584:	4621      	mov	r1, r4
 8003586:	024a      	lsls	r2, r1, #9
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358e:	2200      	movs	r2, #0
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
 8003592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003598:	f7fd fada 	bl	8000b50 <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4613      	mov	r3, r2
 80035a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a4:	e058      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a6:	4b38      	ldr	r3, [pc, #224]	; (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	099b      	lsrs	r3, r3, #6
 80035ac:	2200      	movs	r2, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	4611      	mov	r1, r2
 80035b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
 80035bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035c0:	4642      	mov	r2, r8
 80035c2:	464b      	mov	r3, r9
 80035c4:	f04f 0000 	mov.w	r0, #0
 80035c8:	f04f 0100 	mov.w	r1, #0
 80035cc:	0159      	lsls	r1, r3, #5
 80035ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d2:	0150      	lsls	r0, r2, #5
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4641      	mov	r1, r8
 80035da:	ebb2 0a01 	subs.w	sl, r2, r1
 80035de:	4649      	mov	r1, r9
 80035e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035f8:	ebb2 040a 	subs.w	r4, r2, sl
 80035fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	00eb      	lsls	r3, r5, #3
 800360a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800360e:	00e2      	lsls	r2, r4, #3
 8003610:	4614      	mov	r4, r2
 8003612:	461d      	mov	r5, r3
 8003614:	4643      	mov	r3, r8
 8003616:	18e3      	adds	r3, r4, r3
 8003618:	603b      	str	r3, [r7, #0]
 800361a:	464b      	mov	r3, r9
 800361c:	eb45 0303 	adc.w	r3, r5, r3
 8003620:	607b      	str	r3, [r7, #4]
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800362e:	4629      	mov	r1, r5
 8003630:	028b      	lsls	r3, r1, #10
 8003632:	4621      	mov	r1, r4
 8003634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003638:	4621      	mov	r1, r4
 800363a:	028a      	lsls	r2, r1, #10
 800363c:	4610      	mov	r0, r2
 800363e:	4619      	mov	r1, r3
 8003640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003642:	2200      	movs	r2, #0
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	61fa      	str	r2, [r7, #28]
 8003648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800364c:	f7fd fa80 	bl	8000b50 <__aeabi_uldivmod>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4613      	mov	r3, r2
 8003656:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_GetSysClockFreq+0x200>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	3301      	adds	r3, #1
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800366a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003672:	e002      	b.n	800367a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCC_GetSysClockFreq+0x204>)
 8003676:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800367a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800367c:	4618      	mov	r0, r3
 800367e:	3750      	adds	r7, #80	; 0x50
 8003680:	46bd      	mov	sp, r7
 8003682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800
 800368c:	00f42400 	.word	0x00f42400
 8003690:	007a1200 	.word	0x007a1200

08003694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000010 	.word	0x20000010

080036ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036b0:	f7ff fff0 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0a9b      	lsrs	r3, r3, #10
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4903      	ldr	r1, [pc, #12]	; (80036d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08005210 	.word	0x08005210

080036d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036d8:	f7ff ffdc 	bl	8003694 <HAL_RCC_GetHCLKFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	0b5b      	lsrs	r3, r3, #13
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4903      	ldr	r1, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40023800 	.word	0x40023800
 80036f8:	08005210 	.word	0x08005210

080036fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e041      	b.n	8003792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe fbe2 	bl	8001eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	4619      	mov	r1, r3
 800373a:	4610      	mov	r0, r2
 800373c:	f000 fde2 	bl	8004304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d001      	beq.n	80037b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e03c      	b.n	800382e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1e      	ldr	r2, [pc, #120]	; (800383c <HAL_TIM_Base_Start+0xa0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d018      	beq.n	80037f8 <HAL_TIM_Base_Start+0x5c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ce:	d013      	beq.n	80037f8 <HAL_TIM_Base_Start+0x5c>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1a      	ldr	r2, [pc, #104]	; (8003840 <HAL_TIM_Base_Start+0xa4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00e      	beq.n	80037f8 <HAL_TIM_Base_Start+0x5c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_TIM_Base_Start+0xa8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_TIM_Base_Start+0x5c>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a17      	ldr	r2, [pc, #92]	; (8003848 <HAL_TIM_Base_Start+0xac>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_TIM_Base_Start+0x5c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a16      	ldr	r2, [pc, #88]	; (800384c <HAL_TIM_Base_Start+0xb0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d111      	bne.n	800381c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b06      	cmp	r3, #6
 8003808:	d010      	beq.n	800382c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381a:	e007      	b.n	800382c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800
 8003848:	40000c00 	.word	0x40000c00
 800384c:	40014000 	.word	0x40014000

08003850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d001      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e044      	b.n	80038f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <HAL_TIM_Base_Start_IT+0xb0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d018      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x6c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003892:	d013      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x6c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1a      	ldr	r2, [pc, #104]	; (8003904 <HAL_TIM_Base_Start_IT+0xb4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00e      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x6c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a19      	ldr	r2, [pc, #100]	; (8003908 <HAL_TIM_Base_Start_IT+0xb8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d009      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x6c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a17      	ldr	r2, [pc, #92]	; (800390c <HAL_TIM_Base_Start_IT+0xbc>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d004      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x6c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a16      	ldr	r2, [pc, #88]	; (8003910 <HAL_TIM_Base_Start_IT+0xc0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d111      	bne.n	80038e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b06      	cmp	r3, #6
 80038cc:	d010      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0201 	orr.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038de:	e007      	b.n	80038f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40010000 	.word	0x40010000
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40000c00 	.word	0x40000c00
 8003910:	40014000 	.word	0x40014000

08003914 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e041      	b.n	80039aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f839 	bl	80039b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3304      	adds	r3, #4
 8003950:	4619      	mov	r1, r3
 8003952:	4610      	mov	r0, r2
 8003954:	f000 fcd6 	bl	8004304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d109      	bne.n	80039ec <HAL_TIM_PWM_Start+0x24>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	bf14      	ite	ne
 80039e4:	2301      	movne	r3, #1
 80039e6:	2300      	moveq	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	e022      	b.n	8003a32 <HAL_TIM_PWM_Start+0x6a>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d109      	bne.n	8003a06 <HAL_TIM_PWM_Start+0x3e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	bf14      	ite	ne
 80039fe:	2301      	movne	r3, #1
 8003a00:	2300      	moveq	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	e015      	b.n	8003a32 <HAL_TIM_PWM_Start+0x6a>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d109      	bne.n	8003a20 <HAL_TIM_PWM_Start+0x58>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e008      	b.n	8003a32 <HAL_TIM_PWM_Start+0x6a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e068      	b.n	8003b0c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d104      	bne.n	8003a4a <HAL_TIM_PWM_Start+0x82>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a48:	e013      	b.n	8003a72 <HAL_TIM_PWM_Start+0xaa>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d104      	bne.n	8003a5a <HAL_TIM_PWM_Start+0x92>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a58:	e00b      	b.n	8003a72 <HAL_TIM_PWM_Start+0xaa>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d104      	bne.n	8003a6a <HAL_TIM_PWM_Start+0xa2>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a68:	e003      	b.n	8003a72 <HAL_TIM_PWM_Start+0xaa>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2201      	movs	r2, #1
 8003a78:	6839      	ldr	r1, [r7, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fee8 	bl	8004850 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a23      	ldr	r2, [pc, #140]	; (8003b14 <HAL_TIM_PWM_Start+0x14c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d107      	bne.n	8003a9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <HAL_TIM_PWM_Start+0x14c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d018      	beq.n	8003ad6 <HAL_TIM_PWM_Start+0x10e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aac:	d013      	beq.n	8003ad6 <HAL_TIM_PWM_Start+0x10e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <HAL_TIM_PWM_Start+0x150>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_TIM_PWM_Start+0x10e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <HAL_TIM_PWM_Start+0x154>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d009      	beq.n	8003ad6 <HAL_TIM_PWM_Start+0x10e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <HAL_TIM_PWM_Start+0x158>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d004      	beq.n	8003ad6 <HAL_TIM_PWM_Start+0x10e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <HAL_TIM_PWM_Start+0x15c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d111      	bne.n	8003afa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b06      	cmp	r3, #6
 8003ae6:	d010      	beq.n	8003b0a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af8:	e007      	b.n	8003b0a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40010000 	.word	0x40010000
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40000800 	.word	0x40000800
 8003b20:	40000c00 	.word	0x40000c00
 8003b24:	40014000 	.word	0x40014000

08003b28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e097      	b.n	8003c6c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7fe fa09 	bl	8001f68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b6c:	f023 0307 	bic.w	r3, r3, #7
 8003b70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f000 fbc1 	bl	8004304 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003baa:	f023 0303 	bic.w	r3, r3, #3
 8003bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003bc8:	f023 030c 	bic.w	r3, r3, #12
 8003bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	4313      	orrs	r3, r2
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	011a      	lsls	r2, r3, #4
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	031b      	lsls	r3, r3, #12
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003c0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d110      	bne.n	8003cc6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d102      	bne.n	8003cb0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003caa:	7b7b      	ldrb	r3, [r7, #13]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d001      	beq.n	8003cb4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e069      	b.n	8003d88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc4:	e031      	b.n	8003d2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d110      	bne.n	8003cee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ccc:	7bbb      	ldrb	r3, [r7, #14]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d102      	bne.n	8003cd8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cd2:	7b3b      	ldrb	r3, [r7, #12]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d001      	beq.n	8003cdc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e055      	b.n	8003d88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cec:	e01d      	b.n	8003d2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d108      	bne.n	8003d06 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cf4:	7bbb      	ldrb	r3, [r7, #14]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d105      	bne.n	8003d06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cfa:	7b7b      	ldrb	r3, [r7, #13]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d102      	bne.n	8003d06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d00:	7b3b      	ldrb	r3, [r7, #12]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d001      	beq.n	8003d0a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e03e      	b.n	8003d88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_TIM_Encoder_Start+0xc4>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d008      	beq.n	8003d48 <HAL_TIM_Encoder_Start+0xd4>
 8003d36:	e00f      	b.n	8003d58 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fd85 	bl	8004850 <TIM_CCxChannelCmd>
      break;
 8003d46:	e016      	b.n	8003d76 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	2104      	movs	r1, #4
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fd7d 	bl	8004850 <TIM_CCxChannelCmd>
      break;
 8003d56:	e00e      	b.n	8003d76 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fd75 	bl	8004850 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	2104      	movs	r1, #4
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fd6e 	bl	8004850 <TIM_CCxChannelCmd>
      break;
 8003d74:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0201 	orr.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0202 	mvn.w	r2, #2
 8003dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fa77 	bl	80042c6 <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fa69 	bl	80042b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fa7a 	bl	80042da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0204 	mvn.w	r2, #4
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fa4d 	bl	80042c6 <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa3f 	bl	80042b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fa50 	bl	80042da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0208 	mvn.w	r2, #8
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fa23 	bl	80042c6 <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fa15 	bl	80042b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fa26 	bl	80042da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0210 	mvn.w	r2, #16
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9f9 	bl	80042c6 <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f9eb 	bl	80042b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f9fc 	bl	80042da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0201 	mvn.w	r2, #1
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fd ff3c 	bl	8001d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d10e      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b80      	cmp	r3, #128	; 0x80
 8003f2e:	d107      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fd78 	bl	8004a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d10e      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d107      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9c1 	bl	80042ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d10e      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d107      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0220 	mvn.w	r2, #32
 8003f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fd42 	bl	8004a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e0ae      	b.n	800411c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b0c      	cmp	r3, #12
 8003fca:	f200 809f 	bhi.w	800410c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08004009 	.word	0x08004009
 8003fd8:	0800410d 	.word	0x0800410d
 8003fdc:	0800410d 	.word	0x0800410d
 8003fe0:	0800410d 	.word	0x0800410d
 8003fe4:	08004049 	.word	0x08004049
 8003fe8:	0800410d 	.word	0x0800410d
 8003fec:	0800410d 	.word	0x0800410d
 8003ff0:	0800410d 	.word	0x0800410d
 8003ff4:	0800408b 	.word	0x0800408b
 8003ff8:	0800410d 	.word	0x0800410d
 8003ffc:	0800410d 	.word	0x0800410d
 8004000:	0800410d 	.word	0x0800410d
 8004004:	080040cb 	.word	0x080040cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	4618      	mov	r0, r3
 8004010:	f000 f9f8 	bl	8004404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0208 	orr.w	r2, r2, #8
 8004022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0204 	bic.w	r2, r2, #4
 8004032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6999      	ldr	r1, [r3, #24]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	619a      	str	r2, [r3, #24]
      break;
 8004046:	e064      	b.n	8004112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fa3e 	bl	80044d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6999      	ldr	r1, [r3, #24]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	021a      	lsls	r2, r3, #8
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	619a      	str	r2, [r3, #24]
      break;
 8004088:	e043      	b.n	8004112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fa89 	bl	80045a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0208 	orr.w	r2, r2, #8
 80040a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0204 	bic.w	r2, r2, #4
 80040b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69d9      	ldr	r1, [r3, #28]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	61da      	str	r2, [r3, #28]
      break;
 80040c8:	e023      	b.n	8004112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fad3 	bl	800467c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69d9      	ldr	r1, [r3, #28]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	021a      	lsls	r2, r3, #8
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	61da      	str	r2, [r3, #28]
      break;
 800410a:	e002      	b.n	8004112 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	75fb      	strb	r3, [r7, #23]
      break;
 8004110:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800411a:	7dfb      	ldrb	r3, [r7, #23]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_TIM_ConfigClockSource+0x1c>
 800413c:	2302      	movs	r3, #2
 800413e:	e0b4      	b.n	80042aa <HAL_TIM_ConfigClockSource+0x186>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800415e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004166:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004178:	d03e      	beq.n	80041f8 <HAL_TIM_ConfigClockSource+0xd4>
 800417a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800417e:	f200 8087 	bhi.w	8004290 <HAL_TIM_ConfigClockSource+0x16c>
 8004182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004186:	f000 8086 	beq.w	8004296 <HAL_TIM_ConfigClockSource+0x172>
 800418a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418e:	d87f      	bhi.n	8004290 <HAL_TIM_ConfigClockSource+0x16c>
 8004190:	2b70      	cmp	r3, #112	; 0x70
 8004192:	d01a      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0xa6>
 8004194:	2b70      	cmp	r3, #112	; 0x70
 8004196:	d87b      	bhi.n	8004290 <HAL_TIM_ConfigClockSource+0x16c>
 8004198:	2b60      	cmp	r3, #96	; 0x60
 800419a:	d050      	beq.n	800423e <HAL_TIM_ConfigClockSource+0x11a>
 800419c:	2b60      	cmp	r3, #96	; 0x60
 800419e:	d877      	bhi.n	8004290 <HAL_TIM_ConfigClockSource+0x16c>
 80041a0:	2b50      	cmp	r3, #80	; 0x50
 80041a2:	d03c      	beq.n	800421e <HAL_TIM_ConfigClockSource+0xfa>
 80041a4:	2b50      	cmp	r3, #80	; 0x50
 80041a6:	d873      	bhi.n	8004290 <HAL_TIM_ConfigClockSource+0x16c>
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d058      	beq.n	800425e <HAL_TIM_ConfigClockSource+0x13a>
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d86f      	bhi.n	8004290 <HAL_TIM_ConfigClockSource+0x16c>
 80041b0:	2b30      	cmp	r3, #48	; 0x30
 80041b2:	d064      	beq.n	800427e <HAL_TIM_ConfigClockSource+0x15a>
 80041b4:	2b30      	cmp	r3, #48	; 0x30
 80041b6:	d86b      	bhi.n	8004290 <HAL_TIM_ConfigClockSource+0x16c>
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d060      	beq.n	800427e <HAL_TIM_ConfigClockSource+0x15a>
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d867      	bhi.n	8004290 <HAL_TIM_ConfigClockSource+0x16c>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d05c      	beq.n	800427e <HAL_TIM_ConfigClockSource+0x15a>
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d05a      	beq.n	800427e <HAL_TIM_ConfigClockSource+0x15a>
 80041c8:	e062      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	6899      	ldr	r1, [r3, #8]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f000 fb19 	bl	8004810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	609a      	str	r2, [r3, #8]
      break;
 80041f6:	e04f      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	6899      	ldr	r1, [r3, #8]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f000 fb02 	bl	8004810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800421a:	609a      	str	r2, [r3, #8]
      break;
 800421c:	e03c      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6859      	ldr	r1, [r3, #4]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	461a      	mov	r2, r3
 800422c:	f000 fa76 	bl	800471c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2150      	movs	r1, #80	; 0x50
 8004236:	4618      	mov	r0, r3
 8004238:	f000 facf 	bl	80047da <TIM_ITRx_SetConfig>
      break;
 800423c:	e02c      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6859      	ldr	r1, [r3, #4]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	461a      	mov	r2, r3
 800424c:	f000 fa95 	bl	800477a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2160      	movs	r1, #96	; 0x60
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fabf 	bl	80047da <TIM_ITRx_SetConfig>
      break;
 800425c:	e01c      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6859      	ldr	r1, [r3, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	461a      	mov	r2, r3
 800426c:	f000 fa56 	bl	800471c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2140      	movs	r1, #64	; 0x40
 8004276:	4618      	mov	r0, r3
 8004278:	f000 faaf 	bl	80047da <TIM_ITRx_SetConfig>
      break;
 800427c:	e00c      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4619      	mov	r1, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f000 faa6 	bl	80047da <TIM_ITRx_SetConfig>
      break;
 800428e:	e003      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
      break;
 8004294:	e000      	b.n	8004298 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004296:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a34      	ldr	r2, [pc, #208]	; (80043e8 <TIM_Base_SetConfig+0xe4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00f      	beq.n	800433c <TIM_Base_SetConfig+0x38>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004322:	d00b      	beq.n	800433c <TIM_Base_SetConfig+0x38>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a31      	ldr	r2, [pc, #196]	; (80043ec <TIM_Base_SetConfig+0xe8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d007      	beq.n	800433c <TIM_Base_SetConfig+0x38>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a30      	ldr	r2, [pc, #192]	; (80043f0 <TIM_Base_SetConfig+0xec>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d003      	beq.n	800433c <TIM_Base_SetConfig+0x38>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a2f      	ldr	r2, [pc, #188]	; (80043f4 <TIM_Base_SetConfig+0xf0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d108      	bne.n	800434e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a25      	ldr	r2, [pc, #148]	; (80043e8 <TIM_Base_SetConfig+0xe4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01b      	beq.n	800438e <TIM_Base_SetConfig+0x8a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435c:	d017      	beq.n	800438e <TIM_Base_SetConfig+0x8a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a22      	ldr	r2, [pc, #136]	; (80043ec <TIM_Base_SetConfig+0xe8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <TIM_Base_SetConfig+0x8a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a21      	ldr	r2, [pc, #132]	; (80043f0 <TIM_Base_SetConfig+0xec>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00f      	beq.n	800438e <TIM_Base_SetConfig+0x8a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a20      	ldr	r2, [pc, #128]	; (80043f4 <TIM_Base_SetConfig+0xf0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00b      	beq.n	800438e <TIM_Base_SetConfig+0x8a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <TIM_Base_SetConfig+0xf4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d007      	beq.n	800438e <TIM_Base_SetConfig+0x8a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a1e      	ldr	r2, [pc, #120]	; (80043fc <TIM_Base_SetConfig+0xf8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d003      	beq.n	800438e <TIM_Base_SetConfig+0x8a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <TIM_Base_SetConfig+0xfc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d108      	bne.n	80043a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a08      	ldr	r2, [pc, #32]	; (80043e8 <TIM_Base_SetConfig+0xe4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d103      	bne.n	80043d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	615a      	str	r2, [r3, #20]
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40000400 	.word	0x40000400
 80043f0:	40000800 	.word	0x40000800
 80043f4:	40000c00 	.word	0x40000c00
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40014400 	.word	0x40014400
 8004400:	40014800 	.word	0x40014800

08004404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0201 	bic.w	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f023 0302 	bic.w	r3, r3, #2
 800444c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a1c      	ldr	r2, [pc, #112]	; (80044cc <TIM_OC1_SetConfig+0xc8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d10c      	bne.n	800447a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0308 	bic.w	r3, r3, #8
 8004466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f023 0304 	bic.w	r3, r3, #4
 8004478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a13      	ldr	r2, [pc, #76]	; (80044cc <TIM_OC1_SetConfig+0xc8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d111      	bne.n	80044a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	621a      	str	r2, [r3, #32]
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40010000 	.word	0x40010000

080044d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f023 0210 	bic.w	r2, r3, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0320 	bic.w	r3, r3, #32
 800451a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a1e      	ldr	r2, [pc, #120]	; (80045a4 <TIM_OC2_SetConfig+0xd4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10d      	bne.n	800454c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800454a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <TIM_OC2_SetConfig+0xd4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d113      	bne.n	800457c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800455a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	621a      	str	r2, [r3, #32]
}
 8004596:	bf00      	nop
 8004598:	371c      	adds	r7, #28
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40010000 	.word	0x40010000

080045a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <TIM_OC3_SetConfig+0xd0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d10d      	bne.n	8004622 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800460c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a14      	ldr	r2, [pc, #80]	; (8004678 <TIM_OC3_SetConfig+0xd0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d113      	bne.n	8004652 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	621a      	str	r2, [r3, #32]
}
 800466c:	bf00      	nop
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40010000 	.word	0x40010000

0800467c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	031b      	lsls	r3, r3, #12
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a10      	ldr	r2, [pc, #64]	; (8004718 <TIM_OC4_SetConfig+0x9c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d109      	bne.n	80046f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	019b      	lsls	r3, r3, #6
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000

0800471c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	f023 0201 	bic.w	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f023 030a 	bic.w	r3, r3, #10
 8004758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800477a:	b480      	push	{r7}
 800477c:	b087      	sub	sp, #28
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f023 0210 	bic.w	r2, r3, #16
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	031b      	lsls	r3, r3, #12
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	621a      	str	r2, [r3, #32]
}
 80047ce:	bf00      	nop
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f043 0307 	orr.w	r3, r3, #7
 80047fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	609a      	str	r2, [r3, #8]
}
 8004804:	bf00      	nop
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800482a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	021a      	lsls	r2, r3, #8
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	431a      	orrs	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4313      	orrs	r3, r2
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	609a      	str	r2, [r3, #8]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	2201      	movs	r2, #1
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a1a      	ldr	r2, [r3, #32]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	43db      	mvns	r3, r3
 8004872:	401a      	ands	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1a      	ldr	r2, [r3, #32]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	fa01 f303 	lsl.w	r3, r1, r3
 8004888:	431a      	orrs	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	621a      	str	r2, [r3, #32]
}
 800488e:	bf00      	nop
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e050      	b.n	8004956 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1c      	ldr	r2, [pc, #112]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d018      	beq.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004900:	d013      	beq.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a18      	ldr	r2, [pc, #96]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00e      	beq.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a16      	ldr	r2, [pc, #88]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d009      	beq.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a15      	ldr	r2, [pc, #84]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d004      	beq.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a13      	ldr	r2, [pc, #76]	; (8004974 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d10c      	bne.n	8004944 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	4313      	orrs	r3, r2
 800493a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40010000 	.word	0x40010000
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800
 8004970:	40000c00 	.word	0x40000c00
 8004974:	40014000 	.word	0x40014000

08004978 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004990:	2302      	movs	r3, #2
 8004992:	e03d      	b.n	8004a10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e03f      	b.n	8004ad6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fd fb38 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2224      	movs	r2, #36	; 0x24
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f829 	bl	8004ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae4:	b0c0      	sub	sp, #256	; 0x100
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	68d9      	ldr	r1, [r3, #12]
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	ea40 0301 	orr.w	r3, r0, r1
 8004b08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b38:	f021 010c 	bic.w	r1, r1, #12
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b46:	430b      	orrs	r3, r1
 8004b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5a:	6999      	ldr	r1, [r3, #24]
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	ea40 0301 	orr.w	r3, r0, r1
 8004b66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b8f      	ldr	r3, [pc, #572]	; (8004dac <UART_SetConfig+0x2cc>)
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d005      	beq.n	8004b80 <UART_SetConfig+0xa0>
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b8d      	ldr	r3, [pc, #564]	; (8004db0 <UART_SetConfig+0x2d0>)
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d104      	bne.n	8004b8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b80:	f7fe fda8 	bl	80036d4 <HAL_RCC_GetPCLK2Freq>
 8004b84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b88:	e003      	b.n	8004b92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b8a:	f7fe fd8f 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
 8004b8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b9c:	f040 810c 	bne.w	8004db8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004baa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004bae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	462b      	mov	r3, r5
 8004bb6:	1891      	adds	r1, r2, r2
 8004bb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bba:	415b      	adcs	r3, r3
 8004bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	eb12 0801 	adds.w	r8, r2, r1
 8004bc8:	4629      	mov	r1, r5
 8004bca:	eb43 0901 	adc.w	r9, r3, r1
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004be2:	4690      	mov	r8, r2
 8004be4:	4699      	mov	r9, r3
 8004be6:	4623      	mov	r3, r4
 8004be8:	eb18 0303 	adds.w	r3, r8, r3
 8004bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	eb49 0303 	adc.w	r3, r9, r3
 8004bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c0e:	460b      	mov	r3, r1
 8004c10:	18db      	adds	r3, r3, r3
 8004c12:	653b      	str	r3, [r7, #80]	; 0x50
 8004c14:	4613      	mov	r3, r2
 8004c16:	eb42 0303 	adc.w	r3, r2, r3
 8004c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c24:	f7fb ff94 	bl	8000b50 <__aeabi_uldivmod>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4b61      	ldr	r3, [pc, #388]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	011c      	lsls	r4, r3, #4
 8004c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c48:	4642      	mov	r2, r8
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	1891      	adds	r1, r2, r2
 8004c4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c50:	415b      	adcs	r3, r3
 8004c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c58:	4641      	mov	r1, r8
 8004c5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c5e:	4649      	mov	r1, r9
 8004c60:	eb43 0b01 	adc.w	fp, r3, r1
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c78:	4692      	mov	sl, r2
 8004c7a:	469b      	mov	fp, r3
 8004c7c:	4643      	mov	r3, r8
 8004c7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c86:	464b      	mov	r3, r9
 8004c88:	eb4b 0303 	adc.w	r3, fp, r3
 8004c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ca0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	18db      	adds	r3, r3, r3
 8004ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8004caa:	4613      	mov	r3, r2
 8004cac:	eb42 0303 	adc.w	r3, r2, r3
 8004cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cba:	f7fb ff49 	bl	8000b50 <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4b3b      	ldr	r3, [pc, #236]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	2264      	movs	r2, #100	; 0x64
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	1acb      	subs	r3, r1, r3
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cda:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004cdc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ce8:	441c      	add	r4, r3
 8004cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	1891      	adds	r1, r2, r2
 8004d02:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d04:	415b      	adcs	r3, r3
 8004d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	1851      	adds	r1, r2, r1
 8004d10:	6339      	str	r1, [r7, #48]	; 0x30
 8004d12:	4649      	mov	r1, r9
 8004d14:	414b      	adcs	r3, r1
 8004d16:	637b      	str	r3, [r7, #52]	; 0x34
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d24:	4659      	mov	r1, fp
 8004d26:	00cb      	lsls	r3, r1, #3
 8004d28:	4651      	mov	r1, sl
 8004d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2e:	4651      	mov	r1, sl
 8004d30:	00ca      	lsls	r2, r1, #3
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	4642      	mov	r2, r8
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d40:	464b      	mov	r3, r9
 8004d42:	460a      	mov	r2, r1
 8004d44:	eb42 0303 	adc.w	r3, r2, r3
 8004d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d60:	460b      	mov	r3, r1
 8004d62:	18db      	adds	r3, r3, r3
 8004d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d66:	4613      	mov	r3, r2
 8004d68:	eb42 0303 	adc.w	r3, r2, r3
 8004d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d76:	f7fb feeb 	bl	8000b50 <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004d80:	fba3 1302 	umull	r1, r3, r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	2164      	movs	r1, #100	; 0x64
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	3332      	adds	r3, #50	; 0x32
 8004d92:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <UART_SetConfig+0x2d4>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	f003 0207 	and.w	r2, r3, #7
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4422      	add	r2, r4
 8004da6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da8:	e105      	b.n	8004fb6 <UART_SetConfig+0x4d6>
 8004daa:	bf00      	nop
 8004dac:	40011000 	.word	0x40011000
 8004db0:	40011400 	.word	0x40011400
 8004db4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dca:	4642      	mov	r2, r8
 8004dcc:	464b      	mov	r3, r9
 8004dce:	1891      	adds	r1, r2, r2
 8004dd0:	6239      	str	r1, [r7, #32]
 8004dd2:	415b      	adcs	r3, r3
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dda:	4641      	mov	r1, r8
 8004ddc:	1854      	adds	r4, r2, r1
 8004dde:	4649      	mov	r1, r9
 8004de0:	eb43 0501 	adc.w	r5, r3, r1
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	00eb      	lsls	r3, r5, #3
 8004dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df2:	00e2      	lsls	r2, r4, #3
 8004df4:	4614      	mov	r4, r2
 8004df6:	461d      	mov	r5, r3
 8004df8:	4643      	mov	r3, r8
 8004dfa:	18e3      	adds	r3, r4, r3
 8004dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e00:	464b      	mov	r3, r9
 8004e02:	eb45 0303 	adc.w	r3, r5, r3
 8004e06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e26:	4629      	mov	r1, r5
 8004e28:	008b      	lsls	r3, r1, #2
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e30:	4621      	mov	r1, r4
 8004e32:	008a      	lsls	r2, r1, #2
 8004e34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e38:	f7fb fe8a 	bl	8000b50 <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4b60      	ldr	r3, [pc, #384]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004e42:	fba3 2302 	umull	r2, r3, r3, r2
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	011c      	lsls	r4, r3, #4
 8004e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	464b      	mov	r3, r9
 8004e60:	1891      	adds	r1, r2, r2
 8004e62:	61b9      	str	r1, [r7, #24]
 8004e64:	415b      	adcs	r3, r3
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	1851      	adds	r1, r2, r1
 8004e70:	6139      	str	r1, [r7, #16]
 8004e72:	4649      	mov	r1, r9
 8004e74:	414b      	adcs	r3, r1
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e84:	4659      	mov	r1, fp
 8004e86:	00cb      	lsls	r3, r1, #3
 8004e88:	4651      	mov	r1, sl
 8004e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8e:	4651      	mov	r1, sl
 8004e90:	00ca      	lsls	r2, r1, #3
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	4642      	mov	r2, r8
 8004e9a:	189b      	adds	r3, r3, r2
 8004e9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ea0:	464b      	mov	r3, r9
 8004ea2:	460a      	mov	r2, r1
 8004ea4:	eb42 0303 	adc.w	r3, r2, r3
 8004ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	008b      	lsls	r3, r1, #2
 8004ec8:	4641      	mov	r1, r8
 8004eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ece:	4641      	mov	r1, r8
 8004ed0:	008a      	lsls	r2, r1, #2
 8004ed2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ed6:	f7fb fe3b 	bl	8000b50 <__aeabi_uldivmod>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4b39      	ldr	r3, [pc, #228]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	2164      	movs	r1, #100	; 0x64
 8004ee8:	fb01 f303 	mul.w	r3, r1, r3
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	3332      	adds	r3, #50	; 0x32
 8004ef2:	4a34      	ldr	r2, [pc, #208]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004efe:	441c      	add	r4, r3
 8004f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f04:	2200      	movs	r2, #0
 8004f06:	673b      	str	r3, [r7, #112]	; 0x70
 8004f08:	677a      	str	r2, [r7, #116]	; 0x74
 8004f0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f0e:	4642      	mov	r2, r8
 8004f10:	464b      	mov	r3, r9
 8004f12:	1891      	adds	r1, r2, r2
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	415b      	adcs	r3, r3
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f1e:	4641      	mov	r1, r8
 8004f20:	1851      	adds	r1, r2, r1
 8004f22:	6039      	str	r1, [r7, #0]
 8004f24:	4649      	mov	r1, r9
 8004f26:	414b      	adcs	r3, r1
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f36:	4659      	mov	r1, fp
 8004f38:	00cb      	lsls	r3, r1, #3
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f40:	4651      	mov	r1, sl
 8004f42:	00ca      	lsls	r2, r1, #3
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	4603      	mov	r3, r0
 8004f4a:	4642      	mov	r2, r8
 8004f4c:	189b      	adds	r3, r3, r2
 8004f4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f50:	464b      	mov	r3, r9
 8004f52:	460a      	mov	r2, r1
 8004f54:	eb42 0303 	adc.w	r3, r2, r3
 8004f58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	663b      	str	r3, [r7, #96]	; 0x60
 8004f64:	667a      	str	r2, [r7, #100]	; 0x64
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f72:	4649      	mov	r1, r9
 8004f74:	008b      	lsls	r3, r1, #2
 8004f76:	4641      	mov	r1, r8
 8004f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	008a      	lsls	r2, r1, #2
 8004f80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f84:	f7fb fde4 	bl	8000b50 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	2164      	movs	r1, #100	; 0x64
 8004f96:	fb01 f303 	mul.w	r3, r1, r3
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	3332      	adds	r3, #50	; 0x32
 8004fa0:	4a08      	ldr	r2, [pc, #32]	; (8004fc4 <UART_SetConfig+0x4e4>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	f003 020f 	and.w	r2, r3, #15
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4422      	add	r2, r4
 8004fb4:	609a      	str	r2, [r3, #8]
}
 8004fb6:	bf00      	nop
 8004fb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc2:	bf00      	nop
 8004fc4:	51eb851f 	.word	0x51eb851f

08004fc8 <__errno>:
 8004fc8:	4b01      	ldr	r3, [pc, #4]	; (8004fd0 <__errno+0x8>)
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	2000001c 	.word	0x2000001c

08004fd4 <__libc_init_array>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	4d0d      	ldr	r5, [pc, #52]	; (800500c <__libc_init_array+0x38>)
 8004fd8:	4c0d      	ldr	r4, [pc, #52]	; (8005010 <__libc_init_array+0x3c>)
 8004fda:	1b64      	subs	r4, r4, r5
 8004fdc:	10a4      	asrs	r4, r4, #2
 8004fde:	2600      	movs	r6, #0
 8004fe0:	42a6      	cmp	r6, r4
 8004fe2:	d109      	bne.n	8004ff8 <__libc_init_array+0x24>
 8004fe4:	4d0b      	ldr	r5, [pc, #44]	; (8005014 <__libc_init_array+0x40>)
 8004fe6:	4c0c      	ldr	r4, [pc, #48]	; (8005018 <__libc_init_array+0x44>)
 8004fe8:	f000 f8fe 	bl	80051e8 <_init>
 8004fec:	1b64      	subs	r4, r4, r5
 8004fee:	10a4      	asrs	r4, r4, #2
 8004ff0:	2600      	movs	r6, #0
 8004ff2:	42a6      	cmp	r6, r4
 8004ff4:	d105      	bne.n	8005002 <__libc_init_array+0x2e>
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
 8004ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffc:	4798      	blx	r3
 8004ffe:	3601      	adds	r6, #1
 8005000:	e7ee      	b.n	8004fe0 <__libc_init_array+0xc>
 8005002:	f855 3b04 	ldr.w	r3, [r5], #4
 8005006:	4798      	blx	r3
 8005008:	3601      	adds	r6, #1
 800500a:	e7f2      	b.n	8004ff2 <__libc_init_array+0x1e>
 800500c:	08005220 	.word	0x08005220
 8005010:	08005220 	.word	0x08005220
 8005014:	08005220 	.word	0x08005220
 8005018:	08005224 	.word	0x08005224

0800501c <memset>:
 800501c:	4402      	add	r2, r0
 800501e:	4603      	mov	r3, r0
 8005020:	4293      	cmp	r3, r2
 8005022:	d100      	bne.n	8005026 <memset+0xa>
 8005024:	4770      	bx	lr
 8005026:	f803 1b01 	strb.w	r1, [r3], #1
 800502a:	e7f9      	b.n	8005020 <memset+0x4>

0800502c <sqrt>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	ed2d 8b02 	vpush	{d8}
 8005032:	ec55 4b10 	vmov	r4, r5, d0
 8005036:	f000 f825 	bl	8005084 <__ieee754_sqrt>
 800503a:	4622      	mov	r2, r4
 800503c:	462b      	mov	r3, r5
 800503e:	4620      	mov	r0, r4
 8005040:	4629      	mov	r1, r5
 8005042:	eeb0 8a40 	vmov.f32	s16, s0
 8005046:	eef0 8a60 	vmov.f32	s17, s1
 800504a:	f7fb fd1b 	bl	8000a84 <__aeabi_dcmpun>
 800504e:	b990      	cbnz	r0, 8005076 <sqrt+0x4a>
 8005050:	2200      	movs	r2, #0
 8005052:	2300      	movs	r3, #0
 8005054:	4620      	mov	r0, r4
 8005056:	4629      	mov	r1, r5
 8005058:	f7fb fcec 	bl	8000a34 <__aeabi_dcmplt>
 800505c:	b158      	cbz	r0, 8005076 <sqrt+0x4a>
 800505e:	f7ff ffb3 	bl	8004fc8 <__errno>
 8005062:	2321      	movs	r3, #33	; 0x21
 8005064:	6003      	str	r3, [r0, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	2300      	movs	r3, #0
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	f7fb fb99 	bl	80007a4 <__aeabi_ddiv>
 8005072:	ec41 0b18 	vmov	d8, r0, r1
 8005076:	eeb0 0a48 	vmov.f32	s0, s16
 800507a:	eef0 0a68 	vmov.f32	s1, s17
 800507e:	ecbd 8b02 	vpop	{d8}
 8005082:	bd38      	pop	{r3, r4, r5, pc}

08005084 <__ieee754_sqrt>:
 8005084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005088:	ec55 4b10 	vmov	r4, r5, d0
 800508c:	4e55      	ldr	r6, [pc, #340]	; (80051e4 <__ieee754_sqrt+0x160>)
 800508e:	43ae      	bics	r6, r5
 8005090:	ee10 0a10 	vmov	r0, s0
 8005094:	ee10 3a10 	vmov	r3, s0
 8005098:	462a      	mov	r2, r5
 800509a:	4629      	mov	r1, r5
 800509c:	d110      	bne.n	80050c0 <__ieee754_sqrt+0x3c>
 800509e:	ee10 2a10 	vmov	r2, s0
 80050a2:	462b      	mov	r3, r5
 80050a4:	f7fb fa54 	bl	8000550 <__aeabi_dmul>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4620      	mov	r0, r4
 80050ae:	4629      	mov	r1, r5
 80050b0:	f7fb f898 	bl	80001e4 <__adddf3>
 80050b4:	4604      	mov	r4, r0
 80050b6:	460d      	mov	r5, r1
 80050b8:	ec45 4b10 	vmov	d0, r4, r5
 80050bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	dc10      	bgt.n	80050e6 <__ieee754_sqrt+0x62>
 80050c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80050c8:	4330      	orrs	r0, r6
 80050ca:	d0f5      	beq.n	80050b8 <__ieee754_sqrt+0x34>
 80050cc:	b15d      	cbz	r5, 80050e6 <__ieee754_sqrt+0x62>
 80050ce:	ee10 2a10 	vmov	r2, s0
 80050d2:	462b      	mov	r3, r5
 80050d4:	ee10 0a10 	vmov	r0, s0
 80050d8:	f7fb f882 	bl	80001e0 <__aeabi_dsub>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	f7fb fb60 	bl	80007a4 <__aeabi_ddiv>
 80050e4:	e7e6      	b.n	80050b4 <__ieee754_sqrt+0x30>
 80050e6:	1512      	asrs	r2, r2, #20
 80050e8:	d074      	beq.n	80051d4 <__ieee754_sqrt+0x150>
 80050ea:	07d4      	lsls	r4, r2, #31
 80050ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80050f0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80050f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80050f8:	bf5e      	ittt	pl
 80050fa:	0fda      	lsrpl	r2, r3, #31
 80050fc:	005b      	lslpl	r3, r3, #1
 80050fe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005102:	2400      	movs	r4, #0
 8005104:	0fda      	lsrs	r2, r3, #31
 8005106:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800510a:	107f      	asrs	r7, r7, #1
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	2516      	movs	r5, #22
 8005110:	4620      	mov	r0, r4
 8005112:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005116:	1886      	adds	r6, r0, r2
 8005118:	428e      	cmp	r6, r1
 800511a:	bfde      	ittt	le
 800511c:	1b89      	suble	r1, r1, r6
 800511e:	18b0      	addle	r0, r6, r2
 8005120:	18a4      	addle	r4, r4, r2
 8005122:	0049      	lsls	r1, r1, #1
 8005124:	3d01      	subs	r5, #1
 8005126:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800512a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800512e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005132:	d1f0      	bne.n	8005116 <__ieee754_sqrt+0x92>
 8005134:	462a      	mov	r2, r5
 8005136:	f04f 0e20 	mov.w	lr, #32
 800513a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800513e:	4281      	cmp	r1, r0
 8005140:	eb06 0c05 	add.w	ip, r6, r5
 8005144:	dc02      	bgt.n	800514c <__ieee754_sqrt+0xc8>
 8005146:	d113      	bne.n	8005170 <__ieee754_sqrt+0xec>
 8005148:	459c      	cmp	ip, r3
 800514a:	d811      	bhi.n	8005170 <__ieee754_sqrt+0xec>
 800514c:	f1bc 0f00 	cmp.w	ip, #0
 8005150:	eb0c 0506 	add.w	r5, ip, r6
 8005154:	da43      	bge.n	80051de <__ieee754_sqrt+0x15a>
 8005156:	2d00      	cmp	r5, #0
 8005158:	db41      	blt.n	80051de <__ieee754_sqrt+0x15a>
 800515a:	f100 0801 	add.w	r8, r0, #1
 800515e:	1a09      	subs	r1, r1, r0
 8005160:	459c      	cmp	ip, r3
 8005162:	bf88      	it	hi
 8005164:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005168:	eba3 030c 	sub.w	r3, r3, ip
 800516c:	4432      	add	r2, r6
 800516e:	4640      	mov	r0, r8
 8005170:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005174:	f1be 0e01 	subs.w	lr, lr, #1
 8005178:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800517c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005180:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005184:	d1db      	bne.n	800513e <__ieee754_sqrt+0xba>
 8005186:	430b      	orrs	r3, r1
 8005188:	d006      	beq.n	8005198 <__ieee754_sqrt+0x114>
 800518a:	1c50      	adds	r0, r2, #1
 800518c:	bf13      	iteet	ne
 800518e:	3201      	addne	r2, #1
 8005190:	3401      	addeq	r4, #1
 8005192:	4672      	moveq	r2, lr
 8005194:	f022 0201 	bicne.w	r2, r2, #1
 8005198:	1063      	asrs	r3, r4, #1
 800519a:	0852      	lsrs	r2, r2, #1
 800519c:	07e1      	lsls	r1, r4, #31
 800519e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80051a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80051a6:	bf48      	it	mi
 80051a8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80051ac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80051b0:	4614      	mov	r4, r2
 80051b2:	e781      	b.n	80050b8 <__ieee754_sqrt+0x34>
 80051b4:	0ad9      	lsrs	r1, r3, #11
 80051b6:	3815      	subs	r0, #21
 80051b8:	055b      	lsls	r3, r3, #21
 80051ba:	2900      	cmp	r1, #0
 80051bc:	d0fa      	beq.n	80051b4 <__ieee754_sqrt+0x130>
 80051be:	02cd      	lsls	r5, r1, #11
 80051c0:	d50a      	bpl.n	80051d8 <__ieee754_sqrt+0x154>
 80051c2:	f1c2 0420 	rsb	r4, r2, #32
 80051c6:	fa23 f404 	lsr.w	r4, r3, r4
 80051ca:	1e55      	subs	r5, r2, #1
 80051cc:	4093      	lsls	r3, r2
 80051ce:	4321      	orrs	r1, r4
 80051d0:	1b42      	subs	r2, r0, r5
 80051d2:	e78a      	b.n	80050ea <__ieee754_sqrt+0x66>
 80051d4:	4610      	mov	r0, r2
 80051d6:	e7f0      	b.n	80051ba <__ieee754_sqrt+0x136>
 80051d8:	0049      	lsls	r1, r1, #1
 80051da:	3201      	adds	r2, #1
 80051dc:	e7ef      	b.n	80051be <__ieee754_sqrt+0x13a>
 80051de:	4680      	mov	r8, r0
 80051e0:	e7bd      	b.n	800515e <__ieee754_sqrt+0xda>
 80051e2:	bf00      	nop
 80051e4:	7ff00000 	.word	0x7ff00000

080051e8 <_init>:
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	bf00      	nop
 80051ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ee:	bc08      	pop	{r3}
 80051f0:	469e      	mov	lr, r3
 80051f2:	4770      	bx	lr

080051f4 <_fini>:
 80051f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f6:	bf00      	nop
 80051f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fa:	bc08      	pop	{r3}
 80051fc:	469e      	mov	lr, r3
 80051fe:	4770      	bx	lr
