
PID_project22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005268  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005418  08005418  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005420  08005420  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005420  08005420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000080  080054a4  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  080054a4  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e929  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca8  00000000  00000000  0002e9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00030680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00031380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017aee  00000000  00000000  00031fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebda  00000000  00000000  00049ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a5d6  00000000  00000000  000586a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2c76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b0  00000000  00000000  000f2cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080053e8 	.word	0x080053e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	080053e8 	.word	0x080053e8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	C = ComputeLowpassConstant(1000, 5000);
 8000e9a:	f241 3188 	movw	r1, #5000	; 0x1388
 8000e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea2:	f001 fb17 	bl	80024d4 <ComputeLowpassConstant>
 8000ea6:	eef0 7a40 	vmov.f32	s15, s0
 8000eaa:	4b4a      	ldr	r3, [pc, #296]	; (8000fd4 <main+0x140>)
 8000eac:	edc3 7a00 	vstr	s15, [r3]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eb0:	f001 fb5a 	bl	8002568 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000eb4:	f000 f8aa 	bl	800100c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000eb8:	f000 fb22 	bl	8001500 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ebc:	f000 faf6 	bl	80014ac <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8000ec0:	f000 fa52 	bl	8001368 <MX_TIM3_Init>
	MX_TIM1_Init();
 8000ec4:	f000 f95c 	bl	8001180 <MX_TIM1_Init>
	MX_TIM5_Init();
 8000ec8:	f000 faa2 	bl	8001410 <MX_TIM5_Init>
	MX_ADC1_Init();
 8000ecc:	f000 f906 	bl	80010dc <MX_ADC1_Init>
	MX_TIM2_Init();
 8000ed0:	f000 f9f6 	bl	80012c0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim1);
 8000ed4:	4840      	ldr	r0, [pc, #256]	; (8000fd8 <main+0x144>)
 8000ed6:	f002 fdc3 	bl	8003a60 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000eda:	2100      	movs	r1, #0
 8000edc:	483e      	ldr	r0, [pc, #248]	; (8000fd8 <main+0x144>)
 8000ede:	f002 fe73 	bl	8003bc8 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	483d      	ldr	r0, [pc, #244]	; (8000fdc <main+0x148>)
 8000ee6:	f002 ffc5 	bl	8003e74 <HAL_TIM_Encoder_Start>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		static uint32_t timestamp = 0;
		int64_t currentTime = micros();
 8000eea:	f001 f8d5 	bl	8002098 <micros>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	e9c7 2300 	strd	r2, r3, [r7]
		if (HAL_GetTick() > timestamp) {
 8000ef6:	f001 fb9d 	bl	8002634 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	4b38      	ldr	r3, [pc, #224]	; (8000fe0 <main+0x14c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d947      	bls.n	8000f94 <main+0x100>
			timestamp = currentTime + 100;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	3364      	adds	r3, #100	; 0x64
 8000f08:	4a35      	ldr	r2, [pc, #212]	; (8000fe0 <main+0x14c>)
 8000f0a:	6013      	str	r3, [r2, #0]
			dt = 0.0001;
 8000f0c:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <main+0x150>)
 8000f0e:	4a36      	ldr	r2, [pc, #216]	; (8000fe8 <main+0x154>)
 8000f10:	601a      	str	r2, [r3, #0]
			distance();
 8000f12:	f000 fc27 	bl	8001764 <distance>
			Trajectory();
 8000f16:	f000 fc7b 	bl	8001810 <Trajectory>
			//velocity_check = (QEIReadRaw_now - QEIReadRaw_past)/dt;
////		  PositionControlPID();
			QEIReadRaw_now = __HAL_TIM_GET_COUNTER(&htim2);
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <main+0x148>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b32      	ldr	r3, [pc, #200]	; (8000fec <main+0x158>)
 8000f24:	601a      	str	r2, [r3, #0]
			VelocityControlPID();
 8000f26:	f000 fb6b 	bl	8001600 <VelocityControlPID>
			velocity_check = (QEIReadRaw_now - QEIReadRaw_past)/dt;
 8000f2a:	4b30      	ldr	r3, [pc, #192]	; (8000fec <main+0x158>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <main+0x15c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <main+0x150>)
 8000f3e:	ed93 7a00 	vldr	s14, [r3]
 8000f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <main+0x160>)
 8000f48:	edc3 7a00 	vstr	s15, [r3]
			velocity_check_filter = (C * velocity_check) + ((1-C)*velocity_check_filter);
 8000f4c:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <main+0x140>)
 8000f4e:	ed93 7a00 	vldr	s14, [r3]
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <main+0x160>)
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <main+0x140>)
 8000f5e:	edd3 7a00 	vldr	s15, [r3]
 8000f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f66:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <main+0x164>)
 8000f6c:	edd3 7a00 	vldr	s15, [r3]
 8000f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <main+0x164>)
 8000f7a:	edc3 7a00 	vstr	s15, [r3]
			motor(voltage);
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <main+0x168>)
 8000f80:	edd3 7a00 	vldr	s15, [r3]
 8000f84:	eeb0 0a67 	vmov.f32	s0, s15
 8000f88:	f000 fff8 	bl	8001f7c <motor>
			QEIReadRaw_past = QEIReadRaw_now;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <main+0x158>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <main+0x15c>)
 8000f92:	6013      	str	r3, [r2, #0]

		}

		// auto run
		static uint32_t timestamp2 = 0;
		if (HAL_GetTick() > timestamp2) {
 8000f94:	f001 fb4e 	bl	8002634 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <main+0x16c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d9a3      	bls.n	8000eea <main+0x56>
			timestamp2 = HAL_GetTick() + 1400;
 8000fa2:	f001 fb47 	bl	8002634 <HAL_GetTick>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f503 63af 	add.w	r3, r3, #1400	; 0x578
 8000fac:	4a14      	ldr	r2, [pc, #80]	; (8001000 <main+0x16c>)
 8000fae:	6013      	str	r3, [r2, #0]
			if(!setpoint_now)
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <main+0x170>)
 8000fb2:	edd3 7a00 	vldr	s15, [r3]
 8000fb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d103      	bne.n	8000fc8 <main+0x134>
			{
				setpoint_now = 20000;
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <main+0x170>)
 8000fc2:	4a11      	ldr	r2, [pc, #68]	; (8001008 <main+0x174>)
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e790      	b.n	8000eea <main+0x56>
			}
			else
			{
				setpoint_now = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <main+0x170>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	while (1) {
 8000fd0:	e78b      	b.n	8000eea <main+0x56>
 8000fd2:	bf00      	nop
 8000fd4:	200002c8 	.word	0x200002c8
 8000fd8:	200000e4 	.word	0x200000e4
 8000fdc:	2000012c 	.word	0x2000012c
 8000fe0:	200002d8 	.word	0x200002d8
 8000fe4:	20000248 	.word	0x20000248
 8000fe8:	38d1b717 	.word	0x38d1b717
 8000fec:	200002cc 	.word	0x200002cc
 8000ff0:	200002d0 	.word	0x200002d0
 8000ff4:	200002c0 	.word	0x200002c0
 8000ff8:	200002c4 	.word	0x200002c4
 8000ffc:	200002d4 	.word	0x200002d4
 8001000:	200002dc 	.word	0x200002dc
 8001004:	200002bc 	.word	0x200002bc
 8001008:	469c4000 	.word	0x469c4000

0800100c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b094      	sub	sp, #80	; 0x50
 8001010:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	2230      	movs	r2, #48	; 0x30
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f004 f8fe 	bl	800521c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <SystemClock_Config+0xc8>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	4a26      	ldr	r2, [pc, #152]	; (80010d4 <SystemClock_Config+0xc8>)
 800103a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <SystemClock_Config+0xc8>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <SystemClock_Config+0xcc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <SystemClock_Config+0xcc>)
 8001056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <SystemClock_Config+0xcc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001068:	2302      	movs	r3, #2
 800106a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001070:	2310      	movs	r3, #16
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001074:	2302      	movs	r3, #2
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001078:	2300      	movs	r3, #0
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800107c:	2308      	movs	r3, #8
 800107e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001080:	2364      	movs	r3, #100	; 0x64
 8001082:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001084:	2302      	movs	r3, #2
 8001086:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001088:	2304      	movs	r3, #4
 800108a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800108c:	f107 0320 	add.w	r3, r7, #32
 8001090:	4618      	mov	r0, r3
 8001092:	f001 fffd 	bl	8003090 <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x94>
		Error_Handler();
 800109c:	f001 f816 	bl	80020cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010a0:	230f      	movs	r3, #15
 80010a2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a4:	2302      	movs	r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	2103      	movs	r1, #3
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 fa5f 	bl	8003580 <HAL_RCC_ClockConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0xc0>
		Error_Handler();
 80010c8:	f001 f800 	bl	80020cc <Error_Handler>
	}
}
 80010cc:	bf00      	nop
 80010ce:	3750      	adds	r7, #80	; 0x50
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40007000 	.word	0x40007000

080010dc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010e2:	463b      	mov	r3, r7
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <MX_ADC1_Init+0x98>)
 80010f0:	4a21      	ldr	r2, [pc, #132]	; (8001178 <MX_ADC1_Init+0x9c>)
 80010f2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_ADC1_Init+0x98>)
 80010f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010fa:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <MX_ADC1_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_ADC1_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_ADC1_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MX_ADC1_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_ADC1_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_ADC1_Init+0x98>)
 800111e:	4a17      	ldr	r2, [pc, #92]	; (800117c <MX_ADC1_Init+0xa0>)
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_ADC1_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_ADC1_Init+0x98>)
 800112a:	2201      	movs	r2, #1
 800112c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_ADC1_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_ADC1_Init+0x98>)
 8001138:	2201      	movs	r2, #1
 800113a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <MX_ADC1_Init+0x98>)
 800113e:	f001 fa85 	bl	800264c <HAL_ADC_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC1_Init+0x70>
		Error_Handler();
 8001148:	f000 ffc0 	bl	80020cc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 800114c:	230a      	movs	r3, #10
 800114e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001150:	2301      	movs	r3, #1
 8001152:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001158:	463b      	mov	r3, r7
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_ADC1_Init+0x98>)
 800115e:	f001 fab9 	bl	80026d4 <HAL_ADC_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC1_Init+0x90>
		Error_Handler();
 8001168:	f000 ffb0 	bl	80020cc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000009c 	.word	0x2000009c
 8001178:	40012000 	.word	0x40012000
 800117c:	0f000001 	.word	0x0f000001

08001180 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b096      	sub	sp, #88	; 0x58
 8001184:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001186:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001194:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800119e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
 80011ae:	615a      	str	r2, [r3, #20]
 80011b0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2220      	movs	r2, #32
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 f82f 	bl	800521c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80011be:	4b3e      	ldr	r3, [pc, #248]	; (80012b8 <MX_TIM1_Init+0x138>)
 80011c0:	4a3e      	ldr	r2, [pc, #248]	; (80012bc <MX_TIM1_Init+0x13c>)
 80011c2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 125 - 1;
 80011c4:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <MX_TIM1_Init+0x138>)
 80011c6:	227c      	movs	r2, #124	; 0x7c
 80011c8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <MX_TIM1_Init+0x138>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 80011d0:	4b39      	ldr	r3, [pc, #228]	; (80012b8 <MX_TIM1_Init+0x138>)
 80011d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <MX_TIM1_Init+0x138>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011de:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <MX_TIM1_Init+0x138>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e4:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <MX_TIM1_Init+0x138>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80011ea:	4833      	ldr	r0, [pc, #204]	; (80012b8 <MX_TIM1_Init+0x138>)
 80011ec:	f002 fbe8 	bl	80039c0 <HAL_TIM_Base_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x7a>
		Error_Handler();
 80011f6:	f000 ff69 	bl	80020cc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001200:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001204:	4619      	mov	r1, r3
 8001206:	482c      	ldr	r0, [pc, #176]	; (80012b8 <MX_TIM1_Init+0x138>)
 8001208:	f003 f88c 	bl	8004324 <HAL_TIM_ConfigClockSource>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0x96>
		Error_Handler();
 8001212:	f000 ff5b 	bl	80020cc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001216:	4828      	ldr	r0, [pc, #160]	; (80012b8 <MX_TIM1_Init+0x138>)
 8001218:	f002 fc7c 	bl	8003b14 <HAL_TIM_PWM_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001222:	f000 ff53 	bl	80020cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800122e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001232:	4619      	mov	r1, r3
 8001234:	4820      	ldr	r0, [pc, #128]	; (80012b8 <MX_TIM1_Init+0x138>)
 8001236:	f003 fc31 	bl	8004a9c <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001240:	f000 ff44 	bl	80020cc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001244:	2360      	movs	r3, #96	; 0x60
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001250:	2300      	movs	r3, #0
 8001252:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <MX_TIM1_Init+0x138>)
 800126a:	f002 ff99 	bl	80041a0 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8001274:	f000 ff2a 	bl	80020cc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800128c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001290:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <MX_TIM1_Init+0x138>)
 800129c:	f003 fc6c 	bl	8004b78 <HAL_TIMEx_ConfigBreakDeadTime>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 80012a6:	f000 ff11 	bl	80020cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <MX_TIM1_Init+0x138>)
 80012ac:	f001 f840 	bl	8002330 <HAL_TIM_MspPostInit>

}
 80012b0:	bf00      	nop
 80012b2:	3758      	adds	r7, #88	; 0x58
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200000e4 	.word	0x200000e4
 80012bc:	40010000 	.word	0x40010000

080012c0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	; 0x30
 80012c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2224      	movs	r2, #36	; 0x24
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 ffa4 	bl	800521c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <MX_TIM2_Init+0xa4>)
 80012de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <MX_TIM2_Init+0xa4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <MX_TIM2_Init+0xa4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_TIM2_Init+0xa4>)
 80012f2:	f04f 32ff 	mov.w	r2, #4294967295
 80012f6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_TIM2_Init+0xa4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <MX_TIM2_Init+0xa4>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001304:	2303      	movs	r3, #3
 8001306:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800130c:	2301      	movs	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800131c:	2301      	movs	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4619      	mov	r1, r3
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <MX_TIM2_Init+0xa4>)
 8001330:	f002 fcfa 	bl	8003d28 <HAL_TIM_Encoder_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM2_Init+0x7e>
		Error_Handler();
 800133a:	f000 fec7 	bl	80020cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4619      	mov	r1, r3
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <MX_TIM2_Init+0xa4>)
 800134c:	f003 fba6 	bl	8004a9c <HAL_TIMEx_MasterConfigSynchronization>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8001356:	f000 feb9 	bl	80020cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	3730      	adds	r7, #48	; 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000012c 	.word	0x2000012c

08001368 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	; 0x30
 800136c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2224      	movs	r2, #36	; 0x24
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f003 ff50 	bl	800521c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001384:	4b20      	ldr	r3, [pc, #128]	; (8001408 <MX_TIM3_Init+0xa0>)
 8001386:	4a21      	ldr	r2, [pc, #132]	; (800140c <MX_TIM3_Init+0xa4>)
 8001388:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <MX_TIM3_Init+0xa0>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <MX_TIM3_Init+0xa0>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3071;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <MX_TIM3_Init+0xa0>)
 8001398:	f640 32ff 	movw	r2, #3071	; 0xbff
 800139c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_TIM3_Init+0xa0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_TIM3_Init+0xa0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013aa:	2303      	movs	r3, #3
 80013ac:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013b2:	2301      	movs	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013c2:	2301      	movs	r3, #1
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4619      	mov	r1, r3
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <MX_TIM3_Init+0xa0>)
 80013d6:	f002 fca7 	bl	8003d28 <HAL_TIM_Encoder_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0x7c>
		Error_Handler();
 80013e0:	f000 fe74 	bl	80020cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_TIM3_Init+0xa0>)
 80013f2:	f003 fb53 	bl	8004a9c <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80013fc:	f000 fe66 	bl	80020cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3730      	adds	r7, #48	; 0x30
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000174 	.word	0x20000174
 800140c:	40000400 	.word	0x40000400

08001410 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_TIM5_Init+0x94>)
 800142e:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <MX_TIM5_Init+0x98>)
 8001430:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 83;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_TIM5_Init+0x94>)
 8001434:	2253      	movs	r2, #83	; 0x53
 8001436:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_TIM5_Init+0x94>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_TIM5_Init+0x94>)
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_TIM5_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_TIM5_Init+0x94>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <MX_TIM5_Init+0x94>)
 8001454:	f002 fab4 	bl	80039c0 <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM5_Init+0x52>
		Error_Handler();
 800145e:	f000 fe35 	bl	80020cc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001466:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <MX_TIM5_Init+0x94>)
 8001470:	f002 ff58 	bl	8004324 <HAL_TIM_ConfigClockSource>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM5_Init+0x6e>
		Error_Handler();
 800147a:	f000 fe27 	bl	80020cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <MX_TIM5_Init+0x94>)
 800148c:	f003 fb06 	bl	8004a9c <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001496:	f000 fe19 	bl	80020cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200001bc 	.word	0x200001bc
 80014a8:	40000c00 	.word	0x40000c00

080014ac <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_USART2_UART_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014e4:	f003 fbae 	bl	8004c44 <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80014ee:	f000 fded 	bl	80020cc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000204 	.word	0x20000204
 80014fc:	40004400 	.word	0x40004400

08001500 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <MX_GPIO_Init+0xf0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a34      	ldr	r2, [pc, #208]	; (80015f0 <MX_GPIO_Init+0xf0>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <MX_GPIO_Init+0xf0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <MX_GPIO_Init+0xf0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a2d      	ldr	r2, [pc, #180]	; (80015f0 <MX_GPIO_Init+0xf0>)
 800153c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <MX_GPIO_Init+0xf0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <MX_GPIO_Init+0xf0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a26      	ldr	r2, [pc, #152]	; (80015f0 <MX_GPIO_Init+0xf0>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <MX_GPIO_Init+0xf0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_GPIO_Init+0xf0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <MX_GPIO_Init+0xf0>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_GPIO_Init+0xf0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_11, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 6102 	mov.w	r1, #2080	; 0x820
 800158c:	4819      	ldr	r0, [pc, #100]	; (80015f4 <MX_GPIO_Init+0xf4>)
 800158e:	f001 fd65 	bl	800305c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001592:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001596:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001598:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800159c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4813      	ldr	r0, [pc, #76]	; (80015f8 <MX_GPIO_Init+0xf8>)
 80015aa:	f001 fbd3 	bl	8002d54 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80015ae:	230c      	movs	r3, #12
 80015b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <MX_GPIO_Init+0xf8>)
 80015c4:	f001 fbc6 	bl	8002d54 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA11 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_11;
 80015c8:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80015cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_GPIO_Init+0xf4>)
 80015e2:	f001 fbb7 	bl	8002d54 <HAL_GPIO_Init>

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40020800 	.word	0x40020800
 80015fc:	00000000 	.word	0x00000000

08001600 <VelocityControlPID>:

	// PID-position
	PID_position_total = P_position_term + I_position_term + D_position_term;
}

void VelocityControlPID() {
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	af00      	add	r7, sp, #0
	error_velocity = velocity_setpoint - QEIReadRaw_now;
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <VelocityControlPID+0x130>)
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	4b4a      	ldr	r3, [pc, #296]	; (8001734 <VelocityControlPID+0x134>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	ee07 3a90 	vmov	s15, r3
 8001612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	4b47      	ldr	r3, [pc, #284]	; (8001738 <VelocityControlPID+0x138>)
 800161c:	edc3 7a00 	vstr	s15, [r3]
	//+ PID_position_total

	// P-term-velocity
	P_velocity_term = Kp_velocity * error_velocity;
 8001620:	4b46      	ldr	r3, [pc, #280]	; (800173c <VelocityControlPID+0x13c>)
 8001622:	ed93 7a00 	vldr	s14, [r3]
 8001626:	4b44      	ldr	r3, [pc, #272]	; (8001738 <VelocityControlPID+0x138>)
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	4b43      	ldr	r3, [pc, #268]	; (8001740 <VelocityControlPID+0x140>)
 8001632:	edc3 7a00 	vstr	s15, [r3]

	// I-term-velocity
	if (((setpoint_now - 0.1) < QEIReadRaw_now)
 8001636:	4b43      	ldr	r3, [pc, #268]	; (8001744 <VelocityControlPID+0x144>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff30 	bl	80004a0 <__aeabi_f2d>
 8001640:	a339      	add	r3, pc, #228	; (adr r3, 8001728 <VelocityControlPID+0x128>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe fdcb 	bl	80001e0 <__aeabi_dsub>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4614      	mov	r4, r2
 8001650:	461d      	mov	r5, r3
 8001652:	4b38      	ldr	r3, [pc, #224]	; (8001734 <VelocityControlPID+0x134>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff10 	bl	800047c <__aeabi_i2d>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4620      	mov	r0, r4
 8001662:	4629      	mov	r1, r5
 8001664:	f7ff f9e6 	bl	8000a34 <__aeabi_dcmplt>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d01e      	beq.n	80016ac <VelocityControlPID+0xac>
			&& (QEIReadRaw_now < (setpoint_now + 0.1)))
 800166e:	4b31      	ldr	r3, [pc, #196]	; (8001734 <VelocityControlPID+0x134>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff02 	bl	800047c <__aeabi_i2d>
 8001678:	4604      	mov	r4, r0
 800167a:	460d      	mov	r5, r1
 800167c:	4b31      	ldr	r3, [pc, #196]	; (8001744 <VelocityControlPID+0x144>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff0d 	bl	80004a0 <__aeabi_f2d>
 8001686:	a328      	add	r3, pc, #160	; (adr r3, 8001728 <VelocityControlPID+0x128>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe fdaa 	bl	80001e4 <__adddf3>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4620      	mov	r0, r4
 8001696:	4629      	mov	r1, r5
 8001698:	f7ff f9cc 	bl	8000a34 <__aeabi_dcmplt>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d004      	beq.n	80016ac <VelocityControlPID+0xac>
			//(((velocity_end - 0.1) < velocity_now) && (velocity_now < (velocity_end + 0.1))&& ((time_trajectory - 0.01) < time_total) && (time_total < (time_trajectory + 0.01)))
			{
		integrate_velocity = 0;
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <VelocityControlPID+0x148>)
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e00f      	b.n	80016cc <VelocityControlPID+0xcc>
	} else {
		integrate_velocity += (error_velocity * dt);
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <VelocityControlPID+0x138>)
 80016ae:	ed93 7a00 	vldr	s14, [r3]
 80016b2:	4b26      	ldr	r3, [pc, #152]	; (800174c <VelocityControlPID+0x14c>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <VelocityControlPID+0x148>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <VelocityControlPID+0x148>)
 80016c8:	edc3 7a00 	vstr	s15, [r3]
	}
	I_velocity_term = Ki_velocity * integrate_velocity;
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <VelocityControlPID+0x150>)
 80016ce:	ed93 7a00 	vldr	s14, [r3]
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <VelocityControlPID+0x148>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <VelocityControlPID+0x154>)
 80016de:	edc3 7a00 	vstr	s15, [r3]

	// D-term-velocity
	D_velocity_term = Kd_velocity * error_velocity / dt;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <VelocityControlPID+0x158>)
 80016e4:	ed93 7a00 	vldr	s14, [r3]
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <VelocityControlPID+0x138>)
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	ee67 6a27 	vmul.f32	s13, s14, s15
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <VelocityControlPID+0x14c>)
 80016f4:	ed93 7a00 	vldr	s14, [r3]
 80016f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <VelocityControlPID+0x15c>)
 80016fe:	edc3 7a00 	vstr	s15, [r3]

	// PID-velocity
	voltage = P_velocity_term + I_velocity_term + D_velocity_term;
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <VelocityControlPID+0x140>)
 8001704:	ed93 7a00 	vldr	s14, [r3]
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <VelocityControlPID+0x154>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <VelocityControlPID+0x15c>)
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <VelocityControlPID+0x160>)
 800171e:	edc3 7a00 	vstr	s15, [r3]
}
 8001722:	bf00      	nop
 8001724:	bdb0      	pop	{r4, r5, r7, pc}
 8001726:	bf00      	nop
 8001728:	9999999a 	.word	0x9999999a
 800172c:	3fb99999 	.word	0x3fb99999
 8001730:	20000278 	.word	0x20000278
 8001734:	200002cc 	.word	0x200002cc
 8001738:	20000270 	.word	0x20000270
 800173c:	20000000 	.word	0x20000000
 8001740:	2000025c 	.word	0x2000025c
 8001744:	200002bc 	.word	0x200002bc
 8001748:	20000274 	.word	0x20000274
 800174c:	20000248 	.word	0x20000248
 8001750:	20000268 	.word	0x20000268
 8001754:	20000260 	.word	0x20000260
 8001758:	2000026c 	.word	0x2000026c
 800175c:	20000264 	.word	0x20000264
 8001760:	200002d4 	.word	0x200002d4

08001764 <distance>:

void distance()
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
	if (setpoint_past != setpoint_now)
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <distance+0x98>)
 800176a:	ed93 7a00 	vldr	s14, [r3]
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <distance+0x9c>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	eeb4 7a67 	vcmp.f32	s14, s15
 8001778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177c:	d034      	beq.n	80017e8 <distance+0x84>
	{
		distance_one_travel = setpoint_now - setpoint_past;
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <distance+0x9c>)
 8001780:	ed93 7a00 	vldr	s14, [r3]
 8001784:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <distance+0x98>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <distance+0xa0>)
 8001790:	edc3 7a00 	vstr	s15, [r3]
		setpoint_past = setpoint_now;
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <distance+0x9c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a18      	ldr	r2, [pc, #96]	; (80017fc <distance+0x98>)
 800179a:	6013      	str	r3, [r2, #0]
		if (distance_one_travel >= 0)
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <distance+0xa0>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017aa:	db07      	blt.n	80017bc <distance+0x58>
		{
			sign_of_distance = 1;
 80017ac:	4b16      	ldr	r3, [pc, #88]	; (8001808 <distance+0xa4>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
			abs_distance_one_travel = distance_one_travel;
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <distance+0xa0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <distance+0xa8>)
 80017b8:	6013      	str	r3, [r2, #0]
	}
	else
	{
		setpoint_past = setpoint_past;
	}
}
 80017ba:	e019      	b.n	80017f0 <distance+0x8c>
		else if (distance_one_travel < 0)
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <distance+0xa0>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	d400      	bmi.n	80017ce <distance+0x6a>
}
 80017cc:	e010      	b.n	80017f0 <distance+0x8c>
			sign_of_distance = -1;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <distance+0xa4>)
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	601a      	str	r2, [r3, #0]
			abs_distance_one_travel = distance_one_travel * (-1);
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <distance+0xa0>)
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	eef1 7a67 	vneg.f32	s15, s15
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <distance+0xa8>)
 80017e2:	edc3 7a00 	vstr	s15, [r3]
}
 80017e6:	e003      	b.n	80017f0 <distance+0x8c>
		setpoint_past = setpoint_past;
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <distance+0x98>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a03      	ldr	r2, [pc, #12]	; (80017fc <distance+0x98>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	200002b8 	.word	0x200002b8
 8001800:	200002bc 	.word	0x200002bc
 8001804:	2000028c 	.word	0x2000028c
 8001808:	200002b4 	.word	0x200002b4
 800180c:	20000290 	.word	0x20000290

08001810 <Trajectory>:

void Trajectory()
{
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	af00      	add	r7, sp, #0
	if (abs_distance_one_travel > ((velocity_max * velocity_max) / acceleration_max))
 8001814:	4b98      	ldr	r3, [pc, #608]	; (8001a78 <Trajectory+0x268>)
 8001816:	ed93 7a00 	vldr	s14, [r3]
 800181a:	4b97      	ldr	r3, [pc, #604]	; (8001a78 <Trajectory+0x268>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001824:	4b95      	ldr	r3, [pc, #596]	; (8001a7c <Trajectory+0x26c>)
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800182e:	4b94      	ldr	r3, [pc, #592]	; (8001a80 <Trajectory+0x270>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	d561      	bpl.n	8001902 <Trajectory+0xf2>
	{
			time_acc = ((velocity_max - 0) / acceleration_max);
 800183e:	4b8e      	ldr	r3, [pc, #568]	; (8001a78 <Trajectory+0x268>)
 8001840:	edd3 6a00 	vldr	s13, [r3]
 8001844:	4b8d      	ldr	r3, [pc, #564]	; (8001a7c <Trajectory+0x26c>)
 8001846:	ed93 7a00 	vldr	s14, [r3]
 800184a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184e:	4b8d      	ldr	r3, [pc, #564]	; (8001a84 <Trajectory+0x274>)
 8001850:	edc3 7a00 	vstr	s15, [r3]
			time_const = ((1.0 / velocity_max)
 8001854:	4b88      	ldr	r3, [pc, #544]	; (8001a78 <Trajectory+0x268>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe21 	bl	80004a0 <__aeabi_f2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	4988      	ldr	r1, [pc, #544]	; (8001a88 <Trajectory+0x278>)
 8001868:	f7fe ff9c 	bl	80007a4 <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4614      	mov	r4, r2
 8001872:	461d      	mov	r5, r3
					* ((abs_distance_one_travel)
							- ((velocity_max * velocity_max) / acceleration_max)));
 8001874:	4b82      	ldr	r3, [pc, #520]	; (8001a80 <Trajectory+0x270>)
 8001876:	ed93 7a00 	vldr	s14, [r3]
 800187a:	4b7f      	ldr	r3, [pc, #508]	; (8001a78 <Trajectory+0x268>)
 800187c:	edd3 6a00 	vldr	s13, [r3]
 8001880:	4b7d      	ldr	r3, [pc, #500]	; (8001a78 <Trajectory+0x268>)
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800188a:	4b7c      	ldr	r3, [pc, #496]	; (8001a7c <Trajectory+0x26c>)
 800188c:	edd3 6a00 	vldr	s13, [r3]
 8001890:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001894:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001898:	ee17 0a90 	vmov	r0, s15
 800189c:	f7fe fe00 	bl	80004a0 <__aeabi_f2d>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
					* ((abs_distance_one_travel)
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7fe fe52 	bl	8000550 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f91c 	bl	8000af0 <__aeabi_d2f>
 80018b8:	4603      	mov	r3, r0
			time_const = ((1.0 / velocity_max)
 80018ba:	4a74      	ldr	r2, [pc, #464]	; (8001a8c <Trajectory+0x27c>)
 80018bc:	6013      	str	r3, [r2, #0]
			time_dec = ((0 - velocity_max) / ((-1) * acceleration_max));
 80018be:	4b6e      	ldr	r3, [pc, #440]	; (8001a78 <Trajectory+0x268>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001a90 <Trajectory+0x280>
 80018c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018cc:	eef1 6a67 	vneg.f32	s13, s15
 80018d0:	4b6a      	ldr	r3, [pc, #424]	; (8001a7c <Trajectory+0x26c>)
 80018d2:	ed93 7a00 	vldr	s14, [r3]
 80018d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018da:	4b6e      	ldr	r3, [pc, #440]	; (8001a94 <Trajectory+0x284>)
 80018dc:	edc3 7a00 	vstr	s15, [r3]
			time_total = time_acc + time_const + time_dec;
 80018e0:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <Trajectory+0x274>)
 80018e2:	ed93 7a00 	vldr	s14, [r3]
 80018e6:	4b69      	ldr	r3, [pc, #420]	; (8001a8c <Trajectory+0x27c>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018f0:	4b68      	ldr	r3, [pc, #416]	; (8001a94 <Trajectory+0x284>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fa:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <Trajectory+0x288>)
 80018fc:	edc3 7a00 	vstr	s15, [r3]
 8001900:	e02d      	b.n	800195e <Trajectory+0x14e>
	}
	else
	{
		time_acc = sqrt(abs_distance_one_travel / (acceleration_max));
 8001902:	4b5f      	ldr	r3, [pc, #380]	; (8001a80 <Trajectory+0x270>)
 8001904:	ed93 7a00 	vldr	s14, [r3]
 8001908:	4b5c      	ldr	r3, [pc, #368]	; (8001a7c <Trajectory+0x26c>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001912:	ee16 0a90 	vmov	r0, s13
 8001916:	f7fe fdc3 	bl	80004a0 <__aeabi_f2d>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	ec43 2b10 	vmov	d0, r2, r3
 8001922:	f003 fc83 	bl	800522c <sqrt>
 8001926:	ec53 2b10 	vmov	r2, r3, d0
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff f8df 	bl	8000af0 <__aeabi_d2f>
 8001932:	4603      	mov	r3, r0
 8001934:	4a53      	ldr	r2, [pc, #332]	; (8001a84 <Trajectory+0x274>)
 8001936:	6013      	str	r3, [r2, #0]
		time_total = 2 * time_acc;
 8001938:	4b52      	ldr	r3, [pc, #328]	; (8001a84 <Trajectory+0x274>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001942:	4b55      	ldr	r3, [pc, #340]	; (8001a98 <Trajectory+0x288>)
 8001944:	edc3 7a00 	vstr	s15, [r3]
		velocity_triangle = time_acc * acceleration_max;
 8001948:	4b4e      	ldr	r3, [pc, #312]	; (8001a84 <Trajectory+0x274>)
 800194a:	ed93 7a00 	vldr	s14, [r3]
 800194e:	4b4b      	ldr	r3, [pc, #300]	; (8001a7c <Trajectory+0x26c>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001958:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <Trajectory+0x28c>)
 800195a:	edc3 7a00 	vstr	s15, [r3]
	}

	if (abs_distance_one_travel > ((velocity_max * velocity_max) / acceleration_max))
 800195e:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <Trajectory+0x268>)
 8001960:	ed93 7a00 	vldr	s14, [r3]
 8001964:	4b44      	ldr	r3, [pc, #272]	; (8001a78 <Trajectory+0x268>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800196e:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <Trajectory+0x26c>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001978:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <Trajectory+0x270>)
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001986:	f140 818b 	bpl.w	8001ca0 <Trajectory+0x490>
	{
		if ((0 <= time_trajectory) && (time_trajectory < time_acc)) {
 800198a:	4b45      	ldr	r3, [pc, #276]	; (8001aa0 <Trajectory+0x290>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001998:	f2c0 8092 	blt.w	8001ac0 <Trajectory+0x2b0>
 800199c:	4b40      	ldr	r3, [pc, #256]	; (8001aa0 <Trajectory+0x290>)
 800199e:	ed93 7a00 	vldr	s14, [r3]
 80019a2:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <Trajectory+0x274>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b0:	f140 8086 	bpl.w	8001ac0 <Trajectory+0x2b0>
			time_trajectory += 0.0001;
 80019b4:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <Trajectory+0x290>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fd71 	bl	80004a0 <__aeabi_f2d>
 80019be:	a32c      	add	r3, pc, #176	; (adr r3, 8001a70 <Trajectory+0x260>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe fc0e 	bl	80001e4 <__adddf3>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f88e 	bl	8000af0 <__aeabi_d2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a32      	ldr	r2, [pc, #200]	; (8001aa0 <Trajectory+0x290>)
 80019d8:	6013      	str	r3, [r2, #0]
			time_now = time_trajectory;
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <Trajectory+0x290>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a31      	ldr	r2, [pc, #196]	; (8001aa4 <Trajectory+0x294>)
 80019e0:	6013      	str	r3, [r2, #0]
			position_segment = (velocity_start * time_now)
 80019e2:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <Trajectory+0x298>)
 80019e4:	ed93 7a00 	vldr	s14, [r3]
 80019e8:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <Trajectory+0x294>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 / 2 * acceleration_max * (time_now * time_now));
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <Trajectory+0x26c>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001a90 <Trajectory+0x280>
 80019fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <Trajectory+0x294>)
 8001a02:	ed93 6a00 	vldr	s12, [r3]
 8001a06:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <Trajectory+0x294>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_segment = (velocity_start * time_now)
 8001a18:	4b24      	ldr	r3, [pc, #144]	; (8001aac <Trajectory+0x29c>)
 8001a1a:	edc3 7a00 	vstr	s15, [r3]

			position_now_acc = position_now_dec
					+ (position_segment * sign_of_distance);
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <Trajectory+0x2a0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <Trajectory+0x29c>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <Trajectory+0x2a4>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_now_acc = position_now_dec
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <Trajectory+0x2a8>)
 8001a40:	edc3 7a00 	vstr	s15, [r3]
			position_setpoint = position_now_dec
					+ (position_segment * sign_of_distance);
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <Trajectory+0x2a0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <Trajectory+0x29c>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <Trajectory+0x2a4>)
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_setpoint = position_now_dec
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <Trajectory+0x2ac>)
 8001a66:	edc3 7a00 	vstr	s15, [r3]
 8001a6a:	e223      	b.n	8001eb4 <Trajectory+0x6a4>
 8001a6c:	f3af 8000 	nop.w
 8001a70:	eb1c432d 	.word	0xeb1c432d
 8001a74:	3f1a36e2 	.word	0x3f1a36e2
 8001a78:	20000004 	.word	0x20000004
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000290 	.word	0x20000290
 8001a84:	2000029c 	.word	0x2000029c
 8001a88:	3ff00000 	.word	0x3ff00000
 8001a8c:	200002a0 	.word	0x200002a0
 8001a90:	00000000 	.word	0x00000000
 8001a94:	200002a4 	.word	0x200002a4
 8001a98:	200002a8 	.word	0x200002a8
 8001a9c:	20000298 	.word	0x20000298
 8001aa0:	200002b0 	.word	0x200002b0
 8001aa4:	200002ac 	.word	0x200002ac
 8001aa8:	20000294 	.word	0x20000294
 8001aac:	20000288 	.word	0x20000288
 8001ab0:	200002b4 	.word	0x200002b4
 8001ab4:	20000284 	.word	0x20000284
 8001ab8:	2000027c 	.word	0x2000027c
 8001abc:	20000258 	.word	0x20000258

			//velocity_setpoint = (acceleration_max * sign_of_distance * time_now) + velocity_start;
		}

		// constant segment
		else if ((time_acc <= time_trajectory)
 8001ac0:	4bb1      	ldr	r3, [pc, #708]	; (8001d88 <Trajectory+0x578>)
 8001ac2:	ed93 7a00 	vldr	s14, [r3]
 8001ac6:	4bb1      	ldr	r3, [pc, #708]	; (8001d8c <Trajectory+0x57c>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	d85f      	bhi.n	8001b96 <Trajectory+0x386>
				&& (time_trajectory < (time_acc + time_const))) {
 8001ad6:	4bac      	ldr	r3, [pc, #688]	; (8001d88 <Trajectory+0x578>)
 8001ad8:	ed93 7a00 	vldr	s14, [r3]
 8001adc:	4bac      	ldr	r3, [pc, #688]	; (8001d90 <Trajectory+0x580>)
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae6:	4ba9      	ldr	r3, [pc, #676]	; (8001d8c <Trajectory+0x57c>)
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af4:	dd4f      	ble.n	8001b96 <Trajectory+0x386>
			time_trajectory += 0.0001;
 8001af6:	4ba5      	ldr	r3, [pc, #660]	; (8001d8c <Trajectory+0x57c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fcd0 	bl	80004a0 <__aeabi_f2d>
 8001b00:	a39f      	add	r3, pc, #636	; (adr r3, 8001d80 <Trajectory+0x570>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7fe fb6d 	bl	80001e4 <__adddf3>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7fe ffed 	bl	8000af0 <__aeabi_d2f>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a9c      	ldr	r2, [pc, #624]	; (8001d8c <Trajectory+0x57c>)
 8001b1a:	6013      	str	r3, [r2, #0]
			time_now = time_trajectory - time_acc;
 8001b1c:	4b9b      	ldr	r3, [pc, #620]	; (8001d8c <Trajectory+0x57c>)
 8001b1e:	ed93 7a00 	vldr	s14, [r3]
 8001b22:	4b99      	ldr	r3, [pc, #612]	; (8001d88 <Trajectory+0x578>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2c:	4b99      	ldr	r3, [pc, #612]	; (8001d94 <Trajectory+0x584>)
 8001b2e:	edc3 7a00 	vstr	s15, [r3]
			position_segment = (velocity_max * time_now);
 8001b32:	4b99      	ldr	r3, [pc, #612]	; (8001d98 <Trajectory+0x588>)
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	4b96      	ldr	r3, [pc, #600]	; (8001d94 <Trajectory+0x584>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b42:	4b96      	ldr	r3, [pc, #600]	; (8001d9c <Trajectory+0x58c>)
 8001b44:	edc3 7a00 	vstr	s15, [r3]

			position_now_const = position_now_acc
					+ (position_segment * sign_of_distance);
 8001b48:	4b95      	ldr	r3, [pc, #596]	; (8001da0 <Trajectory+0x590>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b54:	4b91      	ldr	r3, [pc, #580]	; (8001d9c <Trajectory+0x58c>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b5e:	4b91      	ldr	r3, [pc, #580]	; (8001da4 <Trajectory+0x594>)
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_now_const = position_now_acc
 8001b68:	4b8f      	ldr	r3, [pc, #572]	; (8001da8 <Trajectory+0x598>)
 8001b6a:	edc3 7a00 	vstr	s15, [r3]
			position_setpoint = position_now_acc
					+ (position_segment * sign_of_distance);
 8001b6e:	4b8c      	ldr	r3, [pc, #560]	; (8001da0 <Trajectory+0x590>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7a:	4b88      	ldr	r3, [pc, #544]	; (8001d9c <Trajectory+0x58c>)
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b84:	4b87      	ldr	r3, [pc, #540]	; (8001da4 <Trajectory+0x594>)
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_setpoint = position_now_acc
 8001b8e:	4b87      	ldr	r3, [pc, #540]	; (8001dac <Trajectory+0x59c>)
 8001b90:	edc3 7a00 	vstr	s15, [r3]
 8001b94:	e18e      	b.n	8001eb4 <Trajectory+0x6a4>

			//velocity_setpoint = sign_of_distance*velocity_max;
		}

		// deceleration segment
		else if (((time_acc + time_const) <= time_trajectory)
 8001b96:	4b7c      	ldr	r3, [pc, #496]	; (8001d88 <Trajectory+0x578>)
 8001b98:	ed93 7a00 	vldr	s14, [r3]
 8001b9c:	4b7c      	ldr	r3, [pc, #496]	; (8001d90 <Trajectory+0x580>)
 8001b9e:	edd3 7a00 	vldr	s15, [r3]
 8001ba2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ba6:	4b79      	ldr	r3, [pc, #484]	; (8001d8c <Trajectory+0x57c>)
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	f200 817e 	bhi.w	8001eb4 <Trajectory+0x6a4>
				&& (time_trajectory <= time_total)) {
 8001bb8:	4b74      	ldr	r3, [pc, #464]	; (8001d8c <Trajectory+0x57c>)
 8001bba:	ed93 7a00 	vldr	s14, [r3]
 8001bbe:	4b7c      	ldr	r3, [pc, #496]	; (8001db0 <Trajectory+0x5a0>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bcc:	f200 8172 	bhi.w	8001eb4 <Trajectory+0x6a4>
			time_trajectory += 0.0001;
 8001bd0:	4b6e      	ldr	r3, [pc, #440]	; (8001d8c <Trajectory+0x57c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fc63 	bl	80004a0 <__aeabi_f2d>
 8001bda:	a369      	add	r3, pc, #420	; (adr r3, 8001d80 <Trajectory+0x570>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f7fe fb00 	bl	80001e4 <__adddf3>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f7fe ff80 	bl	8000af0 <__aeabi_d2f>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4a66      	ldr	r2, [pc, #408]	; (8001d8c <Trajectory+0x57c>)
 8001bf4:	6013      	str	r3, [r2, #0]
			time_now = time_trajectory - (time_acc + time_const);
 8001bf6:	4b65      	ldr	r3, [pc, #404]	; (8001d8c <Trajectory+0x57c>)
 8001bf8:	ed93 7a00 	vldr	s14, [r3]
 8001bfc:	4b62      	ldr	r3, [pc, #392]	; (8001d88 <Trajectory+0x578>)
 8001bfe:	edd3 6a00 	vldr	s13, [r3]
 8001c02:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <Trajectory+0x580>)
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c10:	4b60      	ldr	r3, [pc, #384]	; (8001d94 <Trajectory+0x584>)
 8001c12:	edc3 7a00 	vstr	s15, [r3]
			position_segment = (velocity_max * time_now)
 8001c16:	4b60      	ldr	r3, [pc, #384]	; (8001d98 <Trajectory+0x588>)
 8001c18:	ed93 7a00 	vldr	s14, [r3]
 8001c1c:	4b5d      	ldr	r3, [pc, #372]	; (8001d94 <Trajectory+0x584>)
 8001c1e:	edd3 7a00 	vldr	s15, [r3]
 8001c22:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 / 2 * (-1) * acceleration_max * (time_now * time_now));
 8001c26:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <Trajectory+0x5a4>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001db8 <Trajectory+0x5a8>
 8001c30:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c34:	4b57      	ldr	r3, [pc, #348]	; (8001d94 <Trajectory+0x584>)
 8001c36:	ed93 6a00 	vldr	s12, [r3]
 8001c3a:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <Trajectory+0x584>)
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c48:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_segment = (velocity_max * time_now)
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <Trajectory+0x58c>)
 8001c4e:	edc3 7a00 	vstr	s15, [r3]

			position_now_dec = position_now_const
					+ (position_segment * sign_of_distance);
 8001c52:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <Trajectory+0x590>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c5e:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <Trajectory+0x58c>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c68:	4b4f      	ldr	r3, [pc, #316]	; (8001da8 <Trajectory+0x598>)
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_now_dec = position_now_const
 8001c72:	4b52      	ldr	r3, [pc, #328]	; (8001dbc <Trajectory+0x5ac>)
 8001c74:	edc3 7a00 	vstr	s15, [r3]
			position_setpoint = position_now_const
					+ (position_segment * sign_of_distance);
 8001c78:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <Trajectory+0x590>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c84:	4b45      	ldr	r3, [pc, #276]	; (8001d9c <Trajectory+0x58c>)
 8001c86:	edd3 7a00 	vldr	s15, [r3]
 8001c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8e:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <Trajectory+0x598>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_setpoint = position_now_const
 8001c98:	4b44      	ldr	r3, [pc, #272]	; (8001dac <Trajectory+0x59c>)
 8001c9a:	edc3 7a00 	vstr	s15, [r3]
 8001c9e:	e109      	b.n	8001eb4 <Trajectory+0x6a4>

		}
	}

	else {
		if ((0 <= time_trajectory) && (time_trajectory < time_acc)) {
 8001ca0:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <Trajectory+0x57c>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	f2c0 8089 	blt.w	8001dc4 <Trajectory+0x5b4>
 8001cb2:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <Trajectory+0x57c>)
 8001cb4:	ed93 7a00 	vldr	s14, [r3]
 8001cb8:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <Trajectory+0x578>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	d57d      	bpl.n	8001dc4 <Trajectory+0x5b4>
			time_trajectory += 0.0001;
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <Trajectory+0x57c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fbe7 	bl	80004a0 <__aeabi_f2d>
 8001cd2:	a32b      	add	r3, pc, #172	; (adr r3, 8001d80 <Trajectory+0x570>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe fa84 	bl	80001e4 <__adddf3>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7fe ff04 	bl	8000af0 <__aeabi_d2f>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4a28      	ldr	r2, [pc, #160]	; (8001d8c <Trajectory+0x57c>)
 8001cec:	6013      	str	r3, [r2, #0]
			time_now = time_trajectory;
 8001cee:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <Trajectory+0x57c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a28      	ldr	r2, [pc, #160]	; (8001d94 <Trajectory+0x584>)
 8001cf4:	6013      	str	r3, [r2, #0]
			position_segment = (velocity_start * time_now)
 8001cf6:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <Trajectory+0x5b0>)
 8001cf8:	ed93 7a00 	vldr	s14, [r3]
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <Trajectory+0x584>)
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 / 2 * acceleration_max * (time_now * time_now));
 8001d06:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <Trajectory+0x5a4>)
 8001d08:	edd3 7a00 	vldr	s15, [r3]
 8001d0c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001db8 <Trajectory+0x5a8>
 8001d10:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <Trajectory+0x584>)
 8001d16:	ed93 6a00 	vldr	s12, [r3]
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <Trajectory+0x584>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d28:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_segment = (velocity_start * time_now)
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <Trajectory+0x58c>)
 8001d2e:	edc3 7a00 	vstr	s15, [r3]

			position_now_acc = position_now_dec
					+ (position_segment * sign_of_distance);
 8001d32:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <Trajectory+0x590>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <Trajectory+0x58c>)
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d48:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <Trajectory+0x5ac>)
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_now_acc = position_now_dec
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <Trajectory+0x594>)
 8001d54:	edc3 7a00 	vstr	s15, [r3]
			position_setpoint = position_now_dec
					+ (position_segment * sign_of_distance);
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <Trajectory+0x590>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	ee07 3a90 	vmov	s15, r3
 8001d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <Trajectory+0x58c>)
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <Trajectory+0x5ac>)
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_setpoint = position_now_dec
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <Trajectory+0x59c>)
 8001d7a:	edc3 7a00 	vstr	s15, [r3]
 8001d7e:	e099      	b.n	8001eb4 <Trajectory+0x6a4>
 8001d80:	eb1c432d 	.word	0xeb1c432d
 8001d84:	3f1a36e2 	.word	0x3f1a36e2
 8001d88:	2000029c 	.word	0x2000029c
 8001d8c:	200002b0 	.word	0x200002b0
 8001d90:	200002a0 	.word	0x200002a0
 8001d94:	200002ac 	.word	0x200002ac
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	20000288 	.word	0x20000288
 8001da0:	200002b4 	.word	0x200002b4
 8001da4:	2000027c 	.word	0x2000027c
 8001da8:	20000280 	.word	0x20000280
 8001dac:	20000258 	.word	0x20000258
 8001db0:	200002a8 	.word	0x200002a8
 8001db4:	20000008 	.word	0x20000008
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	20000284 	.word	0x20000284
 8001dc0:	20000294 	.word	0x20000294

			//velocity_setpoint = (acceleration_max * sign_of_distance * time_now) + velocity_start;
		}

		else if ((time_acc <= time_trajectory)
 8001dc4:	4b5e      	ldr	r3, [pc, #376]	; (8001f40 <Trajectory+0x730>)
 8001dc6:	ed93 7a00 	vldr	s14, [r3]
 8001dca:	4b5e      	ldr	r3, [pc, #376]	; (8001f44 <Trajectory+0x734>)
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd8:	d86c      	bhi.n	8001eb4 <Trajectory+0x6a4>
				&& (time_trajectory < time_total)) {
 8001dda:	4b5a      	ldr	r3, [pc, #360]	; (8001f44 <Trajectory+0x734>)
 8001ddc:	ed93 7a00 	vldr	s14, [r3]
 8001de0:	4b59      	ldr	r3, [pc, #356]	; (8001f48 <Trajectory+0x738>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dee:	d561      	bpl.n	8001eb4 <Trajectory+0x6a4>
			time_trajectory += 0.0001;
 8001df0:	4b54      	ldr	r3, [pc, #336]	; (8001f44 <Trajectory+0x734>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fb53 	bl	80004a0 <__aeabi_f2d>
 8001dfa:	a34f      	add	r3, pc, #316	; (adr r3, 8001f38 <Trajectory+0x728>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe f9f0 	bl	80001e4 <__adddf3>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe fe70 	bl	8000af0 <__aeabi_d2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4a4c      	ldr	r2, [pc, #304]	; (8001f44 <Trajectory+0x734>)
 8001e14:	6013      	str	r3, [r2, #0]
			time_now = time_trajectory - (time_acc);
 8001e16:	4b4b      	ldr	r3, [pc, #300]	; (8001f44 <Trajectory+0x734>)
 8001e18:	ed93 7a00 	vldr	s14, [r3]
 8001e1c:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <Trajectory+0x730>)
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e26:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <Trajectory+0x73c>)
 8001e28:	edc3 7a00 	vstr	s15, [r3]
			position_segment = (velocity_triangle * time_now)
 8001e2c:	4b48      	ldr	r3, [pc, #288]	; (8001f50 <Trajectory+0x740>)
 8001e2e:	ed93 7a00 	vldr	s14, [r3]
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <Trajectory+0x73c>)
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 / 2 * (-1) * acceleration_max * (time_now * time_now));
 8001e3c:	4b45      	ldr	r3, [pc, #276]	; (8001f54 <Trajectory+0x744>)
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001f58 <Trajectory+0x748>
 8001e46:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001e4a:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <Trajectory+0x73c>)
 8001e4c:	ed93 6a00 	vldr	s12, [r3]
 8001e50:	4b3e      	ldr	r3, [pc, #248]	; (8001f4c <Trajectory+0x73c>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_segment = (velocity_triangle * time_now)
 8001e62:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <Trajectory+0x74c>)
 8001e64:	edc3 7a00 	vstr	s15, [r3]

			position_now_dec = position_now_acc
					+ (position_segment * sign_of_distance);
 8001e68:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <Trajectory+0x750>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <Trajectory+0x74c>)
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e7e:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <Trajectory+0x754>)
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_now_dec = position_now_acc
 8001e88:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <Trajectory+0x758>)
 8001e8a:	edc3 7a00 	vstr	s15, [r3]
			position_setpoint = position_now_acc
					+ (position_segment * sign_of_distance);
 8001e8e:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <Trajectory+0x750>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e9a:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <Trajectory+0x74c>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <Trajectory+0x754>)
 8001ea6:	edd3 7a00 	vldr	s15, [r3]
 8001eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
			position_setpoint = position_now_acc
 8001eae:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <Trajectory+0x75c>)
 8001eb0:	edc3 7a00 	vstr	s15, [r3]

		}

	}

	if ((setpoint_now - 0.5 < velocity_setpoint)
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <Trajectory+0x760>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe faf1 	bl	80004a0 <__aeabi_f2d>
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <Trajectory+0x764>)
 8001ec4:	f7fe f98c 	bl	80001e0 <__aeabi_dsub>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4614      	mov	r4, r2
 8001ece:	461d      	mov	r5, r3
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <Trajectory+0x768>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fae3 	bl	80004a0 <__aeabi_f2d>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4620      	mov	r0, r4
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	f7fe fda7 	bl	8000a34 <__aeabi_dcmplt>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01d      	beq.n	8001f28 <Trajectory+0x718>
			&& (velocity_setpoint < setpoint_now + 0.5)) {
 8001eec:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <Trajectory+0x768>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fad5 	bl	80004a0 <__aeabi_f2d>
 8001ef6:	4604      	mov	r4, r0
 8001ef8:	460d      	mov	r5, r1
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <Trajectory+0x760>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe face 	bl	80004a0 <__aeabi_f2d>
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <Trajectory+0x764>)
 8001f0a:	f7fe f96b 	bl	80001e4 <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4620      	mov	r0, r4
 8001f14:	4629      	mov	r1, r5
 8001f16:	f7fe fd8d 	bl	8000a34 <__aeabi_dcmplt>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <Trajectory+0x718>
		time_trajectory = 0;
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <Trajectory+0x734>)
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
	}

	velocity_setpoint = position_setpoint;
 8001f28:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <Trajectory+0x75c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <Trajectory+0x768>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	bdb0      	pop	{r4, r5, r7, pc}
 8001f34:	f3af 8000 	nop.w
 8001f38:	eb1c432d 	.word	0xeb1c432d
 8001f3c:	3f1a36e2 	.word	0x3f1a36e2
 8001f40:	2000029c 	.word	0x2000029c
 8001f44:	200002b0 	.word	0x200002b0
 8001f48:	200002a8 	.word	0x200002a8
 8001f4c:	200002ac 	.word	0x200002ac
 8001f50:	20000298 	.word	0x20000298
 8001f54:	20000008 	.word	0x20000008
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	20000288 	.word	0x20000288
 8001f60:	200002b4 	.word	0x200002b4
 8001f64:	2000027c 	.word	0x2000027c
 8001f68:	20000284 	.word	0x20000284
 8001f6c:	20000258 	.word	0x20000258
 8001f70:	200002bc 	.word	0x200002bc
 8001f74:	3fe00000 	.word	0x3fe00000
 8001f78:	20000278 	.word	0x20000278

08001f7c <motor>:

void motor(float voltage) {
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage > 0) {
 8001f86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f92:	dd11      	ble.n	8001fb8 <motor+0x3c>
		// forward
		if (voltage > 12.0) {
 8001f94:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f98:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa4:	dd01      	ble.n	8001faa <motor+0x2e>
			voltage = 12.0;
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <motor+0xd4>)
 8001fa8:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb0:	4828      	ldr	r0, [pc, #160]	; (8002054 <motor+0xd8>)
 8001fb2:	f001 f853 	bl	800305c <HAL_GPIO_WritePin>
 8001fb6:	e02b      	b.n	8002010 <motor+0x94>
	} else if (voltage < 0) {
 8001fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc4:	d521      	bpl.n	800200a <motor+0x8e>
		// backward
		voltage *= -1.0;
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fa6a 	bl	80004a0 <__aeabi_f2d>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f7fe fd8c 	bl	8000af0 <__aeabi_d2f>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef1 7a67 	vneg.f32	s15, s15
 8001fe2:	edc7 7a01 	vstr	s15, [r7, #4]
		if (voltage > 12.0) {
 8001fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fea:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff6:	dd01      	ble.n	8001ffc <motor+0x80>
			voltage = 12.0;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <motor+0xd4>)
 8001ffa:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002002:	4814      	ldr	r0, [pc, #80]	; (8002054 <motor+0xd8>)
 8002004:	f001 f82a 	bl	800305c <HAL_GPIO_WritePin>
 8002008:	e002      	b.n	8002010 <motor+0x94>
	} else {
		// stop
		voltage = 0;
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	607b      	str	r3, [r7, #4]
	}

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, voltage * 1000.0 / 12.0);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7fe fa45 	bl	80004a0 <__aeabi_f2d>
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <motor+0xdc>)
 800201c:	f7fe fa98 	bl	8000550 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <motor+0xe0>)
 800202e:	f7fe fbb9 	bl	80007a4 <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	490a      	ldr	r1, [pc, #40]	; (8002060 <motor+0xe4>)
 8002038:	680c      	ldr	r4, [r1, #0]
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f7fe fd37 	bl	8000ab0 <__aeabi_d2uiz>
 8002042:	4603      	mov	r3, r0
 8002044:	6363      	str	r3, [r4, #52]	; 0x34
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bd90      	pop	{r4, r7, pc}
 800204e:	bf00      	nop
 8002050:	41400000 	.word	0x41400000
 8002054:	40020000 	.word	0x40020000
 8002058:	408f4000 	.word	0x408f4000
 800205c:	40280000 	.word	0x40280000
 8002060:	200000e4 	.word	0x200000e4

08002064 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002064:	b4b0      	push	{r4, r5, r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a08      	ldr	r2, [pc, #32]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d108      	bne.n	8002086 <HAL_TIM_PeriodElapsedCallback+0x22>
		_micros += UINT32_MAX;
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	1e54      	subs	r4, r2, #1
 800207c:	f143 0500 	adc.w	r5, r3, #0
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002082:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bcb0      	pop	{r4, r5, r7}
 800208e:	4770      	bx	lr
 8002090:	200001bc 	.word	0x200001bc
 8002094:	20000250 	.word	0x20000250

08002098 <micros>:

uint64_t micros() {
 8002098:	b4b0      	push	{r4, r5, r7}
 800209a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <micros+0x2c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	2200      	movs	r2, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	4611      	mov	r1, r2
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <micros+0x30>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	1884      	adds	r4, r0, r2
 80020b0:	eb41 0503 	adc.w	r5, r1, r3
 80020b4:	4622      	mov	r2, r4
 80020b6:	462b      	mov	r3, r5
}
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	bcb0      	pop	{r4, r5, r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	200001bc 	.word	0x200001bc
 80020c8:	20000250 	.word	0x20000250

080020cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d0:	b672      	cpsid	i
}
 80020d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80020d4:	e7fe      	b.n	80020d4 <Error_Handler+0x8>
	...

080020d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_MspInit+0x4c>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <HAL_MspInit+0x4c>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_MspInit+0x4c>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_MspInit+0x4c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <HAL_MspInit+0x4c>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_MspInit+0x4c>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002116:	2007      	movs	r0, #7
 8002118:	f000 fdda 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40023800 	.word	0x40023800

08002128 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HAL_ADC_MspInit+0x7c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d127      	bne.n	800219a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_ADC_MspInit+0x80>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <HAL_ADC_MspInit+0x80>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_ADC_MspInit+0x80>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_ADC_MspInit+0x80>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <HAL_ADC_MspInit+0x80>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <HAL_ADC_MspInit+0x80>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002182:	2303      	movs	r3, #3
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002186:	2303      	movs	r3, #3
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	; (80021ac <HAL_ADC_MspInit+0x84>)
 8002196:	f000 fddd 	bl	8002d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40012000 	.word	0x40012000
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020800 	.word	0x40020800

080021b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a18      	ldr	r2, [pc, #96]	; (8002220 <HAL_TIM_Base_MspInit+0x70>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d10e      	bne.n	80021e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_TIM_Base_MspInit+0x74>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a16      	ldr	r2, [pc, #88]	; (8002224 <HAL_TIM_Base_MspInit+0x74>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_TIM_Base_MspInit+0x74>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80021de:	e01a      	b.n	8002216 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a10      	ldr	r2, [pc, #64]	; (8002228 <HAL_TIM_Base_MspInit+0x78>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d115      	bne.n	8002216 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_TIM_Base_MspInit+0x74>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <HAL_TIM_Base_MspInit+0x74>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_TIM_Base_MspInit+0x74>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2100      	movs	r1, #0
 800220a:	2032      	movs	r0, #50	; 0x32
 800220c:	f000 fd6b 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002210:	2032      	movs	r0, #50	; 0x32
 8002212:	f000 fd84 	bl	8002d1e <HAL_NVIC_EnableIRQ>
}
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40010000 	.word	0x40010000
 8002224:	40023800 	.word	0x40023800
 8002228:	40000c00 	.word	0x40000c00

0800222c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	; 0x30
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224c:	d134      	bne.n	80022b8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	4b34      	ldr	r3, [pc, #208]	; (8002324 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a33      	ldr	r2, [pc, #204]	; (8002324 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a2c      	ldr	r2, [pc, #176]	; (8002324 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_TIM_Encoder_MspInit+0xf8>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002286:	2303      	movs	r3, #3
 8002288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002296:	2301      	movs	r3, #1
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229a:	f107 031c 	add.w	r3, r7, #28
 800229e:	4619      	mov	r1, r3
 80022a0:	4821      	ldr	r0, [pc, #132]	; (8002328 <HAL_TIM_Encoder_MspInit+0xfc>)
 80022a2:	f000 fd57 	bl	8002d54 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	201c      	movs	r0, #28
 80022ac:	f000 fd1b 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022b0:	201c      	movs	r0, #28
 80022b2:	f000 fd34 	bl	8002d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022b6:	e030      	b.n	800231a <HAL_TIM_Encoder_MspInit+0xee>
  else if(htim_encoder->Instance==TIM3)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1b      	ldr	r2, [pc, #108]	; (800232c <HAL_TIM_Encoder_MspInit+0x100>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d12b      	bne.n	800231a <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <HAL_TIM_Encoder_MspInit+0xf8>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a16      	ldr	r2, [pc, #88]	; (8002324 <HAL_TIM_Encoder_MspInit+0xf8>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_TIM_Encoder_MspInit+0xf8>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_TIM_Encoder_MspInit+0xf8>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <HAL_TIM_Encoder_MspInit+0xf8>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_TIM_Encoder_MspInit+0xf8>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022fa:	23c0      	movs	r3, #192	; 0xc0
 80022fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800230a:	2302      	movs	r3, #2
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 031c 	add.w	r3, r7, #28
 8002312:	4619      	mov	r1, r3
 8002314:	4804      	ldr	r0, [pc, #16]	; (8002328 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002316:	f000 fd1d 	bl	8002d54 <HAL_GPIO_Init>
}
 800231a:	bf00      	nop
 800231c:	3730      	adds	r7, #48	; 0x30
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40020000 	.word	0x40020000
 800232c:	40000400 	.word	0x40000400

08002330 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a12      	ldr	r2, [pc, #72]	; (8002398 <HAL_TIM_MspPostInit+0x68>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d11e      	bne.n	8002390 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_TIM_MspPostInit+0x6c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <HAL_TIM_MspPostInit+0x6c>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <HAL_TIM_MspPostInit+0x6c>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800236e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002372:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002380:	2301      	movs	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	4619      	mov	r1, r3
 800238a:	4805      	ldr	r0, [pc, #20]	; (80023a0 <HAL_TIM_MspPostInit+0x70>)
 800238c:	f000 fce2 	bl	8002d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002390:	bf00      	nop
 8002392:	3720      	adds	r7, #32
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40010000 	.word	0x40010000
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020000 	.word	0x40020000

080023a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_UART_MspInit+0x84>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12b      	bne.n	800241e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_UART_MspInit+0x88>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a17      	ldr	r2, [pc, #92]	; (800242c <HAL_UART_MspInit+0x88>)
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_UART_MspInit+0x88>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_UART_MspInit+0x88>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_UART_MspInit+0x88>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_UART_MspInit+0x88>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023fe:	230c      	movs	r3, #12
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800240e:	2307      	movs	r3, #7
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_UART_MspInit+0x8c>)
 800241a:	f000 fc9b 	bl	8002d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40004400 	.word	0x40004400
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000

08002434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <NMI_Handler+0x4>

0800243a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <HardFault_Handler+0x4>

08002440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <MemManage_Handler+0x4>

08002446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800244a:	e7fe      	b.n	800244a <BusFault_Handler+0x4>

0800244c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <UsageFault_Handler+0x4>

08002452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002480:	f000 f8c4 	bl	800260c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}

08002488 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <TIM2_IRQHandler+0x10>)
 800248e:	f001 fd7f 	bl	8003f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	2000012c 	.word	0x2000012c

0800249c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <TIM5_IRQHandler+0x10>)
 80024a2:	f001 fd75 	bl	8003f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200001bc 	.word	0x200001bc

080024b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <SystemInit+0x20>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <SystemInit+0x20>)
 80024bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <ComputeLowpassConstant>:
		HAL_GPIO_TogglePin(GPIOx, GPIO_PIN_x);
		BlinkTime += Rate;
	}
}

float ComputeLowpassConstant(uint16_t CutoffFreq, uint16_t SamplingFreq) {
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	460a      	mov	r2, r1
 80024de:	80fb      	strh	r3, [r7, #6]
 80024e0:	4613      	mov	r3, r2
 80024e2:	80bb      	strh	r3, [r7, #4]
	return CutoffFreq / ((float) (CutoffFreq + SamplingFreq));
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	88bb      	ldrh	r3, [r7, #4]
 80024f2:	4413      	add	r3, r2
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002500:	eef0 7a66 	vmov.f32	s15, s13
}
 8002504:	eeb0 0a67 	vmov.f32	s0, s15
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800254c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002518:	480d      	ldr	r0, [pc, #52]	; (8002550 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800251a:	490e      	ldr	r1, [pc, #56]	; (8002554 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800251c:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002520:	e002      	b.n	8002528 <LoopCopyDataInit>

08002522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002526:	3304      	adds	r3, #4

08002528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800252a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800252c:	d3f9      	bcc.n	8002522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800252e:	4a0b      	ldr	r2, [pc, #44]	; (800255c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002530:	4c0b      	ldr	r4, [pc, #44]	; (8002560 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002534:	e001      	b.n	800253a <LoopFillZerobss>

08002536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002538:	3204      	adds	r2, #4

0800253a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800253a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800253c:	d3fb      	bcc.n	8002536 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800253e:	f7ff ffb7 	bl	80024b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002542:	f002 fe47 	bl	80051d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002546:	f7fe fca5 	bl	8000e94 <main>
  bx  lr    
 800254a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800254c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002554:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002558:	08005428 	.word	0x08005428
  ldr r2, =_sbss
 800255c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002560:	200002e4 	.word	0x200002e4

08002564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002564:	e7fe      	b.n	8002564 <ADC_IRQHandler>
	...

08002568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_Init+0x40>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <HAL_Init+0x40>)
 8002572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002576:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_Init+0x40>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <HAL_Init+0x40>)
 800257e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002582:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_Init+0x40>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <HAL_Init+0x40>)
 800258a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002590:	2003      	movs	r0, #3
 8002592:	f000 fb9d 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002596:	2000      	movs	r0, #0
 8002598:	f000 f808 	bl	80025ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800259c:	f7ff fd9c 	bl	80020d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023c00 	.word	0x40023c00

080025ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_InitTick+0x54>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_InitTick+0x58>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fbb5 	bl	8002d3a <HAL_SYSTICK_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00e      	b.n	80025f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b0f      	cmp	r3, #15
 80025de:	d80a      	bhi.n	80025f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e0:	2200      	movs	r2, #0
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f000 fb7d 	bl	8002ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ec:	4a06      	ldr	r2, [pc, #24]	; (8002608 <HAL_InitTick+0x5c>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000000c 	.word	0x2000000c
 8002604:	20000014 	.word	0x20000014
 8002608:	20000010 	.word	0x20000010

0800260c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_IncTick+0x20>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_IncTick+0x24>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4413      	add	r3, r2
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_IncTick+0x24>)
 800261e:	6013      	str	r3, [r2, #0]
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000014 	.word	0x20000014
 8002630:	200002e0 	.word	0x200002e0

08002634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return uwTick;
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <HAL_GetTick+0x14>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	200002e0 	.word	0x200002e0

0800264c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e033      	b.n	80026ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff fd5c 	bl	8002128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d118      	bne.n	80026bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002692:	f023 0302 	bic.w	r3, r3, #2
 8002696:	f043 0202 	orr.w	r2, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f94a 	bl	8002938 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f023 0303 	bic.w	r3, r3, #3
 80026b2:	f043 0201 	orr.w	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
 80026ba:	e001      	b.n	80026c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x1c>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e113      	b.n	8002918 <HAL_ADC_ConfigChannel+0x244>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b09      	cmp	r3, #9
 80026fe:	d925      	bls.n	800274c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68d9      	ldr	r1, [r3, #12]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	3b1e      	subs	r3, #30
 8002716:	2207      	movs	r2, #7
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43da      	mvns	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	400a      	ands	r2, r1
 8002724:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68d9      	ldr	r1, [r3, #12]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	4618      	mov	r0, r3
 8002738:	4603      	mov	r3, r0
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4403      	add	r3, r0
 800273e:	3b1e      	subs	r3, #30
 8002740:	409a      	lsls	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	e022      	b.n	8002792 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6919      	ldr	r1, [r3, #16]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	4613      	mov	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4413      	add	r3, r2
 8002760:	2207      	movs	r2, #7
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43da      	mvns	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	400a      	ands	r2, r1
 800276e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6919      	ldr	r1, [r3, #16]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	4618      	mov	r0, r3
 8002782:	4603      	mov	r3, r0
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	4403      	add	r3, r0
 8002788:	409a      	lsls	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b06      	cmp	r3, #6
 8002798:	d824      	bhi.n	80027e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	3b05      	subs	r3, #5
 80027ac:	221f      	movs	r2, #31
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	400a      	ands	r2, r1
 80027ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4618      	mov	r0, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3b05      	subs	r3, #5
 80027d6:	fa00 f203 	lsl.w	r2, r0, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34
 80027e2:	e04c      	b.n	800287e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	d824      	bhi.n	8002836 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	3b23      	subs	r3, #35	; 0x23
 80027fe:	221f      	movs	r2, #31
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43da      	mvns	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	400a      	ands	r2, r1
 800280c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	4618      	mov	r0, r3
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	3b23      	subs	r3, #35	; 0x23
 8002828:	fa00 f203 	lsl.w	r2, r0, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
 8002834:	e023      	b.n	800287e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	3b41      	subs	r3, #65	; 0x41
 8002848:	221f      	movs	r2, #31
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	400a      	ands	r2, r1
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	b29b      	uxth	r3, r3
 8002864:	4618      	mov	r0, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	3b41      	subs	r3, #65	; 0x41
 8002872:	fa00 f203 	lsl.w	r2, r0, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800287e:	4b29      	ldr	r3, [pc, #164]	; (8002924 <HAL_ADC_ConfigChannel+0x250>)
 8002880:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a28      	ldr	r2, [pc, #160]	; (8002928 <HAL_ADC_ConfigChannel+0x254>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d10f      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x1d8>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b12      	cmp	r3, #18
 8002892:	d10b      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <HAL_ADC_ConfigChannel+0x254>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d12b      	bne.n	800290e <HAL_ADC_ConfigChannel+0x23a>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1c      	ldr	r2, [pc, #112]	; (800292c <HAL_ADC_ConfigChannel+0x258>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d003      	beq.n	80028c8 <HAL_ADC_ConfigChannel+0x1f4>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b11      	cmp	r3, #17
 80028c6:	d122      	bne.n	800290e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a11      	ldr	r2, [pc, #68]	; (800292c <HAL_ADC_ConfigChannel+0x258>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d111      	bne.n	800290e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028ea:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_ADC_ConfigChannel+0x25c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a11      	ldr	r2, [pc, #68]	; (8002934 <HAL_ADC_ConfigChannel+0x260>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	0c9a      	lsrs	r2, r3, #18
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002900:	e002      	b.n	8002908 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3b01      	subs	r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f9      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	40012300 	.word	0x40012300
 8002928:	40012000 	.word	0x40012000
 800292c:	10000012 	.word	0x10000012
 8002930:	2000000c 	.word	0x2000000c
 8002934:	431bde83 	.word	0x431bde83

08002938 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002940:	4b79      	ldr	r3, [pc, #484]	; (8002b28 <ADC_Init+0x1f0>)
 8002942:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	431a      	orrs	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800296c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	021a      	lsls	r2, r3, #8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002990:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <ADC_Init+0x1f4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e00f      	b.n	8002a36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0202 	bic.w	r2, r2, #2
 8002a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7e1b      	ldrb	r3, [r3, #24]
 8002a50:	005a      	lsls	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01b      	beq.n	8002a9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	035a      	lsls	r2, r3, #13
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e007      	b.n	8002aac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	051a      	lsls	r2, r3, #20
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ae0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6899      	ldr	r1, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aee:	025a      	lsls	r2, r3, #9
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6899      	ldr	r1, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	029a      	lsls	r2, r3, #10
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40012300 	.word	0x40012300
 8002b2c:	0f000001 	.word	0x0f000001

08002b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b62:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	60d3      	str	r3, [r2, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <__NVIC_GetPriorityGrouping+0x18>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	f003 0307 	and.w	r3, r3, #7
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db0b      	blt.n	8002bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4907      	ldr	r1, [pc, #28]	; (8002bcc <__NVIC_EnableIRQ+0x38>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	; (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	; (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	; 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	; 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c9c:	d301      	bcc.n	8002ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00f      	b.n	8002cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <SysTick_Config+0x40>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002caa:	210f      	movs	r1, #15
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	f7ff ff8e 	bl	8002bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <SysTick_Config+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <SysTick_Config+0x40>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff29 	bl	8002b30 <__NVIC_SetPriorityGrouping>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf8:	f7ff ff3e 	bl	8002b78 <__NVIC_GetPriorityGrouping>
 8002cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff8e 	bl	8002c24 <NVIC_EncodePriority>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff5d 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	4603      	mov	r3, r0
 8002d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff31 	bl	8002b94 <__NVIC_EnableIRQ>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ffa2 	bl	8002c8c <SysTick_Config>
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	; 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e159      	b.n	8003024 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d70:	2201      	movs	r2, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	f040 8148 	bne.w	800301e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d005      	beq.n	8002da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d130      	bne.n	8002e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	2203      	movs	r2, #3
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 0201 	and.w	r2, r3, #1
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d017      	beq.n	8002e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d123      	bne.n	8002e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	08da      	lsrs	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3208      	adds	r2, #8
 8002e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	220f      	movs	r2, #15
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	08da      	lsrs	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3208      	adds	r2, #8
 8002e92:	69b9      	ldr	r1, [r7, #24]
 8002e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0203 	and.w	r2, r3, #3
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80a2 	beq.w	800301e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b57      	ldr	r3, [pc, #348]	; (800303c <HAL_GPIO_Init+0x2e8>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	4a56      	ldr	r2, [pc, #344]	; (800303c <HAL_GPIO_Init+0x2e8>)
 8002ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eea:	4b54      	ldr	r3, [pc, #336]	; (800303c <HAL_GPIO_Init+0x2e8>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ef6:	4a52      	ldr	r2, [pc, #328]	; (8003040 <HAL_GPIO_Init+0x2ec>)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	3302      	adds	r3, #2
 8002efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	220f      	movs	r2, #15
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a49      	ldr	r2, [pc, #292]	; (8003044 <HAL_GPIO_Init+0x2f0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d019      	beq.n	8002f56 <HAL_GPIO_Init+0x202>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a48      	ldr	r2, [pc, #288]	; (8003048 <HAL_GPIO_Init+0x2f4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_GPIO_Init+0x1fe>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a47      	ldr	r2, [pc, #284]	; (800304c <HAL_GPIO_Init+0x2f8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00d      	beq.n	8002f4e <HAL_GPIO_Init+0x1fa>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a46      	ldr	r2, [pc, #280]	; (8003050 <HAL_GPIO_Init+0x2fc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <HAL_GPIO_Init+0x1f6>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a45      	ldr	r2, [pc, #276]	; (8003054 <HAL_GPIO_Init+0x300>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d101      	bne.n	8002f46 <HAL_GPIO_Init+0x1f2>
 8002f42:	2304      	movs	r3, #4
 8002f44:	e008      	b.n	8002f58 <HAL_GPIO_Init+0x204>
 8002f46:	2307      	movs	r3, #7
 8002f48:	e006      	b.n	8002f58 <HAL_GPIO_Init+0x204>
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e004      	b.n	8002f58 <HAL_GPIO_Init+0x204>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e002      	b.n	8002f58 <HAL_GPIO_Init+0x204>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_GPIO_Init+0x204>
 8002f56:	2300      	movs	r3, #0
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	f002 0203 	and.w	r2, r2, #3
 8002f5e:	0092      	lsls	r2, r2, #2
 8002f60:	4093      	lsls	r3, r2
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f68:	4935      	ldr	r1, [pc, #212]	; (8003040 <HAL_GPIO_Init+0x2ec>)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	089b      	lsrs	r3, r3, #2
 8002f6e:	3302      	adds	r3, #2
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f76:	4b38      	ldr	r3, [pc, #224]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f9a:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fc4:	4a24      	ldr	r2, [pc, #144]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fca:	4b23      	ldr	r3, [pc, #140]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fee:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff4:	4b18      	ldr	r3, [pc, #96]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003018:	4a0f      	ldr	r2, [pc, #60]	; (8003058 <HAL_GPIO_Init+0x304>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3301      	adds	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	2b0f      	cmp	r3, #15
 8003028:	f67f aea2 	bls.w	8002d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	40013800 	.word	0x40013800
 8003044:	40020000 	.word	0x40020000
 8003048:	40020400 	.word	0x40020400
 800304c:	40020800 	.word	0x40020800
 8003050:	40020c00 	.word	0x40020c00
 8003054:	40021000 	.word	0x40021000
 8003058:	40013c00 	.word	0x40013c00

0800305c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
 8003068:	4613      	mov	r3, r2
 800306a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003078:	e003      	b.n	8003082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	041a      	lsls	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	619a      	str	r2, [r3, #24]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e267      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d075      	beq.n	800319a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ae:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d00c      	beq.n	80030d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ba:	4b85      	ldr	r3, [pc, #532]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d112      	bne.n	80030ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c6:	4b82      	ldr	r3, [pc, #520]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d2:	d10b      	bne.n	80030ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d4:	4b7e      	ldr	r3, [pc, #504]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d05b      	beq.n	8003198 <HAL_RCC_OscConfig+0x108>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d157      	bne.n	8003198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e242      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f4:	d106      	bne.n	8003104 <HAL_RCC_OscConfig+0x74>
 80030f6:	4b76      	ldr	r3, [pc, #472]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a75      	ldr	r2, [pc, #468]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e01d      	b.n	8003140 <HAL_RCC_OscConfig+0xb0>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x98>
 800310e:	4b70      	ldr	r3, [pc, #448]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6f      	ldr	r2, [pc, #444]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4b6d      	ldr	r3, [pc, #436]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6c      	ldr	r2, [pc, #432]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0xb0>
 8003128:	4b69      	ldr	r3, [pc, #420]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a68      	ldr	r2, [pc, #416]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800312e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	4b66      	ldr	r3, [pc, #408]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a65      	ldr	r2, [pc, #404]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800313a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d013      	beq.n	8003170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7ff fa74 	bl	8002634 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003150:	f7ff fa70 	bl	8002634 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e207      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	4b5b      	ldr	r3, [pc, #364]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0xc0>
 800316e:	e014      	b.n	800319a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7ff fa60 	bl	8002634 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003178:	f7ff fa5c 	bl	8002634 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	; 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e1f3      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	4b51      	ldr	r3, [pc, #324]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0xe8>
 8003196:	e000      	b.n	800319a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d063      	beq.n	800326e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031a6:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00b      	beq.n	80031ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b2:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d11c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031be:	4b44      	ldr	r3, [pc, #272]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d116      	bne.n	80031f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_RCC_OscConfig+0x152>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d001      	beq.n	80031e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e1c7      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e2:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4937      	ldr	r1, [pc, #220]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f6:	e03a      	b.n	800326e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d020      	beq.n	8003242 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003200:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <HAL_RCC_OscConfig+0x244>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003206:	f7ff fa15 	bl	8002634 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320e:	f7ff fa11 	bl	8002634 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e1a8      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4925      	ldr	r1, [pc, #148]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]
 8003240:	e015      	b.n	800326e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_RCC_OscConfig+0x244>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7ff f9f4 	bl	8002634 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003250:	f7ff f9f0 	bl	8002634 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e187      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d036      	beq.n	80032e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d016      	beq.n	80032b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <HAL_RCC_OscConfig+0x248>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003288:	f7ff f9d4 	bl	8002634 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003290:	f7ff f9d0 	bl	8002634 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e167      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80032a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x200>
 80032ae:	e01b      	b.n	80032e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_OscConfig+0x248>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b6:	f7ff f9bd 	bl	8002634 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032bc:	e00e      	b.n	80032dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032be:	f7ff f9b9 	bl	8002634 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d907      	bls.n	80032dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e150      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
 80032d0:	40023800 	.word	0x40023800
 80032d4:	42470000 	.word	0x42470000
 80032d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	4b88      	ldr	r3, [pc, #544]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80032de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1ea      	bne.n	80032be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8097 	beq.w	8003424 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fa:	4b81      	ldr	r3, [pc, #516]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	4b7d      	ldr	r3, [pc, #500]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a7c      	ldr	r2, [pc, #496]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
 8003316:	4b7a      	ldr	r3, [pc, #488]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	60bb      	str	r3, [r7, #8]
 8003320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003322:	2301      	movs	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003326:	4b77      	ldr	r3, [pc, #476]	; (8003504 <HAL_RCC_OscConfig+0x474>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d118      	bne.n	8003364 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003332:	4b74      	ldr	r3, [pc, #464]	; (8003504 <HAL_RCC_OscConfig+0x474>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a73      	ldr	r2, [pc, #460]	; (8003504 <HAL_RCC_OscConfig+0x474>)
 8003338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333e:	f7ff f979 	bl	8002634 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003346:	f7ff f975 	bl	8002634 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e10c      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <HAL_RCC_OscConfig+0x474>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x2ea>
 800336c:	4b64      	ldr	r3, [pc, #400]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a63      	ldr	r2, [pc, #396]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6713      	str	r3, [r2, #112]	; 0x70
 8003378:	e01c      	b.n	80033b4 <HAL_RCC_OscConfig+0x324>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b05      	cmp	r3, #5
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0x30c>
 8003382:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a5e      	ldr	r2, [pc, #376]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003388:	f043 0304 	orr.w	r3, r3, #4
 800338c:	6713      	str	r3, [r2, #112]	; 0x70
 800338e:	4b5c      	ldr	r3, [pc, #368]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a5b      	ldr	r2, [pc, #364]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
 800339a:	e00b      	b.n	80033b4 <HAL_RCC_OscConfig+0x324>
 800339c:	4b58      	ldr	r3, [pc, #352]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	4a57      	ldr	r2, [pc, #348]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	6713      	str	r3, [r2, #112]	; 0x70
 80033a8:	4b55      	ldr	r3, [pc, #340]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a54      	ldr	r2, [pc, #336]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80033ae:	f023 0304 	bic.w	r3, r3, #4
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d015      	beq.n	80033e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7ff f93a 	bl	8002634 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c2:	e00a      	b.n	80033da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c4:	f7ff f936 	bl	8002634 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0cb      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033da:	4b49      	ldr	r3, [pc, #292]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0ee      	beq.n	80033c4 <HAL_RCC_OscConfig+0x334>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e8:	f7ff f924 	bl	8002634 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7ff f920 	bl	8002634 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e0b5      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003406:	4b3e      	ldr	r3, [pc, #248]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1ee      	bne.n	80033f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003418:	4b39      	ldr	r3, [pc, #228]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	4a38      	ldr	r2, [pc, #224]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 800341e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003422:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80a1 	beq.w	8003570 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800342e:	4b34      	ldr	r3, [pc, #208]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b08      	cmp	r3, #8
 8003438:	d05c      	beq.n	80034f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d141      	bne.n	80034c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003442:	4b31      	ldr	r3, [pc, #196]	; (8003508 <HAL_RCC_OscConfig+0x478>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7ff f8f4 	bl	8002634 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7ff f8f0 	bl	8002634 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e087      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	4b27      	ldr	r3, [pc, #156]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69da      	ldr	r2, [r3, #28]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	019b      	lsls	r3, r3, #6
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	085b      	lsrs	r3, r3, #1
 8003486:	3b01      	subs	r3, #1
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	491b      	ldr	r1, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x478>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7ff f8c9 	bl	8002634 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a6:	f7ff f8c5 	bl	8002634 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e05c      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x416>
 80034c4:	e054      	b.n	8003570 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <HAL_RCC_OscConfig+0x478>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7ff f8b2 	bl	8002634 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d4:	f7ff f8ae 	bl	8002634 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e045      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x444>
 80034f2:	e03d      	b.n	8003570 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d107      	bne.n	800350c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e038      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
 8003500:	40023800 	.word	0x40023800
 8003504:	40007000 	.word	0x40007000
 8003508:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <HAL_RCC_OscConfig+0x4ec>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d028      	beq.n	800356c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d121      	bne.n	800356c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d11a      	bne.n	800356c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800353c:	4013      	ands	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003542:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003544:	4293      	cmp	r3, r2
 8003546:	d111      	bne.n	800356c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	3b01      	subs	r3, #1
 8003556:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d107      	bne.n	800356c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800

08003580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0cc      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003594:	4b68      	ldr	r3, [pc, #416]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d90c      	bls.n	80035bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b65      	ldr	r3, [pc, #404]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b63      	ldr	r3, [pc, #396]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0b8      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d020      	beq.n	800360a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d4:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a58      	ldr	r2, [pc, #352]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b50      	ldr	r3, [pc, #320]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	494d      	ldr	r1, [pc, #308]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d044      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d119      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e07f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d003      	beq.n	800363e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363a:	2b03      	cmp	r3, #3
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	4b3f      	ldr	r3, [pc, #252]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e067      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365e:	4b37      	ldr	r3, [pc, #220]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4934      	ldr	r1, [pc, #208]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	4313      	orrs	r3, r2
 800366e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003670:	f7fe ffe0 	bl	8002634 <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	e00a      	b.n	800368e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003678:	f7fe ffdc 	bl	8002634 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	; 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e04f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	4b2b      	ldr	r3, [pc, #172]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 020c 	and.w	r2, r3, #12
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	429a      	cmp	r2, r3
 800369e:	d1eb      	bne.n	8003678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d20c      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e032      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4916      	ldr	r1, [pc, #88]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	490e      	ldr	r1, [pc, #56]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003706:	f000 f821 	bl	800374c <HAL_RCC_GetSysClockFreq>
 800370a:	4602      	mov	r2, r0
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	490a      	ldr	r1, [pc, #40]	; (8003740 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	5ccb      	ldrb	r3, [r1, r3]
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe ff40 	bl	80025ac <HAL_InitTick>

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40023c00 	.word	0x40023c00
 800373c:	40023800 	.word	0x40023800
 8003740:	08005400 	.word	0x08005400
 8003744:	2000000c 	.word	0x2000000c
 8003748:	20000010 	.word	0x20000010

0800374c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003750:	b094      	sub	sp, #80	; 0x50
 8003752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	647b      	str	r3, [r7, #68]	; 0x44
 8003758:	2300      	movs	r3, #0
 800375a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800375c:	2300      	movs	r3, #0
 800375e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003764:	4b79      	ldr	r3, [pc, #484]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 030c 	and.w	r3, r3, #12
 800376c:	2b08      	cmp	r3, #8
 800376e:	d00d      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x40>
 8003770:	2b08      	cmp	r3, #8
 8003772:	f200 80e1 	bhi.w	8003938 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x34>
 800377a:	2b04      	cmp	r3, #4
 800377c:	d003      	beq.n	8003786 <HAL_RCC_GetSysClockFreq+0x3a>
 800377e:	e0db      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003780:	4b73      	ldr	r3, [pc, #460]	; (8003950 <HAL_RCC_GetSysClockFreq+0x204>)
 8003782:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003784:	e0db      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003786:	4b73      	ldr	r3, [pc, #460]	; (8003954 <HAL_RCC_GetSysClockFreq+0x208>)
 8003788:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800378a:	e0d8      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800378c:	4b6f      	ldr	r3, [pc, #444]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003794:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003796:	4b6d      	ldr	r3, [pc, #436]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d063      	beq.n	800386a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a2:	4b6a      	ldr	r3, [pc, #424]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	2200      	movs	r2, #0
 80037aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b4:	633b      	str	r3, [r7, #48]	; 0x30
 80037b6:	2300      	movs	r3, #0
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037be:	4622      	mov	r2, r4
 80037c0:	462b      	mov	r3, r5
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	0159      	lsls	r1, r3, #5
 80037cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d0:	0150      	lsls	r0, r2, #5
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4621      	mov	r1, r4
 80037d8:	1a51      	subs	r1, r2, r1
 80037da:	6139      	str	r1, [r7, #16]
 80037dc:	4629      	mov	r1, r5
 80037de:	eb63 0301 	sbc.w	r3, r3, r1
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037f0:	4659      	mov	r1, fp
 80037f2:	018b      	lsls	r3, r1, #6
 80037f4:	4651      	mov	r1, sl
 80037f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037fa:	4651      	mov	r1, sl
 80037fc:	018a      	lsls	r2, r1, #6
 80037fe:	4651      	mov	r1, sl
 8003800:	ebb2 0801 	subs.w	r8, r2, r1
 8003804:	4659      	mov	r1, fp
 8003806:	eb63 0901 	sbc.w	r9, r3, r1
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800381e:	4690      	mov	r8, r2
 8003820:	4699      	mov	r9, r3
 8003822:	4623      	mov	r3, r4
 8003824:	eb18 0303 	adds.w	r3, r8, r3
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	462b      	mov	r3, r5
 800382c:	eb49 0303 	adc.w	r3, r9, r3
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800383e:	4629      	mov	r1, r5
 8003840:	024b      	lsls	r3, r1, #9
 8003842:	4621      	mov	r1, r4
 8003844:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003848:	4621      	mov	r1, r4
 800384a:	024a      	lsls	r2, r1, #9
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003852:	2200      	movs	r2, #0
 8003854:	62bb      	str	r3, [r7, #40]	; 0x28
 8003856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800385c:	f7fd f998 	bl	8000b90 <__aeabi_uldivmod>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4613      	mov	r3, r2
 8003866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003868:	e058      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386a:	4b38      	ldr	r3, [pc, #224]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	099b      	lsrs	r3, r3, #6
 8003870:	2200      	movs	r2, #0
 8003872:	4618      	mov	r0, r3
 8003874:	4611      	mov	r1, r2
 8003876:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	2300      	movs	r3, #0
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
 8003880:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003884:	4642      	mov	r2, r8
 8003886:	464b      	mov	r3, r9
 8003888:	f04f 0000 	mov.w	r0, #0
 800388c:	f04f 0100 	mov.w	r1, #0
 8003890:	0159      	lsls	r1, r3, #5
 8003892:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003896:	0150      	lsls	r0, r2, #5
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4641      	mov	r1, r8
 800389e:	ebb2 0a01 	subs.w	sl, r2, r1
 80038a2:	4649      	mov	r1, r9
 80038a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038bc:	ebb2 040a 	subs.w	r4, r2, sl
 80038c0:	eb63 050b 	sbc.w	r5, r3, fp
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	00eb      	lsls	r3, r5, #3
 80038ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d2:	00e2      	lsls	r2, r4, #3
 80038d4:	4614      	mov	r4, r2
 80038d6:	461d      	mov	r5, r3
 80038d8:	4643      	mov	r3, r8
 80038da:	18e3      	adds	r3, r4, r3
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	464b      	mov	r3, r9
 80038e0:	eb45 0303 	adc.w	r3, r5, r3
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038f2:	4629      	mov	r1, r5
 80038f4:	028b      	lsls	r3, r1, #10
 80038f6:	4621      	mov	r1, r4
 80038f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038fc:	4621      	mov	r1, r4
 80038fe:	028a      	lsls	r2, r1, #10
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003906:	2200      	movs	r2, #0
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	61fa      	str	r2, [r7, #28]
 800390c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003910:	f7fd f93e 	bl	8000b90 <__aeabi_uldivmod>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4613      	mov	r3, r2
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_GetSysClockFreq+0x200>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	3301      	adds	r3, #1
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800392c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800392e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003936:	e002      	b.n	800393e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCC_GetSysClockFreq+0x204>)
 800393a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800393c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800393e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003940:	4618      	mov	r0, r3
 8003942:	3750      	adds	r7, #80	; 0x50
 8003944:	46bd      	mov	sp, r7
 8003946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	00f42400 	.word	0x00f42400
 8003954:	007a1200 	.word	0x007a1200

08003958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <HAL_RCC_GetHCLKFreq+0x14>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	2000000c 	.word	0x2000000c

08003970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003974:	f7ff fff0 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0a9b      	lsrs	r3, r3, #10
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4903      	ldr	r1, [pc, #12]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40023800 	.word	0x40023800
 8003994:	08005410 	.word	0x08005410

08003998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800399c:	f7ff ffdc 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	0b5b      	lsrs	r3, r3, #13
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4903      	ldr	r1, [pc, #12]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40023800 	.word	0x40023800
 80039bc:	08005410 	.word	0x08005410

080039c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e041      	b.n	8003a56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fe fbe2 	bl	80021b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f000 fd80 	bl	8004504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d001      	beq.n	8003a78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e03c      	b.n	8003af2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1e      	ldr	r2, [pc, #120]	; (8003b00 <HAL_TIM_Base_Start+0xa0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d018      	beq.n	8003abc <HAL_TIM_Base_Start+0x5c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a92:	d013      	beq.n	8003abc <HAL_TIM_Base_Start+0x5c>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1a      	ldr	r2, [pc, #104]	; (8003b04 <HAL_TIM_Base_Start+0xa4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00e      	beq.n	8003abc <HAL_TIM_Base_Start+0x5c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a19      	ldr	r2, [pc, #100]	; (8003b08 <HAL_TIM_Base_Start+0xa8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d009      	beq.n	8003abc <HAL_TIM_Base_Start+0x5c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <HAL_TIM_Base_Start+0xac>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <HAL_TIM_Base_Start+0x5c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a16      	ldr	r2, [pc, #88]	; (8003b10 <HAL_TIM_Base_Start+0xb0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d111      	bne.n	8003ae0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d010      	beq.n	8003af0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ade:	e007      	b.n	8003af0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40014000 	.word	0x40014000

08003b14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e041      	b.n	8003baa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f839 	bl	8003bb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4619      	mov	r1, r3
 8003b52:	4610      	mov	r0, r2
 8003b54:	f000 fcd6 	bl	8004504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d109      	bne.n	8003bec <HAL_TIM_PWM_Start+0x24>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e022      	b.n	8003c32 <HAL_TIM_PWM_Start+0x6a>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d109      	bne.n	8003c06 <HAL_TIM_PWM_Start+0x3e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	bf14      	ite	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	2300      	moveq	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	e015      	b.n	8003c32 <HAL_TIM_PWM_Start+0x6a>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d109      	bne.n	8003c20 <HAL_TIM_PWM_Start+0x58>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e008      	b.n	8003c32 <HAL_TIM_PWM_Start+0x6a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	bf14      	ite	ne
 8003c2c:	2301      	movne	r3, #1
 8003c2e:	2300      	moveq	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e068      	b.n	8003d0c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_PWM_Start+0x82>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c48:	e013      	b.n	8003c72 <HAL_TIM_PWM_Start+0xaa>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_PWM_Start+0x92>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c58:	e00b      	b.n	8003c72 <HAL_TIM_PWM_Start+0xaa>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_PWM_Start+0xa2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c68:	e003      	b.n	8003c72 <HAL_TIM_PWM_Start+0xaa>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2201      	movs	r2, #1
 8003c78:	6839      	ldr	r1, [r7, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fee8 	bl	8004a50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a23      	ldr	r2, [pc, #140]	; (8003d14 <HAL_TIM_PWM_Start+0x14c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d107      	bne.n	8003c9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1d      	ldr	r2, [pc, #116]	; (8003d14 <HAL_TIM_PWM_Start+0x14c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d018      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d013      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <HAL_TIM_PWM_Start+0x150>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a17      	ldr	r2, [pc, #92]	; (8003d1c <HAL_TIM_PWM_Start+0x154>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d009      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <HAL_TIM_PWM_Start+0x158>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d004      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a14      	ldr	r2, [pc, #80]	; (8003d24 <HAL_TIM_PWM_Start+0x15c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d111      	bne.n	8003cfa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b06      	cmp	r3, #6
 8003ce6:	d010      	beq.n	8003d0a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf8:	e007      	b.n	8003d0a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40010000 	.word	0x40010000
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800
 8003d20:	40000c00 	.word	0x40000c00
 8003d24:	40014000 	.word	0x40014000

08003d28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e097      	b.n	8003e6c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fe fa6b 	bl	800222c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6812      	ldr	r2, [r2, #0]
 8003d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6c:	f023 0307 	bic.w	r3, r3, #7
 8003d70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f000 fbc1 	bl	8004504 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003dc8:	f023 030c 	bic.w	r3, r3, #12
 8003dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	4313      	orrs	r3, r2
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	011a      	lsls	r2, r3, #4
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	031b      	lsls	r3, r3, #12
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003e0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d110      	bne.n	8003ec6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d102      	bne.n	8003eb0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003eaa:	7b7b      	ldrb	r3, [r7, #13]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e069      	b.n	8003f88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec4:	e031      	b.n	8003f2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d110      	bne.n	8003eee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ecc:	7bbb      	ldrb	r3, [r7, #14]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d102      	bne.n	8003ed8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ed2:	7b3b      	ldrb	r3, [r7, #12]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d001      	beq.n	8003edc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e055      	b.n	8003f88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eec:	e01d      	b.n	8003f2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d108      	bne.n	8003f06 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ef4:	7bbb      	ldrb	r3, [r7, #14]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d105      	bne.n	8003f06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003efa:	7b7b      	ldrb	r3, [r7, #13]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d102      	bne.n	8003f06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f00:	7b3b      	ldrb	r3, [r7, #12]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d001      	beq.n	8003f0a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e03e      	b.n	8003f88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_TIM_Encoder_Start+0xc4>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d008      	beq.n	8003f48 <HAL_TIM_Encoder_Start+0xd4>
 8003f36:	e00f      	b.n	8003f58 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fd85 	bl	8004a50 <TIM_CCxChannelCmd>
      break;
 8003f46:	e016      	b.n	8003f76 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	2104      	movs	r1, #4
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fd7d 	bl	8004a50 <TIM_CCxChannelCmd>
      break;
 8003f56:	e00e      	b.n	8003f76 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fd75 	bl	8004a50 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fd6e 	bl	8004a50 <TIM_CCxChannelCmd>
      break;
 8003f74:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d122      	bne.n	8003fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d11b      	bne.n	8003fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0202 	mvn.w	r2, #2
 8003fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fa77 	bl	80044c6 <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fa69 	bl	80044b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fa7a 	bl	80044da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d122      	bne.n	8004040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b04      	cmp	r3, #4
 8004006:	d11b      	bne.n	8004040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0204 	mvn.w	r2, #4
 8004010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa4d 	bl	80044c6 <HAL_TIM_IC_CaptureCallback>
 800402c:	e005      	b.n	800403a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fa3f 	bl	80044b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fa50 	bl	80044da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b08      	cmp	r3, #8
 800404c:	d122      	bne.n	8004094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b08      	cmp	r3, #8
 800405a:	d11b      	bne.n	8004094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0208 	mvn.w	r2, #8
 8004064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2204      	movs	r2, #4
 800406a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fa23 	bl	80044c6 <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fa15 	bl	80044b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fa26 	bl	80044da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b10      	cmp	r3, #16
 80040a0:	d122      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d11b      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0210 	mvn.w	r2, #16
 80040b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2208      	movs	r2, #8
 80040be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f9f9 	bl	80044c6 <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f9eb 	bl	80044b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f9fc 	bl	80044da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d10e      	bne.n	8004114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d107      	bne.n	8004114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0201 	mvn.w	r2, #1
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fd ffa8 	bl	8002064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b80      	cmp	r3, #128	; 0x80
 8004120:	d10e      	bne.n	8004140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412c:	2b80      	cmp	r3, #128	; 0x80
 800412e:	d107      	bne.n	8004140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fd78 	bl	8004c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	d10e      	bne.n	800416c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004158:	2b40      	cmp	r3, #64	; 0x40
 800415a:	d107      	bne.n	800416c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f9c1 	bl	80044ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b20      	cmp	r3, #32
 8004178:	d10e      	bne.n	8004198 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b20      	cmp	r3, #32
 8004186:	d107      	bne.n	8004198 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0220 	mvn.w	r2, #32
 8004190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fd42 	bl	8004c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e0ae      	b.n	800431c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	f200 809f 	bhi.w	800430c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041ce:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d4:	08004209 	.word	0x08004209
 80041d8:	0800430d 	.word	0x0800430d
 80041dc:	0800430d 	.word	0x0800430d
 80041e0:	0800430d 	.word	0x0800430d
 80041e4:	08004249 	.word	0x08004249
 80041e8:	0800430d 	.word	0x0800430d
 80041ec:	0800430d 	.word	0x0800430d
 80041f0:	0800430d 	.word	0x0800430d
 80041f4:	0800428b 	.word	0x0800428b
 80041f8:	0800430d 	.word	0x0800430d
 80041fc:	0800430d 	.word	0x0800430d
 8004200:	0800430d 	.word	0x0800430d
 8004204:	080042cb 	.word	0x080042cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 f9f8 	bl	8004604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0208 	orr.w	r2, r2, #8
 8004222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0204 	bic.w	r2, r2, #4
 8004232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6999      	ldr	r1, [r3, #24]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	619a      	str	r2, [r3, #24]
      break;
 8004246:	e064      	b.n	8004312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fa3e 	bl	80046d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6999      	ldr	r1, [r3, #24]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	021a      	lsls	r2, r3, #8
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	619a      	str	r2, [r3, #24]
      break;
 8004288:	e043      	b.n	8004312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fa89 	bl	80047a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0208 	orr.w	r2, r2, #8
 80042a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0204 	bic.w	r2, r2, #4
 80042b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69d9      	ldr	r1, [r3, #28]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	61da      	str	r2, [r3, #28]
      break;
 80042c8:	e023      	b.n	8004312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fad3 	bl	800487c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69d9      	ldr	r1, [r3, #28]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	021a      	lsls	r2, r3, #8
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	61da      	str	r2, [r3, #28]
      break;
 800430a:	e002      	b.n	8004312 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	75fb      	strb	r3, [r7, #23]
      break;
 8004310:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800431a:	7dfb      	ldrb	r3, [r7, #23]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_TIM_ConfigClockSource+0x1c>
 800433c:	2302      	movs	r3, #2
 800433e:	e0b4      	b.n	80044aa <HAL_TIM_ConfigClockSource+0x186>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800435e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004378:	d03e      	beq.n	80043f8 <HAL_TIM_ConfigClockSource+0xd4>
 800437a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800437e:	f200 8087 	bhi.w	8004490 <HAL_TIM_ConfigClockSource+0x16c>
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004386:	f000 8086 	beq.w	8004496 <HAL_TIM_ConfigClockSource+0x172>
 800438a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438e:	d87f      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x16c>
 8004390:	2b70      	cmp	r3, #112	; 0x70
 8004392:	d01a      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0xa6>
 8004394:	2b70      	cmp	r3, #112	; 0x70
 8004396:	d87b      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x16c>
 8004398:	2b60      	cmp	r3, #96	; 0x60
 800439a:	d050      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x11a>
 800439c:	2b60      	cmp	r3, #96	; 0x60
 800439e:	d877      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x16c>
 80043a0:	2b50      	cmp	r3, #80	; 0x50
 80043a2:	d03c      	beq.n	800441e <HAL_TIM_ConfigClockSource+0xfa>
 80043a4:	2b50      	cmp	r3, #80	; 0x50
 80043a6:	d873      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x16c>
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d058      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x13a>
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d86f      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b30      	cmp	r3, #48	; 0x30
 80043b2:	d064      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x15a>
 80043b4:	2b30      	cmp	r3, #48	; 0x30
 80043b6:	d86b      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x16c>
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d060      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x15a>
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d867      	bhi.n	8004490 <HAL_TIM_ConfigClockSource+0x16c>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d05c      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x15a>
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d05a      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x15a>
 80043c8:	e062      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6899      	ldr	r1, [r3, #8]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f000 fb19 	bl	8004a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	609a      	str	r2, [r3, #8]
      break;
 80043f6:	e04f      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	6899      	ldr	r1, [r3, #8]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f000 fb02 	bl	8004a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800441a:	609a      	str	r2, [r3, #8]
      break;
 800441c:	e03c      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6859      	ldr	r1, [r3, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	461a      	mov	r2, r3
 800442c:	f000 fa76 	bl	800491c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2150      	movs	r1, #80	; 0x50
 8004436:	4618      	mov	r0, r3
 8004438:	f000 facf 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 800443c:	e02c      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6859      	ldr	r1, [r3, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	461a      	mov	r2, r3
 800444c:	f000 fa95 	bl	800497a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2160      	movs	r1, #96	; 0x60
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fabf 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 800445c:	e01c      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	461a      	mov	r2, r3
 800446c:	f000 fa56 	bl	800491c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2140      	movs	r1, #64	; 0x40
 8004476:	4618      	mov	r0, r3
 8004478:	f000 faaf 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 800447c:	e00c      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4619      	mov	r1, r3
 8004488:	4610      	mov	r0, r2
 800448a:	f000 faa6 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 800448e:	e003      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
      break;
 8004494:	e000      	b.n	8004498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a34      	ldr	r2, [pc, #208]	; (80045e8 <TIM_Base_SetConfig+0xe4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00f      	beq.n	800453c <TIM_Base_SetConfig+0x38>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004522:	d00b      	beq.n	800453c <TIM_Base_SetConfig+0x38>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a31      	ldr	r2, [pc, #196]	; (80045ec <TIM_Base_SetConfig+0xe8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d007      	beq.n	800453c <TIM_Base_SetConfig+0x38>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a30      	ldr	r2, [pc, #192]	; (80045f0 <TIM_Base_SetConfig+0xec>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_Base_SetConfig+0x38>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a2f      	ldr	r2, [pc, #188]	; (80045f4 <TIM_Base_SetConfig+0xf0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d108      	bne.n	800454e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a25      	ldr	r2, [pc, #148]	; (80045e8 <TIM_Base_SetConfig+0xe4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d01b      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455c:	d017      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a22      	ldr	r2, [pc, #136]	; (80045ec <TIM_Base_SetConfig+0xe8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a21      	ldr	r2, [pc, #132]	; (80045f0 <TIM_Base_SetConfig+0xec>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00f      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a20      	ldr	r2, [pc, #128]	; (80045f4 <TIM_Base_SetConfig+0xf0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00b      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a1f      	ldr	r2, [pc, #124]	; (80045f8 <TIM_Base_SetConfig+0xf4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d007      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <TIM_Base_SetConfig+0xf8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d003      	beq.n	800458e <TIM_Base_SetConfig+0x8a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a1d      	ldr	r2, [pc, #116]	; (8004600 <TIM_Base_SetConfig+0xfc>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d108      	bne.n	80045a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a08      	ldr	r2, [pc, #32]	; (80045e8 <TIM_Base_SetConfig+0xe4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d103      	bne.n	80045d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	615a      	str	r2, [r3, #20]
}
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40010000 	.word	0x40010000
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40014400 	.word	0x40014400
 8004600:	40014800 	.word	0x40014800

08004604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f023 0201 	bic.w	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0303 	bic.w	r3, r3, #3
 800463a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f023 0302 	bic.w	r3, r3, #2
 800464c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a1c      	ldr	r2, [pc, #112]	; (80046cc <TIM_OC1_SetConfig+0xc8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d10c      	bne.n	800467a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f023 0308 	bic.w	r3, r3, #8
 8004666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f023 0304 	bic.w	r3, r3, #4
 8004678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a13      	ldr	r2, [pc, #76]	; (80046cc <TIM_OC1_SetConfig+0xc8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d111      	bne.n	80046a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	621a      	str	r2, [r3, #32]
}
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40010000 	.word	0x40010000

080046d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0210 	bic.w	r2, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0320 	bic.w	r3, r3, #32
 800471a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a1e      	ldr	r2, [pc, #120]	; (80047a4 <TIM_OC2_SetConfig+0xd4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d10d      	bne.n	800474c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800474a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <TIM_OC2_SetConfig+0xd4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d113      	bne.n	800477c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800475a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	621a      	str	r2, [r3, #32]
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40010000 	.word	0x40010000

080047a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a1d      	ldr	r2, [pc, #116]	; (8004878 <TIM_OC3_SetConfig+0xd0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10d      	bne.n	8004822 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800480c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a14      	ldr	r2, [pc, #80]	; (8004878 <TIM_OC3_SetConfig+0xd0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d113      	bne.n	8004852 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	621a      	str	r2, [r3, #32]
}
 800486c:	bf00      	nop
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	40010000 	.word	0x40010000

0800487c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	031b      	lsls	r3, r3, #12
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a10      	ldr	r2, [pc, #64]	; (8004918 <TIM_OC4_SetConfig+0x9c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d109      	bne.n	80048f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	019b      	lsls	r3, r3, #6
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40010000 	.word	0x40010000

0800491c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f023 0201 	bic.w	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 030a 	bic.w	r3, r3, #10
 8004958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800497a:	b480      	push	{r7}
 800497c:	b087      	sub	sp, #28
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f023 0210 	bic.w	r2, r3, #16
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	031b      	lsls	r3, r3, #12
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f043 0307 	orr.w	r3, r3, #7
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	609a      	str	r2, [r3, #8]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	021a      	lsls	r2, r3, #8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	609a      	str	r2, [r3, #8]
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	2201      	movs	r2, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1a      	ldr	r2, [r3, #32]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	401a      	ands	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1a      	ldr	r2, [r3, #32]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e050      	b.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1c      	ldr	r2, [pc, #112]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d018      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b00:	d013      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a16      	ldr	r2, [pc, #88]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10c      	bne.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000
 8004b68:	40000400 	.word	0x40000400
 8004b6c:	40000800 	.word	0x40000800
 8004b70:	40000c00 	.word	0x40000c00
 8004b74:	40014000 	.word	0x40014000

08004b78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e03d      	b.n	8004c10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e03f      	b.n	8004cd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fd fb9a 	bl	80023a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2224      	movs	r2, #36	; 0x24
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f829 	bl	8004ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce4:	b0c0      	sub	sp, #256	; 0x100
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	68d9      	ldr	r1, [r3, #12]
 8004cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	ea40 0301 	orr.w	r3, r0, r1
 8004d08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d38:	f021 010c 	bic.w	r1, r1, #12
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d46:	430b      	orrs	r3, r1
 8004d48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	6999      	ldr	r1, [r3, #24]
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	ea40 0301 	orr.w	r3, r0, r1
 8004d66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b8f      	ldr	r3, [pc, #572]	; (8004fac <UART_SetConfig+0x2cc>)
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d005      	beq.n	8004d80 <UART_SetConfig+0xa0>
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b8d      	ldr	r3, [pc, #564]	; (8004fb0 <UART_SetConfig+0x2d0>)
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d104      	bne.n	8004d8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d80:	f7fe fe0a 	bl	8003998 <HAL_RCC_GetPCLK2Freq>
 8004d84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d88:	e003      	b.n	8004d92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d8a:	f7fe fdf1 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 8004d8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9c:	f040 810c 	bne.w	8004fb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004daa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004dae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004db2:	4622      	mov	r2, r4
 8004db4:	462b      	mov	r3, r5
 8004db6:	1891      	adds	r1, r2, r2
 8004db8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dba:	415b      	adcs	r3, r3
 8004dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	eb12 0801 	adds.w	r8, r2, r1
 8004dc8:	4629      	mov	r1, r5
 8004dca:	eb43 0901 	adc.w	r9, r3, r1
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004de2:	4690      	mov	r8, r2
 8004de4:	4699      	mov	r9, r3
 8004de6:	4623      	mov	r3, r4
 8004de8:	eb18 0303 	adds.w	r3, r8, r3
 8004dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004df0:	462b      	mov	r3, r5
 8004df2:	eb49 0303 	adc.w	r3, r9, r3
 8004df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e0e:	460b      	mov	r3, r1
 8004e10:	18db      	adds	r3, r3, r3
 8004e12:	653b      	str	r3, [r7, #80]	; 0x50
 8004e14:	4613      	mov	r3, r2
 8004e16:	eb42 0303 	adc.w	r3, r2, r3
 8004e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e24:	f7fb feb4 	bl	8000b90 <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4b61      	ldr	r3, [pc, #388]	; (8004fb4 <UART_SetConfig+0x2d4>)
 8004e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	011c      	lsls	r4, r3, #4
 8004e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e48:	4642      	mov	r2, r8
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	1891      	adds	r1, r2, r2
 8004e4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e50:	415b      	adcs	r3, r3
 8004e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e58:	4641      	mov	r1, r8
 8004e5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e5e:	4649      	mov	r1, r9
 8004e60:	eb43 0b01 	adc.w	fp, r3, r1
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e78:	4692      	mov	sl, r2
 8004e7a:	469b      	mov	fp, r3
 8004e7c:	4643      	mov	r3, r8
 8004e7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e86:	464b      	mov	r3, r9
 8004e88:	eb4b 0303 	adc.w	r3, fp, r3
 8004e8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ea0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	18db      	adds	r3, r3, r3
 8004ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8004eaa:	4613      	mov	r3, r2
 8004eac:	eb42 0303 	adc.w	r3, r2, r3
 8004eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004eb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004eb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004eba:	f7fb fe69 	bl	8000b90 <__aeabi_uldivmod>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4b3b      	ldr	r3, [pc, #236]	; (8004fb4 <UART_SetConfig+0x2d4>)
 8004ec6:	fba3 2301 	umull	r2, r3, r3, r1
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	2264      	movs	r2, #100	; 0x64
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	1acb      	subs	r3, r1, r3
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004eda:	4b36      	ldr	r3, [pc, #216]	; (8004fb4 <UART_SetConfig+0x2d4>)
 8004edc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ee0:	095b      	lsrs	r3, r3, #5
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ee8:	441c      	add	r4, r3
 8004eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ef4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ef8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004efc:	4642      	mov	r2, r8
 8004efe:	464b      	mov	r3, r9
 8004f00:	1891      	adds	r1, r2, r2
 8004f02:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f04:	415b      	adcs	r3, r3
 8004f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f0c:	4641      	mov	r1, r8
 8004f0e:	1851      	adds	r1, r2, r1
 8004f10:	6339      	str	r1, [r7, #48]	; 0x30
 8004f12:	4649      	mov	r1, r9
 8004f14:	414b      	adcs	r3, r1
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f24:	4659      	mov	r1, fp
 8004f26:	00cb      	lsls	r3, r1, #3
 8004f28:	4651      	mov	r1, sl
 8004f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f2e:	4651      	mov	r1, sl
 8004f30:	00ca      	lsls	r2, r1, #3
 8004f32:	4610      	mov	r0, r2
 8004f34:	4619      	mov	r1, r3
 8004f36:	4603      	mov	r3, r0
 8004f38:	4642      	mov	r2, r8
 8004f3a:	189b      	adds	r3, r3, r2
 8004f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f40:	464b      	mov	r3, r9
 8004f42:	460a      	mov	r2, r1
 8004f44:	eb42 0303 	adc.w	r3, r2, r3
 8004f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f60:	460b      	mov	r3, r1
 8004f62:	18db      	adds	r3, r3, r3
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f66:	4613      	mov	r3, r2
 8004f68:	eb42 0303 	adc.w	r3, r2, r3
 8004f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f76:	f7fb fe0b 	bl	8000b90 <__aeabi_uldivmod>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <UART_SetConfig+0x2d4>)
 8004f80:	fba3 1302 	umull	r1, r3, r3, r2
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	2164      	movs	r1, #100	; 0x64
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	3332      	adds	r3, #50	; 0x32
 8004f92:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <UART_SetConfig+0x2d4>)
 8004f94:	fba2 2303 	umull	r2, r3, r2, r3
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	f003 0207 	and.w	r2, r3, #7
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4422      	add	r2, r4
 8004fa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fa8:	e105      	b.n	80051b6 <UART_SetConfig+0x4d6>
 8004faa:	bf00      	nop
 8004fac:	40011000 	.word	0x40011000
 8004fb0:	40011400 	.word	0x40011400
 8004fb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fca:	4642      	mov	r2, r8
 8004fcc:	464b      	mov	r3, r9
 8004fce:	1891      	adds	r1, r2, r2
 8004fd0:	6239      	str	r1, [r7, #32]
 8004fd2:	415b      	adcs	r3, r3
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fda:	4641      	mov	r1, r8
 8004fdc:	1854      	adds	r4, r2, r1
 8004fde:	4649      	mov	r1, r9
 8004fe0:	eb43 0501 	adc.w	r5, r3, r1
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	00eb      	lsls	r3, r5, #3
 8004fee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ff2:	00e2      	lsls	r2, r4, #3
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	461d      	mov	r5, r3
 8004ff8:	4643      	mov	r3, r8
 8004ffa:	18e3      	adds	r3, r4, r3
 8004ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005000:	464b      	mov	r3, r9
 8005002:	eb45 0303 	adc.w	r3, r5, r3
 8005006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005016:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005026:	4629      	mov	r1, r5
 8005028:	008b      	lsls	r3, r1, #2
 800502a:	4621      	mov	r1, r4
 800502c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005030:	4621      	mov	r1, r4
 8005032:	008a      	lsls	r2, r1, #2
 8005034:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005038:	f7fb fdaa 	bl	8000b90 <__aeabi_uldivmod>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4b60      	ldr	r3, [pc, #384]	; (80051c4 <UART_SetConfig+0x4e4>)
 8005042:	fba3 2302 	umull	r2, r3, r3, r2
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	011c      	lsls	r4, r3, #4
 800504a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800504e:	2200      	movs	r2, #0
 8005050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005054:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005058:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800505c:	4642      	mov	r2, r8
 800505e:	464b      	mov	r3, r9
 8005060:	1891      	adds	r1, r2, r2
 8005062:	61b9      	str	r1, [r7, #24]
 8005064:	415b      	adcs	r3, r3
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800506c:	4641      	mov	r1, r8
 800506e:	1851      	adds	r1, r2, r1
 8005070:	6139      	str	r1, [r7, #16]
 8005072:	4649      	mov	r1, r9
 8005074:	414b      	adcs	r3, r1
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005084:	4659      	mov	r1, fp
 8005086:	00cb      	lsls	r3, r1, #3
 8005088:	4651      	mov	r1, sl
 800508a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800508e:	4651      	mov	r1, sl
 8005090:	00ca      	lsls	r2, r1, #3
 8005092:	4610      	mov	r0, r2
 8005094:	4619      	mov	r1, r3
 8005096:	4603      	mov	r3, r0
 8005098:	4642      	mov	r2, r8
 800509a:	189b      	adds	r3, r3, r2
 800509c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050a0:	464b      	mov	r3, r9
 80050a2:	460a      	mov	r2, r1
 80050a4:	eb42 0303 	adc.w	r3, r2, r3
 80050a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80050b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050c4:	4649      	mov	r1, r9
 80050c6:	008b      	lsls	r3, r1, #2
 80050c8:	4641      	mov	r1, r8
 80050ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ce:	4641      	mov	r1, r8
 80050d0:	008a      	lsls	r2, r1, #2
 80050d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050d6:	f7fb fd5b 	bl	8000b90 <__aeabi_uldivmod>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4b39      	ldr	r3, [pc, #228]	; (80051c4 <UART_SetConfig+0x4e4>)
 80050e0:	fba3 1302 	umull	r1, r3, r3, r2
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	2164      	movs	r1, #100	; 0x64
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	3332      	adds	r3, #50	; 0x32
 80050f2:	4a34      	ldr	r2, [pc, #208]	; (80051c4 <UART_SetConfig+0x4e4>)
 80050f4:	fba2 2303 	umull	r2, r3, r2, r3
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050fe:	441c      	add	r4, r3
 8005100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005104:	2200      	movs	r2, #0
 8005106:	673b      	str	r3, [r7, #112]	; 0x70
 8005108:	677a      	str	r2, [r7, #116]	; 0x74
 800510a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800510e:	4642      	mov	r2, r8
 8005110:	464b      	mov	r3, r9
 8005112:	1891      	adds	r1, r2, r2
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	415b      	adcs	r3, r3
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800511e:	4641      	mov	r1, r8
 8005120:	1851      	adds	r1, r2, r1
 8005122:	6039      	str	r1, [r7, #0]
 8005124:	4649      	mov	r1, r9
 8005126:	414b      	adcs	r3, r1
 8005128:	607b      	str	r3, [r7, #4]
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005136:	4659      	mov	r1, fp
 8005138:	00cb      	lsls	r3, r1, #3
 800513a:	4651      	mov	r1, sl
 800513c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005140:	4651      	mov	r1, sl
 8005142:	00ca      	lsls	r2, r1, #3
 8005144:	4610      	mov	r0, r2
 8005146:	4619      	mov	r1, r3
 8005148:	4603      	mov	r3, r0
 800514a:	4642      	mov	r2, r8
 800514c:	189b      	adds	r3, r3, r2
 800514e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005150:	464b      	mov	r3, r9
 8005152:	460a      	mov	r2, r1
 8005154:	eb42 0303 	adc.w	r3, r2, r3
 8005158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	663b      	str	r3, [r7, #96]	; 0x60
 8005164:	667a      	str	r2, [r7, #100]	; 0x64
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005172:	4649      	mov	r1, r9
 8005174:	008b      	lsls	r3, r1, #2
 8005176:	4641      	mov	r1, r8
 8005178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800517c:	4641      	mov	r1, r8
 800517e:	008a      	lsls	r2, r1, #2
 8005180:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005184:	f7fb fd04 	bl	8000b90 <__aeabi_uldivmod>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <UART_SetConfig+0x4e4>)
 800518e:	fba3 1302 	umull	r1, r3, r3, r2
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2164      	movs	r1, #100	; 0x64
 8005196:	fb01 f303 	mul.w	r3, r1, r3
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	3332      	adds	r3, #50	; 0x32
 80051a0:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <UART_SetConfig+0x4e4>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	f003 020f 	and.w	r2, r3, #15
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4422      	add	r2, r4
 80051b4:	609a      	str	r2, [r3, #8]
}
 80051b6:	bf00      	nop
 80051b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051bc:	46bd      	mov	sp, r7
 80051be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051c2:	bf00      	nop
 80051c4:	51eb851f 	.word	0x51eb851f

080051c8 <__errno>:
 80051c8:	4b01      	ldr	r3, [pc, #4]	; (80051d0 <__errno+0x8>)
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20000018 	.word	0x20000018

080051d4 <__libc_init_array>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4d0d      	ldr	r5, [pc, #52]	; (800520c <__libc_init_array+0x38>)
 80051d8:	4c0d      	ldr	r4, [pc, #52]	; (8005210 <__libc_init_array+0x3c>)
 80051da:	1b64      	subs	r4, r4, r5
 80051dc:	10a4      	asrs	r4, r4, #2
 80051de:	2600      	movs	r6, #0
 80051e0:	42a6      	cmp	r6, r4
 80051e2:	d109      	bne.n	80051f8 <__libc_init_array+0x24>
 80051e4:	4d0b      	ldr	r5, [pc, #44]	; (8005214 <__libc_init_array+0x40>)
 80051e6:	4c0c      	ldr	r4, [pc, #48]	; (8005218 <__libc_init_array+0x44>)
 80051e8:	f000 f8fe 	bl	80053e8 <_init>
 80051ec:	1b64      	subs	r4, r4, r5
 80051ee:	10a4      	asrs	r4, r4, #2
 80051f0:	2600      	movs	r6, #0
 80051f2:	42a6      	cmp	r6, r4
 80051f4:	d105      	bne.n	8005202 <__libc_init_array+0x2e>
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
 80051f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fc:	4798      	blx	r3
 80051fe:	3601      	adds	r6, #1
 8005200:	e7ee      	b.n	80051e0 <__libc_init_array+0xc>
 8005202:	f855 3b04 	ldr.w	r3, [r5], #4
 8005206:	4798      	blx	r3
 8005208:	3601      	adds	r6, #1
 800520a:	e7f2      	b.n	80051f2 <__libc_init_array+0x1e>
 800520c:	08005420 	.word	0x08005420
 8005210:	08005420 	.word	0x08005420
 8005214:	08005420 	.word	0x08005420
 8005218:	08005424 	.word	0x08005424

0800521c <memset>:
 800521c:	4402      	add	r2, r0
 800521e:	4603      	mov	r3, r0
 8005220:	4293      	cmp	r3, r2
 8005222:	d100      	bne.n	8005226 <memset+0xa>
 8005224:	4770      	bx	lr
 8005226:	f803 1b01 	strb.w	r1, [r3], #1
 800522a:	e7f9      	b.n	8005220 <memset+0x4>

0800522c <sqrt>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	ed2d 8b02 	vpush	{d8}
 8005232:	ec55 4b10 	vmov	r4, r5, d0
 8005236:	f000 f825 	bl	8005284 <__ieee754_sqrt>
 800523a:	4622      	mov	r2, r4
 800523c:	462b      	mov	r3, r5
 800523e:	4620      	mov	r0, r4
 8005240:	4629      	mov	r1, r5
 8005242:	eeb0 8a40 	vmov.f32	s16, s0
 8005246:	eef0 8a60 	vmov.f32	s17, s1
 800524a:	f7fb fc1b 	bl	8000a84 <__aeabi_dcmpun>
 800524e:	b990      	cbnz	r0, 8005276 <sqrt+0x4a>
 8005250:	2200      	movs	r2, #0
 8005252:	2300      	movs	r3, #0
 8005254:	4620      	mov	r0, r4
 8005256:	4629      	mov	r1, r5
 8005258:	f7fb fbec 	bl	8000a34 <__aeabi_dcmplt>
 800525c:	b158      	cbz	r0, 8005276 <sqrt+0x4a>
 800525e:	f7ff ffb3 	bl	80051c8 <__errno>
 8005262:	2321      	movs	r3, #33	; 0x21
 8005264:	6003      	str	r3, [r0, #0]
 8005266:	2200      	movs	r2, #0
 8005268:	2300      	movs	r3, #0
 800526a:	4610      	mov	r0, r2
 800526c:	4619      	mov	r1, r3
 800526e:	f7fb fa99 	bl	80007a4 <__aeabi_ddiv>
 8005272:	ec41 0b18 	vmov	d8, r0, r1
 8005276:	eeb0 0a48 	vmov.f32	s0, s16
 800527a:	eef0 0a68 	vmov.f32	s1, s17
 800527e:	ecbd 8b02 	vpop	{d8}
 8005282:	bd38      	pop	{r3, r4, r5, pc}

08005284 <__ieee754_sqrt>:
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	ec55 4b10 	vmov	r4, r5, d0
 800528c:	4e55      	ldr	r6, [pc, #340]	; (80053e4 <__ieee754_sqrt+0x160>)
 800528e:	43ae      	bics	r6, r5
 8005290:	ee10 0a10 	vmov	r0, s0
 8005294:	ee10 3a10 	vmov	r3, s0
 8005298:	462a      	mov	r2, r5
 800529a:	4629      	mov	r1, r5
 800529c:	d110      	bne.n	80052c0 <__ieee754_sqrt+0x3c>
 800529e:	ee10 2a10 	vmov	r2, s0
 80052a2:	462b      	mov	r3, r5
 80052a4:	f7fb f954 	bl	8000550 <__aeabi_dmul>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4620      	mov	r0, r4
 80052ae:	4629      	mov	r1, r5
 80052b0:	f7fa ff98 	bl	80001e4 <__adddf3>
 80052b4:	4604      	mov	r4, r0
 80052b6:	460d      	mov	r5, r1
 80052b8:	ec45 4b10 	vmov	d0, r4, r5
 80052bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	dc10      	bgt.n	80052e6 <__ieee754_sqrt+0x62>
 80052c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80052c8:	4330      	orrs	r0, r6
 80052ca:	d0f5      	beq.n	80052b8 <__ieee754_sqrt+0x34>
 80052cc:	b15d      	cbz	r5, 80052e6 <__ieee754_sqrt+0x62>
 80052ce:	ee10 2a10 	vmov	r2, s0
 80052d2:	462b      	mov	r3, r5
 80052d4:	ee10 0a10 	vmov	r0, s0
 80052d8:	f7fa ff82 	bl	80001e0 <__aeabi_dsub>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	f7fb fa60 	bl	80007a4 <__aeabi_ddiv>
 80052e4:	e7e6      	b.n	80052b4 <__ieee754_sqrt+0x30>
 80052e6:	1512      	asrs	r2, r2, #20
 80052e8:	d074      	beq.n	80053d4 <__ieee754_sqrt+0x150>
 80052ea:	07d4      	lsls	r4, r2, #31
 80052ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80052f0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80052f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80052f8:	bf5e      	ittt	pl
 80052fa:	0fda      	lsrpl	r2, r3, #31
 80052fc:	005b      	lslpl	r3, r3, #1
 80052fe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005302:	2400      	movs	r4, #0
 8005304:	0fda      	lsrs	r2, r3, #31
 8005306:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800530a:	107f      	asrs	r7, r7, #1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	2516      	movs	r5, #22
 8005310:	4620      	mov	r0, r4
 8005312:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005316:	1886      	adds	r6, r0, r2
 8005318:	428e      	cmp	r6, r1
 800531a:	bfde      	ittt	le
 800531c:	1b89      	suble	r1, r1, r6
 800531e:	18b0      	addle	r0, r6, r2
 8005320:	18a4      	addle	r4, r4, r2
 8005322:	0049      	lsls	r1, r1, #1
 8005324:	3d01      	subs	r5, #1
 8005326:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800532a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800532e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005332:	d1f0      	bne.n	8005316 <__ieee754_sqrt+0x92>
 8005334:	462a      	mov	r2, r5
 8005336:	f04f 0e20 	mov.w	lr, #32
 800533a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800533e:	4281      	cmp	r1, r0
 8005340:	eb06 0c05 	add.w	ip, r6, r5
 8005344:	dc02      	bgt.n	800534c <__ieee754_sqrt+0xc8>
 8005346:	d113      	bne.n	8005370 <__ieee754_sqrt+0xec>
 8005348:	459c      	cmp	ip, r3
 800534a:	d811      	bhi.n	8005370 <__ieee754_sqrt+0xec>
 800534c:	f1bc 0f00 	cmp.w	ip, #0
 8005350:	eb0c 0506 	add.w	r5, ip, r6
 8005354:	da43      	bge.n	80053de <__ieee754_sqrt+0x15a>
 8005356:	2d00      	cmp	r5, #0
 8005358:	db41      	blt.n	80053de <__ieee754_sqrt+0x15a>
 800535a:	f100 0801 	add.w	r8, r0, #1
 800535e:	1a09      	subs	r1, r1, r0
 8005360:	459c      	cmp	ip, r3
 8005362:	bf88      	it	hi
 8005364:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005368:	eba3 030c 	sub.w	r3, r3, ip
 800536c:	4432      	add	r2, r6
 800536e:	4640      	mov	r0, r8
 8005370:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005374:	f1be 0e01 	subs.w	lr, lr, #1
 8005378:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800537c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005380:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005384:	d1db      	bne.n	800533e <__ieee754_sqrt+0xba>
 8005386:	430b      	orrs	r3, r1
 8005388:	d006      	beq.n	8005398 <__ieee754_sqrt+0x114>
 800538a:	1c50      	adds	r0, r2, #1
 800538c:	bf13      	iteet	ne
 800538e:	3201      	addne	r2, #1
 8005390:	3401      	addeq	r4, #1
 8005392:	4672      	moveq	r2, lr
 8005394:	f022 0201 	bicne.w	r2, r2, #1
 8005398:	1063      	asrs	r3, r4, #1
 800539a:	0852      	lsrs	r2, r2, #1
 800539c:	07e1      	lsls	r1, r4, #31
 800539e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80053a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80053a6:	bf48      	it	mi
 80053a8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80053ac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80053b0:	4614      	mov	r4, r2
 80053b2:	e781      	b.n	80052b8 <__ieee754_sqrt+0x34>
 80053b4:	0ad9      	lsrs	r1, r3, #11
 80053b6:	3815      	subs	r0, #21
 80053b8:	055b      	lsls	r3, r3, #21
 80053ba:	2900      	cmp	r1, #0
 80053bc:	d0fa      	beq.n	80053b4 <__ieee754_sqrt+0x130>
 80053be:	02cd      	lsls	r5, r1, #11
 80053c0:	d50a      	bpl.n	80053d8 <__ieee754_sqrt+0x154>
 80053c2:	f1c2 0420 	rsb	r4, r2, #32
 80053c6:	fa23 f404 	lsr.w	r4, r3, r4
 80053ca:	1e55      	subs	r5, r2, #1
 80053cc:	4093      	lsls	r3, r2
 80053ce:	4321      	orrs	r1, r4
 80053d0:	1b42      	subs	r2, r0, r5
 80053d2:	e78a      	b.n	80052ea <__ieee754_sqrt+0x66>
 80053d4:	4610      	mov	r0, r2
 80053d6:	e7f0      	b.n	80053ba <__ieee754_sqrt+0x136>
 80053d8:	0049      	lsls	r1, r1, #1
 80053da:	3201      	adds	r2, #1
 80053dc:	e7ef      	b.n	80053be <__ieee754_sqrt+0x13a>
 80053de:	4680      	mov	r8, r0
 80053e0:	e7bd      	b.n	800535e <__ieee754_sqrt+0xda>
 80053e2:	bf00      	nop
 80053e4:	7ff00000 	.word	0x7ff00000

080053e8 <_init>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	bf00      	nop
 80053ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ee:	bc08      	pop	{r3}
 80053f0:	469e      	mov	lr, r3
 80053f2:	4770      	bx	lr

080053f4 <_fini>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	bf00      	nop
 80053f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fa:	bc08      	pop	{r3}
 80053fc:	469e      	mov	lr, r3
 80053fe:	4770      	bx	lr
